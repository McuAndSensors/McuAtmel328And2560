
FingerPrint.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00002c06  00002c7a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002c06  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00002c8c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002cbc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00002cfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000545a  00000000  00000000  00002d2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008cb  00000000  00000000  00008186  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001fca  00000000  00000000  00008a51  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e8  00000000  00000000  0000aa1c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000e16  00000000  00000000  0000ab04  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00005eb5  00000000  00000000  0000b91a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001488  00000000  00000000  000117cf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 63 02 	jmp	0x4c6	; 0x4c6 <__ctors_end>
       4:	0c 94 78 02 	jmp	0x4f0	; 0x4f0 <__bad_interrupt>
       8:	0c 94 78 02 	jmp	0x4f0	; 0x4f0 <__bad_interrupt>
       c:	0c 94 78 02 	jmp	0x4f0	; 0x4f0 <__bad_interrupt>
      10:	0c 94 78 02 	jmp	0x4f0	; 0x4f0 <__bad_interrupt>
      14:	0c 94 78 02 	jmp	0x4f0	; 0x4f0 <__bad_interrupt>
      18:	0c 94 78 02 	jmp	0x4f0	; 0x4f0 <__bad_interrupt>
      1c:	0c 94 78 02 	jmp	0x4f0	; 0x4f0 <__bad_interrupt>
      20:	0c 94 78 02 	jmp	0x4f0	; 0x4f0 <__bad_interrupt>
      24:	0c 94 78 02 	jmp	0x4f0	; 0x4f0 <__bad_interrupt>
      28:	0c 94 78 02 	jmp	0x4f0	; 0x4f0 <__bad_interrupt>
      2c:	0c 94 78 02 	jmp	0x4f0	; 0x4f0 <__bad_interrupt>
      30:	0c 94 78 02 	jmp	0x4f0	; 0x4f0 <__bad_interrupt>
      34:	0c 94 78 02 	jmp	0x4f0	; 0x4f0 <__bad_interrupt>
      38:	0c 94 78 02 	jmp	0x4f0	; 0x4f0 <__bad_interrupt>
      3c:	0c 94 78 02 	jmp	0x4f0	; 0x4f0 <__bad_interrupt>
      40:	0c 94 78 02 	jmp	0x4f0	; 0x4f0 <__bad_interrupt>
      44:	0c 94 78 02 	jmp	0x4f0	; 0x4f0 <__bad_interrupt>
      48:	0c 94 78 02 	jmp	0x4f0	; 0x4f0 <__bad_interrupt>
      4c:	0c 94 78 02 	jmp	0x4f0	; 0x4f0 <__bad_interrupt>
      50:	0c 94 78 02 	jmp	0x4f0	; 0x4f0 <__bad_interrupt>
      54:	0c 94 78 02 	jmp	0x4f0	; 0x4f0 <__bad_interrupt>
      58:	0c 94 78 02 	jmp	0x4f0	; 0x4f0 <__bad_interrupt>
      5c:	0c 94 78 02 	jmp	0x4f0	; 0x4f0 <__bad_interrupt>
      60:	0c 94 78 02 	jmp	0x4f0	; 0x4f0 <__bad_interrupt>
      64:	0c 94 78 02 	jmp	0x4f0	; 0x4f0 <__bad_interrupt>
      68:	2c 06       	cpc	r2, r28
      6a:	2c 06       	cpc	r2, r28
      6c:	c1 02       	muls	r28, r17
      6e:	b4 02       	muls	r27, r20
      70:	2c 06       	cpc	r2, r28
      72:	2c 06       	cpc	r2, r28
      74:	2c 06       	cpc	r2, r28
      76:	2c 06       	cpc	r2, r28
      78:	a2 02       	muls	r26, r18
      7a:	2c 06       	cpc	r2, r28
      7c:	2c 06       	cpc	r2, r28
      7e:	2c 06       	cpc	r2, r28
      80:	2c 06       	cpc	r2, r28
      82:	2c 06       	cpc	r2, r28
      84:	ce 02       	muls	r28, r30
      86:	a2 02       	muls	r26, r18
      88:	a2 02       	muls	r26, r18
      8a:	9f 02       	muls	r25, r31
      8c:	2c 06       	cpc	r2, r28
      8e:	b4 02       	muls	r27, r20
      90:	2c 06       	cpc	r2, r28
      92:	a2 02       	muls	r26, r18
      94:	2c 06       	cpc	r2, r28
      96:	2c 06       	cpc	r2, r28
      98:	a8 02       	muls	r26, r24
      9a:	a2 02       	muls	r26, r18
      9c:	a2 02       	muls	r26, r18
      9e:	a2 02       	muls	r26, r18
      a0:	c1 02       	muls	r28, r17
      a2:	16 03       	mulsu	r17, r22
      a4:	45 06       	cpc	r4, r21
      a6:	31 03       	mulsu	r19, r17
      a8:	3a 03       	fmul	r19, r18
      aa:	1f 03       	fmul	r17, r23
      ac:	22 03       	mulsu	r18, r18
      ae:	25 03       	mulsu	r18, r21
      b0:	45 06       	cpc	r4, r21
      b2:	3d 03       	fmul	r19, r21
      b4:	19 03       	fmul	r17, r17
      b6:	1c 03       	fmul	r17, r20
      b8:	42 06       	cpc	r4, r18
      ba:	28 03       	fmul	r18, r16
      bc:	13 03       	mulsu	r17, r19
      be:	2e 03       	fmul	r18, r22
      c0:	3d 03       	fmul	r19, r21
      c2:	3d 03       	fmul	r19, r21
      c4:	42 06       	cpc	r4, r18
      c6:	42 06       	cpc	r4, r18
      c8:	37 03       	mulsu	r19, r23
      ca:	42 06       	cpc	r4, r18
      cc:	3d 03       	fmul	r19, r21
      ce:	45 06       	cpc	r4, r21
      d0:	2b 03       	fmul	r18, r19
      d2:	45 06       	cpc	r4, r21
      d4:	3d 03       	fmul	r19, r21
      d6:	3d 03       	fmul	r19, r21
      d8:	3d 03       	fmul	r19, r21
      da:	34 03       	mulsu	r19, r20
      dc:	63 03       	mulsu	r22, r19
      de:	63 03       	mulsu	r22, r19
      e0:	6c 03       	fmul	r22, r20
      e2:	75 03       	mulsu	r23, r21
      e4:	63 03       	mulsu	r22, r19
      e6:	63 03       	mulsu	r22, r19
      e8:	63 03       	mulsu	r22, r19
      ea:	63 03       	mulsu	r22, r19
      ec:	7b 03       	fmul	r23, r19
      ee:	63 03       	mulsu	r22, r19
      f0:	63 03       	mulsu	r22, r19
      f2:	63 03       	mulsu	r22, r19
      f4:	63 03       	mulsu	r22, r19
      f6:	63 03       	mulsu	r22, r19
      f8:	69 03       	fmul	r22, r17
      fa:	7b 03       	fmul	r23, r19
      fc:	7b 03       	fmul	r23, r19
      fe:	66 03       	mulsu	r22, r22
     100:	63 03       	mulsu	r22, r19
     102:	72 03       	mulsu	r23, r18
     104:	63 03       	mulsu	r22, r19
     106:	7b 03       	fmul	r23, r19
     108:	63 03       	mulsu	r22, r19
     10a:	63 03       	mulsu	r22, r19
     10c:	78 03       	fmul	r23, r16
     10e:	7b 03       	fmul	r23, r19
     110:	7b 03       	fmul	r23, r19
     112:	7b 03       	fmul	r23, r19
     114:	6f 03       	fmul	r22, r23
     116:	e1 03       	fmuls	r22, r17
     118:	4d 06       	cpc	r4, r29
     11a:	fc 03       	fmulsu	r23, r20
     11c:	05 04       	cpc	r0, r5
     11e:	ea 03       	fmulsu	r22, r18
     120:	ed 03       	fmulsu	r22, r21
     122:	f0 03       	fmuls	r23, r16
     124:	4d 06       	cpc	r4, r29
     126:	08 04       	cpc	r0, r8
     128:	e4 03       	fmuls	r22, r20
     12a:	e7 03       	fmuls	r22, r23
     12c:	4a 06       	cpc	r4, r26
     12e:	f3 03       	fmuls	r23, r19
     130:	de 03       	fmulsu	r21, r22
     132:	f9 03       	fmulsu	r23, r17
     134:	08 04       	cpc	r0, r8
     136:	08 04       	cpc	r0, r8
     138:	4a 06       	cpc	r4, r26
     13a:	4a 06       	cpc	r4, r26
     13c:	02 04       	cpc	r0, r2
     13e:	4a 06       	cpc	r4, r26
     140:	08 04       	cpc	r0, r8
     142:	4d 06       	cpc	r4, r29
     144:	f6 03       	fmuls	r23, r22
     146:	4d 06       	cpc	r4, r29
     148:	08 04       	cpc	r0, r8
     14a:	08 04       	cpc	r0, r8
     14c:	08 04       	cpc	r0, r8
     14e:	ff 03       	fmulsu	r23, r23
     150:	2d 04       	cpc	r2, r13
     152:	2d 04       	cpc	r2, r13
     154:	36 04       	cpc	r3, r6
     156:	3f 04       	cpc	r3, r15
     158:	2d 04       	cpc	r2, r13
     15a:	2d 04       	cpc	r2, r13
     15c:	2d 04       	cpc	r2, r13
     15e:	2d 04       	cpc	r2, r13
     160:	45 04       	cpc	r4, r5
     162:	2d 04       	cpc	r2, r13
     164:	2d 04       	cpc	r2, r13
     166:	2d 04       	cpc	r2, r13
     168:	2d 04       	cpc	r2, r13
     16a:	2d 04       	cpc	r2, r13
     16c:	33 04       	cpc	r3, r3
     16e:	45 04       	cpc	r4, r5
     170:	45 04       	cpc	r4, r5
     172:	30 04       	cpc	r3, r0
     174:	2d 04       	cpc	r2, r13
     176:	3c 04       	cpc	r3, r12
     178:	2d 04       	cpc	r2, r13
     17a:	45 04       	cpc	r4, r5
     17c:	2d 04       	cpc	r2, r13
     17e:	2d 04       	cpc	r2, r13
     180:	42 04       	cpc	r4, r2
     182:	45 04       	cpc	r4, r5
     184:	45 04       	cpc	r4, r5
     186:	45 04       	cpc	r4, r5
     188:	39 04       	cpc	r3, r9
     18a:	ab 04       	cpc	r10, r11
     18c:	55 06       	cpc	r5, r21
     18e:	c6 04       	cpc	r12, r6
     190:	cf 04       	cpc	r12, r15
     192:	b4 04       	cpc	r11, r4
     194:	b7 04       	cpc	r11, r7
     196:	ba 04       	cpc	r11, r10
     198:	55 06       	cpc	r5, r21
     19a:	d2 04       	cpc	r13, r2
     19c:	ae 04       	cpc	r10, r14
     19e:	b1 04       	cpc	r11, r1
     1a0:	52 06       	cpc	r5, r18
     1a2:	bd 04       	cpc	r11, r13
     1a4:	a8 04       	cpc	r10, r8
     1a6:	c3 04       	cpc	r12, r3
     1a8:	d2 04       	cpc	r13, r2
     1aa:	d2 04       	cpc	r13, r2
     1ac:	52 06       	cpc	r5, r18
     1ae:	52 06       	cpc	r5, r18
     1b0:	cc 04       	cpc	r12, r12
     1b2:	52 06       	cpc	r5, r18
     1b4:	d2 04       	cpc	r13, r2
     1b6:	55 06       	cpc	r5, r21
     1b8:	c0 04       	cpc	r12, r0
     1ba:	55 06       	cpc	r5, r21
     1bc:	d2 04       	cpc	r13, r2
     1be:	d2 04       	cpc	r13, r2
     1c0:	d2 04       	cpc	r13, r2
     1c2:	c9 04       	cpc	r12, r9
     1c4:	f7 04       	cpc	r15, r7
     1c6:	f7 04       	cpc	r15, r7
     1c8:	00 05       	cpc	r16, r0
     1ca:	09 05       	cpc	r16, r9
     1cc:	f7 04       	cpc	r15, r7
     1ce:	f7 04       	cpc	r15, r7
     1d0:	f7 04       	cpc	r15, r7
     1d2:	f7 04       	cpc	r15, r7
     1d4:	0f 05       	cpc	r16, r15
     1d6:	f7 04       	cpc	r15, r7
     1d8:	f7 04       	cpc	r15, r7
     1da:	f7 04       	cpc	r15, r7
     1dc:	f7 04       	cpc	r15, r7
     1de:	f7 04       	cpc	r15, r7
     1e0:	fd 04       	cpc	r15, r13
     1e2:	0f 05       	cpc	r16, r15
     1e4:	0f 05       	cpc	r16, r15
     1e6:	fa 04       	cpc	r15, r10
     1e8:	f7 04       	cpc	r15, r7
     1ea:	06 05       	cpc	r16, r6
     1ec:	f7 04       	cpc	r15, r7
     1ee:	0f 05       	cpc	r16, r15
     1f0:	f7 04       	cpc	r15, r7
     1f2:	f7 04       	cpc	r15, r7
     1f4:	0c 05       	cpc	r16, r12
     1f6:	0f 05       	cpc	r16, r15
     1f8:	0f 05       	cpc	r16, r15
     1fa:	0f 05       	cpc	r16, r15
     1fc:	03 05       	cpc	r16, r3
     1fe:	75 05       	cpc	r23, r5
     200:	5d 06       	cpc	r5, r29
     202:	90 05       	cpc	r25, r0
     204:	99 05       	cpc	r25, r9
     206:	7e 05       	cpc	r23, r14
     208:	81 05       	cpc	r24, r1
     20a:	84 05       	cpc	r24, r4
     20c:	5d 06       	cpc	r5, r29
     20e:	9c 05       	cpc	r25, r12
     210:	78 05       	cpc	r23, r8
     212:	7b 05       	cpc	r23, r11
     214:	5a 06       	cpc	r5, r26
     216:	87 05       	cpc	r24, r7
     218:	72 05       	cpc	r23, r2
     21a:	8d 05       	cpc	r24, r13
     21c:	9c 05       	cpc	r25, r12
     21e:	9c 05       	cpc	r25, r12
     220:	5a 06       	cpc	r5, r26
     222:	5a 06       	cpc	r5, r26
     224:	96 05       	cpc	r25, r6
     226:	5a 06       	cpc	r5, r26
     228:	9c 05       	cpc	r25, r12
     22a:	5d 06       	cpc	r5, r29
     22c:	8a 05       	cpc	r24, r10
     22e:	5d 06       	cpc	r5, r29
     230:	9c 05       	cpc	r25, r12
     232:	9c 05       	cpc	r25, r12
     234:	9c 05       	cpc	r25, r12
     236:	93 05       	cpc	r25, r3
     238:	c1 05       	cpc	r28, r1
     23a:	c1 05       	cpc	r28, r1
     23c:	ca 05       	cpc	r28, r10
     23e:	d3 05       	cpc	r29, r3
     240:	c1 05       	cpc	r28, r1
     242:	c1 05       	cpc	r28, r1
     244:	c1 05       	cpc	r28, r1
     246:	c1 05       	cpc	r28, r1
     248:	d9 05       	cpc	r29, r9
     24a:	c1 05       	cpc	r28, r1
     24c:	c1 05       	cpc	r28, r1
     24e:	c1 05       	cpc	r28, r1
     250:	c1 05       	cpc	r28, r1
     252:	c1 05       	cpc	r28, r1
     254:	c7 05       	cpc	r28, r7
     256:	d9 05       	cpc	r29, r9
     258:	d9 05       	cpc	r29, r9
     25a:	c4 05       	cpc	r28, r4
     25c:	c1 05       	cpc	r28, r1
     25e:	d0 05       	cpc	r29, r0
     260:	c1 05       	cpc	r28, r1
     262:	d9 05       	cpc	r29, r9
     264:	c1 05       	cpc	r28, r1
     266:	c1 05       	cpc	r28, r1
     268:	d6 05       	cpc	r29, r6
     26a:	d9 05       	cpc	r29, r9
     26c:	d9 05       	cpc	r29, r9
     26e:	d9 05       	cpc	r29, r9
     270:	cd 05       	cpc	r28, r13
     272:	2a 06       	cpc	r2, r26
     274:	f4 02       	muls	r31, r20
     276:	40 06       	cpc	r4, r16
     278:	40 06       	cpc	r4, r16
     27a:	40 06       	cpc	r4, r16
     27c:	40 06       	cpc	r4, r16
     27e:	be 03       	fmulsu	r19, r22
     280:	88 04       	cpc	r8, r8
     282:	40 06       	cpc	r4, r16
     284:	52 05       	cpc	r21, r2
     286:	52 05       	cpc	r21, r2
     288:	40 06       	cpc	r4, r16
     28a:	52 05       	cpc	r21, r2
     28c:	52 05       	cpc	r21, r2
     28e:	40 06       	cpc	r4, r16
     290:	52 05       	cpc	r21, r2
     292:	40 06       	cpc	r4, r16
     294:	40 06       	cpc	r4, r16
     296:	40 06       	cpc	r4, r16
     298:	40 06       	cpc	r4, r16
     29a:	40 06       	cpc	r4, r16
     29c:	52 05       	cpc	r21, r2
     29e:	40 06       	cpc	r4, r16
     2a0:	40 06       	cpc	r4, r16
     2a2:	52 05       	cpc	r21, r2
     2a4:	2a 06       	cpc	r2, r26
     2a6:	90 06       	cpc	r9, r16
     2a8:	25 07       	cpc	r18, r21
     2aa:	ab 06       	cpc	r10, r27
     2ac:	b4 06       	cpc	r11, r20
     2ae:	99 06       	cpc	r9, r25
     2b0:	9c 06       	cpc	r9, r28
     2b2:	9f 06       	cpc	r9, r31
     2b4:	25 07       	cpc	r18, r21
     2b6:	b7 06       	cpc	r11, r23
     2b8:	93 06       	cpc	r9, r19
     2ba:	96 06       	cpc	r9, r22
     2bc:	22 07       	cpc	r18, r18
     2be:	a2 06       	cpc	r10, r18
     2c0:	8e 06       	cpc	r8, r30
     2c2:	a8 06       	cpc	r10, r24
     2c4:	b7 06       	cpc	r11, r23
     2c6:	b7 06       	cpc	r11, r23
     2c8:	22 07       	cpc	r18, r18
     2ca:	22 07       	cpc	r18, r18
     2cc:	b1 06       	cpc	r11, r17
     2ce:	22 07       	cpc	r18, r18
     2d0:	b7 06       	cpc	r11, r23
     2d2:	25 07       	cpc	r18, r21
     2d4:	a5 06       	cpc	r10, r21
     2d6:	25 07       	cpc	r18, r21
     2d8:	b7 06       	cpc	r11, r23
     2da:	b7 06       	cpc	r11, r23
     2dc:	b7 06       	cpc	r11, r23
     2de:	ae 06       	cpc	r10, r30
     2e0:	d7 06       	cpc	r13, r23
     2e2:	d7 06       	cpc	r13, r23
     2e4:	e0 06       	cpc	r14, r16
     2e6:	e9 06       	cpc	r14, r25
     2e8:	d7 06       	cpc	r13, r23
     2ea:	d7 06       	cpc	r13, r23
     2ec:	d7 06       	cpc	r13, r23
     2ee:	d7 06       	cpc	r13, r23
     2f0:	ee 06       	cpc	r14, r30
     2f2:	d7 06       	cpc	r13, r23
     2f4:	d7 06       	cpc	r13, r23
     2f6:	d7 06       	cpc	r13, r23
     2f8:	d7 06       	cpc	r13, r23
     2fa:	d7 06       	cpc	r13, r23
     2fc:	dd 06       	cpc	r13, r29
     2fe:	ee 06       	cpc	r14, r30
     300:	ee 06       	cpc	r14, r30
     302:	da 06       	cpc	r13, r26
     304:	d7 06       	cpc	r13, r23
     306:	e6 06       	cpc	r14, r22
     308:	d7 06       	cpc	r13, r23
     30a:	ee 06       	cpc	r14, r30
     30c:	d7 06       	cpc	r13, r23
     30e:	d7 06       	cpc	r13, r23
     310:	ec 06       	cpc	r14, r28
     312:	ee 06       	cpc	r14, r30
     314:	ee 06       	cpc	r14, r30
     316:	ee 06       	cpc	r14, r30
     318:	e3 06       	cpc	r14, r19
     31a:	ae 09       	sbc	r26, r14
     31c:	4a 09       	sbc	r20, r10
     31e:	bd 08       	sbc	r11, r13
     320:	bd 08       	sbc	r11, r13
     322:	bd 08       	sbc	r11, r13
     324:	bd 08       	sbc	r11, r13
     326:	36 09       	sbc	r19, r6
     328:	23 09       	sbc	r18, r3
     32a:	bd 08       	sbc	r11, r13
     32c:	0f 09       	sbc	r16, r15
     32e:	0f 09       	sbc	r16, r15
     330:	bd 08       	sbc	r11, r13
     332:	0f 09       	sbc	r16, r15
     334:	0f 09       	sbc	r16, r15
     336:	bd 08       	sbc	r11, r13
     338:	0f 09       	sbc	r16, r15
     33a:	bd 08       	sbc	r11, r13
     33c:	bd 08       	sbc	r11, r13
     33e:	bd 08       	sbc	r11, r13
     340:	bd 08       	sbc	r11, r13
     342:	bd 08       	sbc	r11, r13
     344:	0f 09       	sbc	r16, r15
     346:	bd 08       	sbc	r11, r13
     348:	bd 08       	sbc	r11, r13
     34a:	0f 09       	sbc	r16, r15
     34c:	ae 09       	sbc	r26, r14
     34e:	59 0e       	add	r5, r25
     350:	27 0c       	add	r2, r7
     352:	a5 0b       	sbc	r26, r21
     354:	a5 0b       	sbc	r26, r21
     356:	a5 0b       	sbc	r26, r21
     358:	a5 0b       	sbc	r26, r21
     35a:	1c 0c       	add	r1, r12
     35c:	11 0c       	add	r1, r1
     35e:	a5 0b       	sbc	r26, r21
     360:	06 0c       	add	r0, r6
     362:	06 0c       	add	r0, r6
     364:	a5 0b       	sbc	r26, r21
     366:	06 0c       	add	r0, r6
     368:	06 0c       	add	r0, r6
     36a:	a5 0b       	sbc	r26, r21
     36c:	06 0c       	add	r0, r6
     36e:	a5 0b       	sbc	r26, r21
     370:	a5 0b       	sbc	r26, r21
     372:	a5 0b       	sbc	r26, r21
     374:	a5 0b       	sbc	r26, r21
     376:	a5 0b       	sbc	r26, r21
     378:	06 0c       	add	r0, r6
     37a:	a5 0b       	sbc	r26, r21
     37c:	a5 0b       	sbc	r26, r21
     37e:	06 0c       	add	r0, r6
     380:	59 0e       	add	r5, r25
     382:	fb 10       	cpse	r15, r11
     384:	b7 0e       	add	r11, r23
     386:	b5 0e       	add	r11, r21
     388:	b5 0e       	add	r11, r21
     38a:	b5 0e       	add	r11, r21
     38c:	b5 0e       	add	r11, r21
     38e:	48 0f       	add	r20, r24
     390:	d9 0f       	add	r29, r25
     392:	b5 0e       	add	r11, r21
     394:	6a 10       	cpse	r6, r10
     396:	6a 10       	cpse	r6, r10
     398:	b5 0e       	add	r11, r21
     39a:	6a 10       	cpse	r6, r10
     39c:	6a 10       	cpse	r6, r10
     39e:	b5 0e       	add	r11, r21
     3a0:	6a 10       	cpse	r6, r10
     3a2:	b5 0e       	add	r11, r21
     3a4:	b5 0e       	add	r11, r21
     3a6:	b5 0e       	add	r11, r21
     3a8:	b5 0e       	add	r11, r21
     3aa:	b5 0e       	add	r11, r21
     3ac:	6a 10       	cpse	r6, r10
     3ae:	b5 0e       	add	r11, r21
     3b0:	b5 0e       	add	r11, r21
     3b2:	6a 10       	cpse	r6, r10
     3b4:	fb 10       	cpse	r15, r11
     3b6:	b3 13       	cpse	r27, r19
     3b8:	86 11       	cpse	r24, r6
     3ba:	a5 0b       	sbc	r26, r21
     3bc:	a5 0b       	sbc	r26, r21
     3be:	a5 0b       	sbc	r26, r21
     3c0:	a5 0b       	sbc	r26, r21
     3c2:	7b 11       	cpse	r23, r11
     3c4:	70 11       	cpse	r23, r0
     3c6:	a5 0b       	sbc	r26, r21
     3c8:	65 11       	cpse	r22, r5
     3ca:	65 11       	cpse	r22, r5
     3cc:	a5 0b       	sbc	r26, r21
     3ce:	65 11       	cpse	r22, r5
     3d0:	65 11       	cpse	r22, r5
     3d2:	a5 0b       	sbc	r26, r21
     3d4:	65 11       	cpse	r22, r5
     3d6:	a5 0b       	sbc	r26, r21
     3d8:	a5 0b       	sbc	r26, r21
     3da:	a5 0b       	sbc	r26, r21
     3dc:	a5 0b       	sbc	r26, r21
     3de:	a5 0b       	sbc	r26, r21
     3e0:	65 11       	cpse	r22, r5
     3e2:	a5 0b       	sbc	r26, r21
     3e4:	a5 0b       	sbc	r26, r21
     3e6:	65 11       	cpse	r22, r5
     3e8:	b3 13       	cpse	r27, r19
     3ea:	dc 13       	cpse	r29, r28
     3ec:	e3 13       	cpse	r30, r19
     3ee:	ea 13       	cpse	r30, r26
     3f0:	f1 13       	cpse	r31, r17
     3f2:	f8 13       	cpse	r31, r24
     3f4:	ff 13       	cpse	r31, r31
     3f6:	06 14       	cp	r0, r6
     3f8:	0d 14       	cp	r0, r13
     3fa:	14 14       	cp	r1, r4
     3fc:	1b 14       	cp	r1, r11
     3fe:	22 14       	cp	r2, r2
     400:	29 14       	cp	r2, r9
     402:	30 14       	cp	r3, r0
     404:	37 14       	cp	r3, r7
     406:	3e 14       	cp	r3, r14
     408:	45 14       	cp	r4, r5
     40a:	53 14       	cp	r5, r3
     40c:	5a 14       	cp	r5, r10
     40e:	61 14       	cp	r6, r1
     410:	68 14       	cp	r6, r8
     412:	6f 14       	cp	r6, r15
     414:	76 14       	cp	r7, r6
     416:	7d 14       	cp	r7, r13
     418:	84 14       	cp	r8, r4
     41a:	8b 14       	cp	r8, r11
     41c:	92 14       	cp	r9, r2
     41e:	99 14       	cp	r9, r9
     420:	a0 14       	cp	r10, r0
     422:	a7 14       	cp	r10, r7
     424:	ae 14       	cp	r10, r14
     426:	b5 14       	cp	r11, r5
     428:	bc 14       	cp	r11, r12
     42a:	ae 09       	sbc	r26, r14
     42c:	4c 09       	sbc	r20, r12
     42e:	bd 08       	sbc	r11, r13
     430:	bd 08       	sbc	r11, r13
     432:	bd 08       	sbc	r11, r13
     434:	bd 08       	sbc	r11, r13
     436:	38 09       	sbc	r19, r8
     438:	25 09       	sbc	r18, r5
     43a:	bd 08       	sbc	r11, r13
     43c:	11 09       	sbc	r17, r1
     43e:	11 09       	sbc	r17, r1
     440:	bd 08       	sbc	r11, r13
     442:	11 09       	sbc	r17, r1
     444:	11 09       	sbc	r17, r1
     446:	bd 08       	sbc	r11, r13
     448:	11 09       	sbc	r17, r1
     44a:	bd 08       	sbc	r11, r13
     44c:	bd 08       	sbc	r11, r13
     44e:	bd 08       	sbc	r11, r13
     450:	bd 08       	sbc	r11, r13
     452:	bd 08       	sbc	r11, r13
     454:	11 09       	sbc	r17, r1
     456:	bd 08       	sbc	r11, r13
     458:	bd 08       	sbc	r11, r13
     45a:	11 09       	sbc	r17, r1
     45c:	ae 09       	sbc	r26, r14
     45e:	59 0e       	add	r5, r25
     460:	29 0c       	add	r2, r9
     462:	a5 0b       	sbc	r26, r21
     464:	a5 0b       	sbc	r26, r21
     466:	a5 0b       	sbc	r26, r21
     468:	a5 0b       	sbc	r26, r21
     46a:	1e 0c       	add	r1, r14
     46c:	13 0c       	add	r1, r3
     46e:	a5 0b       	sbc	r26, r21
     470:	08 0c       	add	r0, r8
     472:	08 0c       	add	r0, r8
     474:	a5 0b       	sbc	r26, r21
     476:	08 0c       	add	r0, r8
     478:	08 0c       	add	r0, r8
     47a:	a5 0b       	sbc	r26, r21
     47c:	08 0c       	add	r0, r8
     47e:	a5 0b       	sbc	r26, r21
     480:	a5 0b       	sbc	r26, r21
     482:	a5 0b       	sbc	r26, r21
     484:	a5 0b       	sbc	r26, r21
     486:	a5 0b       	sbc	r26, r21
     488:	08 0c       	add	r0, r8
     48a:	a5 0b       	sbc	r26, r21
     48c:	a5 0b       	sbc	r26, r21
     48e:	08 0c       	add	r0, r8
     490:	59 0e       	add	r5, r25
     492:	b3 13       	cpse	r27, r19
     494:	88 11       	cpse	r24, r8
     496:	a5 0b       	sbc	r26, r21
     498:	a5 0b       	sbc	r26, r21
     49a:	a5 0b       	sbc	r26, r21
     49c:	a5 0b       	sbc	r26, r21
     49e:	7d 11       	cpse	r23, r13
     4a0:	72 11       	cpse	r23, r2
     4a2:	a5 0b       	sbc	r26, r21
     4a4:	67 11       	cpse	r22, r7
     4a6:	67 11       	cpse	r22, r7
     4a8:	a5 0b       	sbc	r26, r21
     4aa:	67 11       	cpse	r22, r7
     4ac:	67 11       	cpse	r22, r7
     4ae:	a5 0b       	sbc	r26, r21
     4b0:	67 11       	cpse	r22, r7
     4b2:	a5 0b       	sbc	r26, r21
     4b4:	a5 0b       	sbc	r26, r21
     4b6:	a5 0b       	sbc	r26, r21
     4b8:	a5 0b       	sbc	r26, r21
     4ba:	a5 0b       	sbc	r26, r21
     4bc:	67 11       	cpse	r22, r7
     4be:	a5 0b       	sbc	r26, r21
     4c0:	a5 0b       	sbc	r26, r21
     4c2:	67 11       	cpse	r22, r7
     4c4:	b3 13       	cpse	r27, r19

000004c6 <__ctors_end>:
     4c6:	11 24       	eor	r1, r1
     4c8:	1f be       	out	0x3f, r1	; 63
     4ca:	cf ef       	ldi	r28, 0xFF	; 255
     4cc:	d8 e0       	ldi	r29, 0x08	; 8
     4ce:	de bf       	out	0x3e, r29	; 62
     4d0:	cd bf       	out	0x3d, r28	; 61

000004d2 <__do_copy_data>:
     4d2:	11 e0       	ldi	r17, 0x01	; 1
     4d4:	a0 e0       	ldi	r26, 0x00	; 0
     4d6:	b1 e0       	ldi	r27, 0x01	; 1
     4d8:	e6 e0       	ldi	r30, 0x06	; 6
     4da:	fc e2       	ldi	r31, 0x2C	; 44
     4dc:	02 c0       	rjmp	.+4      	; 0x4e2 <__do_copy_data+0x10>
     4de:	05 90       	lpm	r0, Z+
     4e0:	0d 92       	st	X+, r0
     4e2:	a2 31       	cpi	r26, 0x12	; 18
     4e4:	b1 07       	cpc	r27, r17
     4e6:	d9 f7       	brne	.-10     	; 0x4de <__do_copy_data+0xc>
     4e8:	0e 94 33 07 	call	0xe66	; 0xe66 <main>
     4ec:	0c 94 01 16 	jmp	0x2c02	; 0x2c02 <_exit>

000004f0 <__bad_interrupt>:
     4f0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000004f4 <_ZN11FingerPrint17checkAckPackErrorEc>:
				return 1;
			}
		}
		return 0;
	}
	bool checkAckPackError(char cmd)
     4f4:	2f 92       	push	r2
     4f6:	3f 92       	push	r3
     4f8:	4f 92       	push	r4
     4fa:	5f 92       	push	r5
     4fc:	6f 92       	push	r6
     4fe:	7f 92       	push	r7
     500:	8f 92       	push	r8
     502:	9f 92       	push	r9
     504:	af 92       	push	r10
     506:	bf 92       	push	r11
     508:	cf 92       	push	r12
     50a:	df 92       	push	r13
     50c:	ef 92       	push	r14
     50e:	ff 92       	push	r15
     510:	0f 93       	push	r16
     512:	1f 93       	push	r17
     514:	cf 93       	push	r28
     516:	df 93       	push	r29
     518:	00 d0       	rcall	.+0      	; 0x51a <_ZN11FingerPrint17checkAckPackErrorEc+0x26>
     51a:	00 d0       	rcall	.+0      	; 0x51c <_ZN11FingerPrint17checkAckPackErrorEc+0x28>
     51c:	00 d0       	rcall	.+0      	; 0x51e <_ZN11FingerPrint17checkAckPackErrorEc+0x2a>
     51e:	cd b7       	in	r28, 0x3d	; 61
     520:	de b7       	in	r29, 0x3e	; 62
     522:	69 83       	std	Y+1, r22	; 0x01
		 }
		 return cmdType;
	 }
	char getAckPackConfirmCodeIndex(char commandVal)
	{
		char packSize = findPackSize(commandVal,0);
     524:	46 2f       	mov	r20, r22
     526:	50 e0       	ldi	r21, 0x00	; 0
	}
}
	char findPackSize(int cmdType, char packSendOrRecieve)
	 {
		 //packSendOrRecieve ; 1 send; 0 recieve
		 switch (cmdType)
     528:	06 2f       	mov	r16, r22
     52a:	10 e0       	ldi	r17, 0x00	; 0
     52c:	f8 01       	movw	r30, r16
     52e:	31 97       	sbiw	r30, 0x01	; 1
     530:	ed 31       	cpi	r30, 0x1D	; 29
     532:	f1 05       	cpc	r31, r1
     534:	38 f4       	brcc	.+14     	; 0x544 <_ZN11FingerPrint17checkAckPackErrorEc+0x50>
     536:	ec 5c       	subi	r30, 0xCC	; 204
     538:	ff 4f       	sbci	r31, 0xFF	; 255
     53a:	0c 94 fb 15 	jmp	0x2bf6	; 0x2bf6 <__tablejump2__>
			 case LoadChar:{packSendOrRecieve == 1? cmdType = 15 : cmdType = 12; break;}
			 case DelChar:{packSendOrRecieve == 1? cmdType = 16 : cmdType = 12; break;}
			 case Empty:{packSendOrRecieve == 1? cmdType = 12 : cmdType = 12; break;}
			 case WriteNotePad:{packSendOrRecieve == 1? cmdType = 45 : cmdType = 12; break;}
			 /****************value of ack receive package is 11****************/
			 case SetPwd:{if(packSendOrRecieve) cmdType = 16;else cmdType = 11;break;}
     53e:	eb e0       	ldi	r30, 0x0B	; 11
     540:	f0 e0       	ldi	r31, 0x00	; 0
     542:	8c c3       	rjmp	.+1816   	; 0xc5c <__stack+0x35d>
	{
		char packSize = findPackSize(commandVal,0);
		char confIndex = 0;
		
		//get confirmation code index value
		if (commandVal == ReadNotPad)
     544:	29 81       	ldd	r18, Y+1	; 0x01
     546:	29 31       	cpi	r18, 0x19	; 25
     548:	41 f4       	brne	.+16     	; 0x55a <_ZN11FingerPrint17checkAckPackErrorEc+0x66>
     54a:	fa 01       	movw	r30, r20
			 case GetRandomCode:{packSendOrRecieve == 1? cmdType = 12 : cmdType = 16; break;}
			 case Serach:{packSendOrRecieve == 1? cmdType = 17 : cmdType = 16; break;}
			 /****************value of ack receive package is 44****************/
			 case ReadNotPad:{packSendOrRecieve == 1? cmdType = 13 : cmdType = 44; break;}
		 }
		 return cmdType;
     54c:	79 e1       	ldi	r23, 0x19	; 25
     54e:	03 c0       	rjmp	.+6      	; 0x556 <_ZN11FingerPrint17checkAckPackErrorEc+0x62>
     550:	7c e2       	ldi	r23, 0x2C	; 44
			 case TemplateNum:{packSendOrRecieve == 1? cmdType = 12 : cmdType = 14; break;}
			 /****************value of ack receive package is 16****************/
			 case GetRandomCode:{packSendOrRecieve == 1? cmdType = 12 : cmdType = 16; break;}
			 case Serach:{packSendOrRecieve == 1? cmdType = 17 : cmdType = 16; break;}
			 /****************value of ack receive package is 44****************/
			 case ReadNotPad:{packSendOrRecieve == 1? cmdType = 13 : cmdType = 44; break;}
     552:	ec e2       	ldi	r30, 0x2C	; 44
     554:	f0 e0       	ldi	r31, 0x00	; 0
		char confIndex = 0;
		
		//get confirmation code index value
		if (commandVal == ReadNotPad)
		{
			confIndex = packSize - 34;
     556:	72 52       	subi	r23, 0x22	; 34
     558:	29 c0       	rjmp	.+82     	; 0x5ac <_ZN11FingerPrint17checkAckPackErrorEc+0xb8>
		}
		else if (commandVal == GetRandomCode || commandVal == Serach)
     55a:	29 81       	ldd	r18, Y+1	; 0x01
     55c:	2f 7e       	andi	r18, 0xEF	; 239
     55e:	24 30       	cpi	r18, 0x04	; 4
     560:	41 f4       	brne	.+16     	; 0x572 <_ZN11FingerPrint17checkAckPackErrorEc+0x7e>
			 case GetRandomCode:{packSendOrRecieve == 1? cmdType = 12 : cmdType = 16; break;}
			 case Serach:{packSendOrRecieve == 1? cmdType = 17 : cmdType = 16; break;}
			 /****************value of ack receive package is 44****************/
			 case ReadNotPad:{packSendOrRecieve == 1? cmdType = 13 : cmdType = 44; break;}
		 }
		 return cmdType;
     562:	79 81       	ldd	r23, Y+1	; 0x01
		//get confirmation code index value
		if (commandVal == ReadNotPad)
		{
			confIndex = packSize - 34;
		}
		else if (commandVal == GetRandomCode || commandVal == Serach)
     564:	fa 01       	movw	r30, r20
     566:	03 c0       	rjmp	.+6      	; 0x56e <_ZN11FingerPrint17checkAckPackErrorEc+0x7a>
			 case GetRandomCode:{packSendOrRecieve == 1? cmdType = 12 : cmdType = 16; break;}
			 case Serach:{packSendOrRecieve == 1? cmdType = 17 : cmdType = 16; break;}
			 /****************value of ack receive package is 44****************/
			 case ReadNotPad:{packSendOrRecieve == 1? cmdType = 13 : cmdType = 44; break;}
		 }
		 return cmdType;
     568:	70 e1       	ldi	r23, 0x10	; 16
			 /****************value of ack receive package is 14****************/
			 case Match:{packSendOrRecieve == 1? cmdType = 12 : cmdType = 14; break;}
			 case TemplateNum:{packSendOrRecieve == 1? cmdType = 12 : cmdType = 14; break;}
			 /****************value of ack receive package is 16****************/
			 case GetRandomCode:{packSendOrRecieve == 1? cmdType = 12 : cmdType = 16; break;}
			 case Serach:{packSendOrRecieve == 1? cmdType = 17 : cmdType = 16; break;}
     56a:	e0 e1       	ldi	r30, 0x10	; 16
     56c:	f0 e0       	ldi	r31, 0x00	; 0
		{
			confIndex = packSize - 34;
		}
		else if (commandVal == GetRandomCode || commandVal == Serach)
		{
			confIndex = packSize - 6;
     56e:	76 50       	subi	r23, 0x06	; 6
     570:	1d c0       	rjmp	.+58     	; 0x5ac <_ZN11FingerPrint17checkAckPackErrorEc+0xb8>
		} 
		else if (commandVal == Match || commandVal == TemplateNum)
     572:	69 81       	ldd	r22, Y+1	; 0x01
     574:	63 30       	cpi	r22, 0x03	; 3
     576:	49 f0       	breq	.+18     	; 0x58a <_ZN11FingerPrint17checkAckPackErrorEc+0x96>
     578:	6d 31       	cpi	r22, 0x1D	; 29
     57a:	59 f4       	brne	.+22     	; 0x592 <_ZN11FingerPrint17checkAckPackErrorEc+0x9e>
     57c:	fa 01       	movw	r30, r20
			 case GetRandomCode:{packSendOrRecieve == 1? cmdType = 12 : cmdType = 16; break;}
			 case Serach:{packSendOrRecieve == 1? cmdType = 17 : cmdType = 16; break;}
			 /****************value of ack receive package is 44****************/
			 case ReadNotPad:{packSendOrRecieve == 1? cmdType = 13 : cmdType = 44; break;}
		 }
		 return cmdType;
     57e:	7d e1       	ldi	r23, 0x1D	; 29
     580:	06 c0       	rjmp	.+12     	; 0x58e <_ZN11FingerPrint17checkAckPackErrorEc+0x9a>
     582:	7e e0       	ldi	r23, 0x0E	; 14
			 /****************value of ack receive package is 11****************/
			 case SetPwd:{if(packSendOrRecieve) cmdType = 16;else cmdType = 11;break;}
			 /****************value of ack receive package is 26****************/
			 case ReadSysPara: {packSendOrRecieve == 1? cmdType = 12 : cmdType = 26; break;}
			 /****************value of ack receive package is 14****************/
			 case Match:{packSendOrRecieve == 1? cmdType = 12 : cmdType = 14; break;}
     584:	ee e0       	ldi	r30, 0x0E	; 14
     586:	f0 e0       	ldi	r31, 0x00	; 0
     588:	02 c0       	rjmp	.+4      	; 0x58e <_ZN11FingerPrint17checkAckPackErrorEc+0x9a>
		}
		else if (commandVal == GetRandomCode || commandVal == Serach)
		{
			confIndex = packSize - 6;
		} 
		else if (commandVal == Match || commandVal == TemplateNum)
     58a:	fa 01       	movw	r30, r20
			 case GetRandomCode:{packSendOrRecieve == 1? cmdType = 12 : cmdType = 16; break;}
			 case Serach:{packSendOrRecieve == 1? cmdType = 17 : cmdType = 16; break;}
			 /****************value of ack receive package is 44****************/
			 case ReadNotPad:{packSendOrRecieve == 1? cmdType = 13 : cmdType = 44; break;}
		 }
		 return cmdType;
     58c:	73 e0       	ldi	r23, 0x03	; 3
		{
			confIndex = packSize - 6;
		} 
		else if (commandVal == Match || commandVal == TemplateNum)
		{
			confIndex = packSize - 4;
     58e:	74 50       	subi	r23, 0x04	; 4
     590:	0d c0       	rjmp	.+26     	; 0x5ac <_ZN11FingerPrint17checkAckPackErrorEc+0xb8>
		}
		else if(commandVal == ReadSysPara)
     592:	79 81       	ldd	r23, Y+1	; 0x01
     594:	7f 30       	cpi	r23, 0x0F	; 15
     596:	39 f4       	brne	.+14     	; 0x5a6 <_ZN11FingerPrint17checkAckPackErrorEc+0xb2>
     598:	fa 01       	movw	r30, r20
     59a:	03 c0       	rjmp	.+6      	; 0x5a2 <_ZN11FingerPrint17checkAckPackErrorEc+0xae>
			 case GetRandomCode:{packSendOrRecieve == 1? cmdType = 12 : cmdType = 16; break;}
			 case Serach:{packSendOrRecieve == 1? cmdType = 17 : cmdType = 16; break;}
			 /****************value of ack receive package is 44****************/
			 case ReadNotPad:{packSendOrRecieve == 1? cmdType = 13 : cmdType = 44; break;}
		 }
		 return cmdType;
     59c:	7a e1       	ldi	r23, 0x1A	; 26
			 case Empty:{packSendOrRecieve == 1? cmdType = 12 : cmdType = 12; break;}
			 case WriteNotePad:{packSendOrRecieve == 1? cmdType = 45 : cmdType = 12; break;}
			 /****************value of ack receive package is 11****************/
			 case SetPwd:{if(packSendOrRecieve) cmdType = 16;else cmdType = 11;break;}
			 /****************value of ack receive package is 26****************/
			 case ReadSysPara: {packSendOrRecieve == 1? cmdType = 12 : cmdType = 26; break;}
     59e:	ea e1       	ldi	r30, 0x1A	; 26
     5a0:	f0 e0       	ldi	r31, 0x00	; 0
		{
			confIndex = packSize - 4;
		}
		else if(commandVal == ReadSysPara)
		{
			confIndex = packSize - 18;
     5a2:	72 51       	subi	r23, 0x12	; 18
     5a4:	03 c0       	rjmp	.+6      	; 0x5ac <_ZN11FingerPrint17checkAckPackErrorEc+0xb8>
			 case GetRandomCode:{packSendOrRecieve == 1? cmdType = 12 : cmdType = 16; break;}
			 case Serach:{packSendOrRecieve == 1? cmdType = 17 : cmdType = 16; break;}
			 /****************value of ack receive package is 44****************/
			 case ReadNotPad:{packSendOrRecieve == 1? cmdType = 13 : cmdType = 44; break;}
		 }
		 return cmdType;
     5a6:	79 81       	ldd	r23, Y+1	; 0x01
		} 
		else if (commandVal == Match || commandVal == TemplateNum)
		{
			confIndex = packSize - 4;
		}
		else if(commandVal == ReadSysPara)
     5a8:	fa 01       	movw	r30, r20
		{
			confIndex = packSize - 18;
		}
		else
		{
			confIndex = packSize - 2;
     5aa:	72 50       	subi	r23, 0x02	; 2
     5ac:	ff 27       	eor	r31, r31
		}
		for (int i = 0; i < packSize;i++)
     5ae:	1e 16       	cp	r1, r30
     5b0:	1f 06       	cpc	r1, r31
     5b2:	0c f0       	brlt	.+2      	; 0x5b6 <_ZN11FingerPrint17checkAckPackErrorEc+0xc2>
     5b4:	55 c3       	rjmp	.+1706   	; 0xc60 <__stack+0x361>
		{
			while(_ackPacket[i] != 0xEF && i < packSize)
     5b6:	dc 01       	movw	r26, r24
     5b8:	9e 96       	adiw	r26, 0x2e	; 46
     5ba:	2c 91       	ld	r18, X
     5bc:	9e 97       	sbiw	r26, 0x2e	; 46
     5be:	2f 3e       	cpi	r18, 0xEF	; 239
     5c0:	69 f0       	breq	.+26     	; 0x5dc <_ZN11FingerPrint17checkAckPackErrorEc+0xe8>
     5c2:	9f 96       	adiw	r26, 0x2f	; 47
     5c4:	20 e0       	ldi	r18, 0x00	; 0
     5c6:	30 e0       	ldi	r19, 0x00	; 0
     5c8:	03 c0       	rjmp	.+6      	; 0x5d0 <_ZN11FingerPrint17checkAckPackErrorEc+0xdc>
     5ca:	2e 17       	cp	r18, r30
     5cc:	3f 07       	cpc	r19, r31
     5ce:	49 f0       	breq	.+18     	; 0x5e2 <_ZN11FingerPrint17checkAckPackErrorEc+0xee>
			{
				i++;
     5d0:	2f 5f       	subi	r18, 0xFF	; 255
     5d2:	3f 4f       	sbci	r19, 0xFF	; 255
		{
			confIndex = packSize - 2;
		}
		for (int i = 0; i < packSize;i++)
		{
			while(_ackPacket[i] != 0xEF && i < packSize)
     5d4:	6d 91       	ld	r22, X+
     5d6:	6f 3e       	cpi	r22, 0xEF	; 239
     5d8:	c1 f7       	brne	.-16     	; 0x5ca <_ZN11FingerPrint17checkAckPackErrorEc+0xd6>
     5da:	04 c0       	rjmp	.+8      	; 0x5e4 <_ZN11FingerPrint17checkAckPackErrorEc+0xf0>
     5dc:	20 e0       	ldi	r18, 0x00	; 0
     5de:	30 e0       	ldi	r19, 0x00	; 0
     5e0:	01 c0       	rjmp	.+2      	; 0x5e4 <_ZN11FingerPrint17checkAckPackErrorEc+0xf0>
			{
				i++;
     5e2:	9f 01       	movw	r18, r30
			}
			
			//return confirmation code index
			return i+confIndex;
     5e4:	27 0f       	add	r18, r23
     5e6:	3d c3       	rjmp	.+1658   	; 0xc62 <__stack+0x363>
	}
	bool checkAckPackError(char cmd)
	{
		int confCodeIndex = (int)getAckPackConfirmCodeIndex(cmd);
		char confCode = _ackPacket[confCodeIndex - 1];
		switch(confCode)
     5e8:	65 e0       	ldi	r22, 0x05	; 5
     5ea:	70 e0       	ldi	r23, 0x00	; 0
	}
}
	char findPackSize(int cmdType, char packSendOrRecieve)
	 {
		 //packSendOrRecieve ; 1 send; 0 recieve
		 switch (cmdType)
     5ec:	a9 81       	ldd	r26, Y+1	; 0x01
     5ee:	8a 2e       	mov	r8, r26
     5f0:	91 2c       	mov	r9, r1
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
     5f2:	a0 ec       	ldi	r26, 0xC0	; 192
     5f4:	b0 e0       	ldi	r27, 0x00	; 0
		}
	return 0;
	}
	void sendPackage(int size)
{
	for (int i = 0; i < size; i++)
     5f6:	49 83       	std	Y+1, r20	; 0x01
     5f8:	5a 83       	std	Y+2, r21	; 0x02
	 {
		 //packSendOrRecieve ; 1 send; 0 recieve
		 switch (cmdType)
		 {
			 /****************value of ack receive package is 12****************/
			 case VfyPwd:{packSendOrRecieve == 1? cmdType = 16 : cmdType = 12; break;}
     5fa:	21 2c       	mov	r2, r1
			 case ReadSysPara: {packSendOrRecieve == 1? cmdType = 12 : cmdType = 26; break;}
			 /****************value of ack receive package is 14****************/
			 case Match:{packSendOrRecieve == 1? cmdType = 12 : cmdType = 14; break;}
			 case TemplateNum:{packSendOrRecieve == 1? cmdType = 12 : cmdType = 14; break;}
			 /****************value of ack receive package is 16****************/
			 case GetRandomCode:{packSendOrRecieve == 1? cmdType = 12 : cmdType = 16; break;}
     5fc:	0f 2e       	mov	r0, r31
     5fe:	fc e0       	ldi	r31, 0x0C	; 12
     600:	7f 2e       	mov	r7, r31
     602:	f0 2d       	mov	r31, r0
     604:	61 2c       	mov	r6, r1
		 switch (cmdType)
		 {
			 /****************value of ack receive package is 12****************/
			 case VfyPwd:{packSendOrRecieve == 1? cmdType = 16 : cmdType = 12; break;}
			 case SetAdder:{packSendOrRecieve == 1? cmdType = 16 : cmdType = 12; break;}
			 case SetSysPara:{packSendOrRecieve == 1? cmdType = 14 : cmdType = 12; break;}
     606:	31 2c       	mov	r3, r1
	bool reSendPack(int confIndex, int cmd ,int reTryTimes = 1)
	{
		for (int i = 0; i < reTryTimes; i++)
		{
			sendAndGetAck(cmd);
			if (_ackPacket[confIndex] == 0)
     608:	28 0f       	add	r18, r24
     60a:	39 1f       	adc	r19, r25
     60c:	f9 01       	movw	r30, r18
     60e:	be 96       	adiw	r30, 0x2e	; 46
     610:	fc 83       	std	Y+4, r31	; 0x04
     612:	eb 83       	std	Y+3, r30	; 0x03
	}
}
	char findPackSize(int cmdType, char packSendOrRecieve)
	 {
		 //packSendOrRecieve ; 1 send; 0 recieve
		 switch (cmdType)
     614:	f4 01       	movw	r30, r8
     616:	31 97       	sbiw	r30, 0x01	; 1
     618:	ed 31       	cpi	r30, 0x1D	; 29
     61a:	f1 05       	cpc	r31, r1
     61c:	70 f5       	brcc	.+92     	; 0x67a <_ZN11FingerPrint17checkAckPackErrorEc+0x186>
     61e:	ef 5a       	subi	r30, 0xAF	; 175
     620:	ff 4f       	sbci	r31, 0xFF	; 255
     622:	0c 94 fb 15 	jmp	0x2bf6	; 0x2bf6 <__tablejump2__>
		 {
			 /****************value of ack receive package is 12****************/
			 case VfyPwd:{packSendOrRecieve == 1? cmdType = 16 : cmdType = 12; break;}
			 case SetAdder:{packSendOrRecieve == 1? cmdType = 16 : cmdType = 12; break;}
			 case SetSysPara:{packSendOrRecieve == 1? cmdType = 14 : cmdType = 12; break;}
     626:	2e e0       	ldi	r18, 0x0E	; 14
     628:	33 2d       	mov	r19, r3
     62a:	31 c3       	rjmp	.+1634   	; 0xc8e <__stack+0x38f>
			 case Control:{packSendOrRecieve == 1? cmdType = 13 : cmdType = 12; break;}
			 case GenImage:{packSendOrRecieve == 1? cmdType = 12 : cmdType = 12; break;}
     62c:	27 2d       	mov	r18, r7
     62e:	36 2d       	mov	r19, r6
     630:	2e c3       	rjmp	.+1628   	; 0xc8e <__stack+0x38f>
			 case UpImg:{packSendOrRecieve == 1? cmdType = 12 : cmdType = 12; break;}
     632:	27 2d       	mov	r18, r7
     634:	36 2d       	mov	r19, r6
     636:	2b c3       	rjmp	.+1622   	; 0xc8e <__stack+0x38f>
			 case DownImg:{packSendOrRecieve == 1? cmdType = 12 : cmdType = 12; break;}
     638:	27 2d       	mov	r18, r7
     63a:	36 2d       	mov	r19, r6
     63c:	28 c3       	rjmp	.+1616   	; 0xc8e <__stack+0x38f>
			 case Img2Tz:{packSendOrRecieve == 1? cmdType = 13 : cmdType = 12; break;}
			 case RegModel:{packSendOrRecieve == 1? cmdType = 12 : cmdType = 12; break;}
     63e:	27 2d       	mov	r18, r7
     640:	36 2d       	mov	r19, r6
     642:	25 c3       	rjmp	.+1610   	; 0xc8e <__stack+0x38f>
			 case UpChar:{packSendOrRecieve == 1? cmdType = 13 : cmdType = 12; break;}
			 case Store:{packSendOrRecieve == 1? cmdType = 15 : cmdType = 12; break;}
     644:	2f e0       	ldi	r18, 0x0F	; 15
     646:	30 e0       	ldi	r19, 0x00	; 0
     648:	22 c3       	rjmp	.+1604   	; 0xc8e <__stack+0x38f>
			 case LoadChar:{packSendOrRecieve == 1? cmdType = 15 : cmdType = 12; break;}
     64a:	2f e0       	ldi	r18, 0x0F	; 15
     64c:	30 e0       	ldi	r19, 0x00	; 0
     64e:	1f c3       	rjmp	.+1598   	; 0xc8e <__stack+0x38f>
			 case DelChar:{packSendOrRecieve == 1? cmdType = 16 : cmdType = 12; break;}
			 case Empty:{packSendOrRecieve == 1? cmdType = 12 : cmdType = 12; break;}
     650:	27 2d       	mov	r18, r7
     652:	36 2d       	mov	r19, r6
     654:	1c c3       	rjmp	.+1592   	; 0xc8e <__stack+0x38f>
			 case WriteNotePad:{packSendOrRecieve == 1? cmdType = 45 : cmdType = 12; break;}
     656:	2d e2       	ldi	r18, 0x2D	; 45
     658:	30 e0       	ldi	r19, 0x00	; 0
     65a:	19 c3       	rjmp	.+1586   	; 0xc8e <__stack+0x38f>
			 /****************value of ack receive package is 11****************/
			 case SetPwd:{if(packSendOrRecieve) cmdType = 16;else cmdType = 11;break;}
			 /****************value of ack receive package is 26****************/
			 case ReadSysPara: {packSendOrRecieve == 1? cmdType = 12 : cmdType = 26; break;}
     65c:	27 2d       	mov	r18, r7
     65e:	36 2d       	mov	r19, r6
     660:	16 c3       	rjmp	.+1580   	; 0xc8e <__stack+0x38f>
			 /****************value of ack receive package is 14****************/
			 case Match:{packSendOrRecieve == 1? cmdType = 12 : cmdType = 14; break;}
     662:	27 2d       	mov	r18, r7
     664:	36 2d       	mov	r19, r6
     666:	13 c3       	rjmp	.+1574   	; 0xc8e <__stack+0x38f>
			 case TemplateNum:{packSendOrRecieve == 1? cmdType = 12 : cmdType = 14; break;}
     668:	27 2d       	mov	r18, r7
     66a:	36 2d       	mov	r19, r6
     66c:	10 c3       	rjmp	.+1568   	; 0xc8e <__stack+0x38f>
			 /****************value of ack receive package is 16****************/
			 case GetRandomCode:{packSendOrRecieve == 1? cmdType = 12 : cmdType = 16; break;}
     66e:	27 2d       	mov	r18, r7
     670:	36 2d       	mov	r19, r6
     672:	0d c3       	rjmp	.+1562   	; 0xc8e <__stack+0x38f>
			 case Serach:{packSendOrRecieve == 1? cmdType = 17 : cmdType = 16; break;}
     674:	21 e1       	ldi	r18, 0x11	; 17
     676:	30 e0       	ldi	r19, 0x00	; 0
     678:	0a c3       	rjmp	.+1556   	; 0xc8e <__stack+0x38f>
		}
	return 0;
	}
	void sendPackage(int size)
{
	for (int i = 0; i < size; i++)
     67a:	14 16       	cp	r1, r20
     67c:	15 06       	cpc	r1, r21
     67e:	d4 f4       	brge	.+52     	; 0x6b4 <_ZN11FingerPrint17checkAckPackErrorEc+0x1c0>
     680:	09 81       	ldd	r16, Y+1	; 0x01
     682:	1a 81       	ldd	r17, Y+2	; 0x02
     684:	7c 01       	movw	r14, r24
     686:	ff ef       	ldi	r31, 0xFF	; 255
     688:	ef 1a       	sub	r14, r31
     68a:	ff 0a       	sbc	r15, r31
     68c:	e0 e0       	ldi	r30, 0x00	; 0
     68e:	f0 e0       	ldi	r31, 0x00	; 0
     690:	6f 01       	movw	r12, r30
	{
		FingerPrintUart.UARTsend(_dataPackage[i]);
     692:	f7 01       	movw	r30, r14
     694:	31 91       	ld	r19, Z+
     696:	7f 01       	movw	r14, r30
     698:	f6 01       	movw	r30, r12
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
     69a:	2c 91       	ld	r18, X
     69c:	25 ff       	sbrs	r18, 5
     69e:	fd cf       	rjmp	.-6      	; 0x69a <_ZN11FingerPrint17checkAckPackErrorEc+0x1a6>
     6a0:	6f 01       	movw	r12, r30
		UDR0 = data;
     6a2:	e6 ec       	ldi	r30, 0xC6	; 198
     6a4:	f0 e0       	ldi	r31, 0x00	; 0
     6a6:	30 83       	st	Z, r19
		}
	return 0;
	}
	void sendPackage(int size)
{
	for (int i = 0; i < size; i++)
     6a8:	ff ef       	ldi	r31, 0xFF	; 255
     6aa:	cf 1a       	sub	r12, r31
     6ac:	df 0a       	sbc	r13, r31
     6ae:	c0 16       	cp	r12, r16
     6b0:	d1 06       	cpc	r13, r17
     6b2:	7c f3       	brlt	.-34     	; 0x692 <_ZN11FingerPrint17checkAckPackErrorEc+0x19e>
	}
}
	char findPackSize(int cmdType, char packSendOrRecieve)
	 {
		 //packSendOrRecieve ; 1 send; 0 recieve
		 switch (cmdType)
     6b4:	f4 01       	movw	r30, r8
     6b6:	31 97       	sbiw	r30, 0x01	; 1
     6b8:	ed 31       	cpi	r30, 0x1D	; 29
     6ba:	f1 05       	cpc	r31, r1
     6bc:	e0 f4       	brcc	.+56     	; 0x6f6 <_ZN11FingerPrint17checkAckPackErrorEc+0x202>
     6be:	e2 59       	subi	r30, 0x92	; 146
     6c0:	ff 4f       	sbci	r31, 0xFF	; 255
     6c2:	0c 94 fb 15 	jmp	0x2bf6	; 0x2bf6 <__tablejump2__>
		 {
			 /****************value of ack receive package is 12****************/
			 case VfyPwd:{packSendOrRecieve == 1? cmdType = 16 : cmdType = 12; break;}
     6c6:	07 2d       	mov	r16, r7
     6c8:	16 2d       	mov	r17, r6
     6ca:	17 c0       	rjmp	.+46     	; 0x6fa <_ZN11FingerPrint17checkAckPackErrorEc+0x206>
			 case LoadChar:{packSendOrRecieve == 1? cmdType = 15 : cmdType = 12; break;}
			 case DelChar:{packSendOrRecieve == 1? cmdType = 16 : cmdType = 12; break;}
			 case Empty:{packSendOrRecieve == 1? cmdType = 12 : cmdType = 12; break;}
			 case WriteNotePad:{packSendOrRecieve == 1? cmdType = 45 : cmdType = 12; break;}
			 /****************value of ack receive package is 11****************/
			 case SetPwd:{if(packSendOrRecieve) cmdType = 16;else cmdType = 11;break;}
     6cc:	0b e0       	ldi	r16, 0x0B	; 11
     6ce:	10 e0       	ldi	r17, 0x00	; 0
     6d0:	14 c0       	rjmp	.+40     	; 0x6fa <_ZN11FingerPrint17checkAckPackErrorEc+0x206>
			 /****************value of ack receive package is 26****************/
			 case ReadSysPara: {packSendOrRecieve == 1? cmdType = 12 : cmdType = 26; break;}
     6d2:	0a e1       	ldi	r16, 0x1A	; 26
     6d4:	10 e0       	ldi	r17, 0x00	; 0
     6d6:	11 c0       	rjmp	.+34     	; 0x6fa <_ZN11FingerPrint17checkAckPackErrorEc+0x206>
			 /****************value of ack receive package is 14****************/
			 case Match:{packSendOrRecieve == 1? cmdType = 12 : cmdType = 14; break;}
     6d8:	0e e0       	ldi	r16, 0x0E	; 14
     6da:	13 2d       	mov	r17, r3
     6dc:	0e c0       	rjmp	.+28     	; 0x6fa <_ZN11FingerPrint17checkAckPackErrorEc+0x206>
			 case TemplateNum:{packSendOrRecieve == 1? cmdType = 12 : cmdType = 14; break;}
     6de:	0e e0       	ldi	r16, 0x0E	; 14
     6e0:	13 2d       	mov	r17, r3
     6e2:	0b c0       	rjmp	.+22     	; 0x6fa <_ZN11FingerPrint17checkAckPackErrorEc+0x206>
			 /****************value of ack receive package is 16****************/
			 case GetRandomCode:{packSendOrRecieve == 1? cmdType = 12 : cmdType = 16; break;}
     6e4:	00 e1       	ldi	r16, 0x10	; 16
     6e6:	12 2d       	mov	r17, r2
     6e8:	08 c0       	rjmp	.+16     	; 0x6fa <_ZN11FingerPrint17checkAckPackErrorEc+0x206>
			 case Serach:{packSendOrRecieve == 1? cmdType = 17 : cmdType = 16; break;}
     6ea:	00 e1       	ldi	r16, 0x10	; 16
     6ec:	12 2d       	mov	r17, r2
     6ee:	05 c0       	rjmp	.+10     	; 0x6fa <_ZN11FingerPrint17checkAckPackErrorEc+0x206>
			 /****************value of ack receive package is 44****************/
			 case ReadNotPad:{packSendOrRecieve == 1? cmdType = 13 : cmdType = 44; break;}
     6f0:	0c e2       	ldi	r16, 0x2C	; 44
     6f2:	10 e0       	ldi	r17, 0x00	; 0
     6f4:	02 c0       	rjmp	.+4      	; 0x6fa <_ZN11FingerPrint17checkAckPackErrorEc+0x206>
	}
}
	char findPackSize(int cmdType, char packSendOrRecieve)
	 {
		 //packSendOrRecieve ; 1 send; 0 recieve
		 switch (cmdType)
     6f6:	09 81       	ldd	r16, Y+1	; 0x01
     6f8:	1a 81       	ldd	r17, Y+2	; 0x02
     6fa:	fc 01       	movw	r30, r24
     6fc:	be 96       	adiw	r30, 0x2e	; 46
     6fe:	6f 01       	movw	r12, r30
	{
		_dataPackage[9] = commandValue;
	}
	void getAckPackage(char ackPackSize = 12)
	{
		int ackDataIndex = 0;
     700:	e1 2c       	mov	r14, r1
     702:	f1 2c       	mov	r15, r1
     704:	11 27       	eor	r17, r17
     706:	40 2e       	mov	r4, r16
     708:	51 2e       	mov	r5, r17
     70a:	fe 83       	std	Y+6, r31	; 0x06
     70c:	ed 83       	std	Y+5, r30	; 0x05
     70e:	ed 81       	ldd	r30, Y+5	; 0x05
     710:	fe 81       	ldd	r31, Y+6	; 0x06
     712:	24 2d       	mov	r18, r4
     714:	35 2d       	mov	r19, r5
		char ackData = 0;
		while(ackDataIndex < ackPackSize)
     716:	e0 16       	cp	r14, r16
     718:	f1 06       	cpc	r15, r17
     71a:	24 f0       	brlt	.+8      	; 0x724 <_ZN11FingerPrint17checkAckPackErrorEc+0x230>
				ackData = FingerPrintUart.getData();
				_ackPacket[ackDataIndex] = ackData;
				ackDataIndex++;
			}
		}
		for (int i = 0; i<ackPackSize;i++)
     71c:	12 16       	cp	r1, r18
     71e:	13 06       	cpc	r1, r19
     720:	84 f0       	brlt	.+32     	; 0x742 <_ZN11FingerPrint17checkAckPackErrorEc+0x24e>
     722:	21 c0       	rjmp	.+66     	; 0x766 <_ZN11FingerPrint17checkAckPackErrorEc+0x272>
		//UCSR0C = ((1<<UCSZ00)|(1<<UCSZ01));
		UCSR0C = (3<<UCSZ00);
	}
	char checkForData()
	{
		if (UCSR0A & (1<<RXC0))
     724:	2c 91       	ld	r18, X
			ackDataIndex++;
			*/
			/********************************need to test************************/
			//check if there is data, if so, receive the data
			//-This avoid the program from endless loop in wait for data
			if (FingerPrintUart.checkForData())
     726:	22 23       	and	r18, r18
     728:	a4 f7       	brge	.-24     	; 0x712 <_ZN11FingerPrint17checkAckPackErrorEc+0x21e>
     72a:	fe 83       	std	Y+6, r31	; 0x06
     72c:	ed 83       	std	Y+5, r30	; 0x05
		}
		return 0;
	}
	char getData()
	{
		return UDR0;
     72e:	e6 ec       	ldi	r30, 0xC6	; 198
     730:	f0 e0       	ldi	r31, 0x00	; 0
     732:	20 81       	ld	r18, Z
			//check if there is data, if so, receive the data
			//-This avoid the program from endless loop in wait for data
			if (FingerPrintUart.checkForData())
			{
				ackData = FingerPrintUart.getData();
				_ackPacket[ackDataIndex] = ackData;
     734:	f6 01       	movw	r30, r12
     736:	21 93       	st	Z+, r18
     738:	6f 01       	movw	r12, r30
				ackDataIndex++;
     73a:	ff ef       	ldi	r31, 0xFF	; 255
     73c:	ef 1a       	sub	r14, r31
     73e:	ff 0a       	sbc	r15, r31
     740:	e6 cf       	rjmp	.-52     	; 0x70e <_ZN11FingerPrint17checkAckPackErrorEc+0x21a>
     742:	22 5d       	subi	r18, 0xD2	; 210
     744:	3f 4f       	sbci	r19, 0xFF	; 255
     746:	8c 01       	movw	r16, r24
     748:	02 0f       	add	r16, r18
     74a:	13 1f       	adc	r17, r19
     74c:	7f 01       	movw	r14, r30
			}
		}
		for (int i = 0; i<ackPackSize;i++)
		{
			FingerPrintUart.UARTsend(_ackPacket[i]);
     74e:	f7 01       	movw	r30, r14
     750:	31 91       	ld	r19, Z+
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
     752:	2c 91       	ld	r18, X
     754:	25 ff       	sbrs	r18, 5
     756:	fd cf       	rjmp	.-6      	; 0x752 <_ZN11FingerPrint17checkAckPackErrorEc+0x25e>
     758:	7f 01       	movw	r14, r30
		UDR0 = data;
     75a:	e6 ec       	ldi	r30, 0xC6	; 198
     75c:	f0 e0       	ldi	r31, 0x00	; 0
     75e:	30 83       	st	Z, r19
				ackData = FingerPrintUart.getData();
				_ackPacket[ackDataIndex] = ackData;
				ackDataIndex++;
			}
		}
		for (int i = 0; i<ackPackSize;i++)
     760:	e0 16       	cp	r14, r16
     762:	f1 06       	cpc	r15, r17
     764:	a1 f7       	brne	.-24     	; 0x74e <_ZN11FingerPrint17checkAckPackErrorEc+0x25a>
	bool reSendPack(int confIndex, int cmd ,int reTryTimes = 1)
	{
		for (int i = 0; i < reTryTimes; i++)
		{
			sendAndGetAck(cmd);
			if (_ackPacket[confIndex] == 0)
     766:	eb 81       	ldd	r30, Y+3	; 0x03
     768:	fc 81       	ldd	r31, Y+4	; 0x04
     76a:	20 81       	ld	r18, Z
     76c:	22 23       	and	r18, r18
     76e:	09 f4       	brne	.+2      	; 0x772 <_ZN11FingerPrint17checkAckPackErrorEc+0x27e>
     770:	63 c2       	rjmp	.+1222   	; 0xc38 <__stack+0x339>
     772:	61 50       	subi	r22, 0x01	; 1
     774:	71 09       	sbc	r23, r1
		}
		return confIndex;
	}
	bool reSendPack(int confIndex, int cmd ,int reTryTimes = 1)
	{
		for (int i = 0; i < reTryTimes; i++)
     776:	09 f0       	breq	.+2      	; 0x77a <_ZN11FingerPrint17checkAckPackErrorEc+0x286>
     778:	4d cf       	rjmp	.-358    	; 0x614 <_ZN11FingerPrint17checkAckPackErrorEc+0x120>
     77a:	60 c2       	rjmp	.+1216   	; 0xc3c <__stack+0x33d>
	}
	bool checkAckPackError(char cmd)
	{
		int confCodeIndex = (int)getAckPackConfirmCodeIndex(cmd);
		char confCode = _ackPacket[confCodeIndex - 1];
		switch(confCode)
     77c:	03 e0       	ldi	r16, 0x03	; 3
     77e:	10 e0       	ldi	r17, 0x00	; 0
	}
}
	char findPackSize(int cmdType, char packSendOrRecieve)
	 {
		 //packSendOrRecieve ; 1 send; 0 recieve
		 switch (cmdType)
     780:	69 81       	ldd	r22, Y+1	; 0x01
     782:	86 2e       	mov	r8, r22
     784:	91 2c       	mov	r9, r1
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
     786:	a0 ec       	ldi	r26, 0xC0	; 192
     788:	b0 e0       	ldi	r27, 0x00	; 0
		}
	return 0;
	}
	void sendPackage(int size)
{
	for (int i = 0; i < size; i++)
     78a:	49 83       	std	Y+1, r20	; 0x01
     78c:	5a 83       	std	Y+2, r21	; 0x02
	 {
		 //packSendOrRecieve ; 1 send; 0 recieve
		 switch (cmdType)
		 {
			 /****************value of ack receive package is 12****************/
			 case VfyPwd:{packSendOrRecieve == 1? cmdType = 16 : cmdType = 12; break;}
     78e:	21 2c       	mov	r2, r1
			 case ReadSysPara: {packSendOrRecieve == 1? cmdType = 12 : cmdType = 26; break;}
			 /****************value of ack receive package is 14****************/
			 case Match:{packSendOrRecieve == 1? cmdType = 12 : cmdType = 14; break;}
			 case TemplateNum:{packSendOrRecieve == 1? cmdType = 12 : cmdType = 14; break;}
			 /****************value of ack receive package is 16****************/
			 case GetRandomCode:{packSendOrRecieve == 1? cmdType = 12 : cmdType = 16; break;}
     790:	0f 2e       	mov	r0, r31
     792:	fc e0       	ldi	r31, 0x0C	; 12
     794:	7f 2e       	mov	r7, r31
     796:	f0 2d       	mov	r31, r0
     798:	61 2c       	mov	r6, r1
		 switch (cmdType)
		 {
			 /****************value of ack receive package is 12****************/
			 case VfyPwd:{packSendOrRecieve == 1? cmdType = 16 : cmdType = 12; break;}
			 case SetAdder:{packSendOrRecieve == 1? cmdType = 16 : cmdType = 12; break;}
			 case SetSysPara:{packSendOrRecieve == 1? cmdType = 14 : cmdType = 12; break;}
     79a:	31 2c       	mov	r3, r1
	bool reSendPack(int confIndex, int cmd ,int reTryTimes = 1)
	{
		for (int i = 0; i < reTryTimes; i++)
		{
			sendAndGetAck(cmd);
			if (_ackPacket[confIndex] == 0)
     79c:	28 0f       	add	r18, r24
     79e:	39 1f       	adc	r19, r25
     7a0:	b9 01       	movw	r22, r18
     7a2:	62 5d       	subi	r22, 0xD2	; 210
     7a4:	7f 4f       	sbci	r23, 0xFF	; 255
     7a6:	7c 83       	std	Y+4, r23	; 0x04
     7a8:	6b 83       	std	Y+3, r22	; 0x03
	}
}
	char findPackSize(int cmdType, char packSendOrRecieve)
	 {
		 //packSendOrRecieve ; 1 send; 0 recieve
		 switch (cmdType)
     7aa:	f4 01       	movw	r30, r8
     7ac:	31 97       	sbiw	r30, 0x01	; 1
     7ae:	ed 31       	cpi	r30, 0x1D	; 29
     7b0:	f1 05       	cpc	r31, r1
     7b2:	70 f5       	brcc	.+92     	; 0x810 <_ZN11FingerPrint17checkAckPackErrorEc+0x31c>
     7b4:	e5 57       	subi	r30, 0x75	; 117
     7b6:	ff 4f       	sbci	r31, 0xFF	; 255
     7b8:	0c 94 fb 15 	jmp	0x2bf6	; 0x2bf6 <__tablejump2__>
		 {
			 /****************value of ack receive package is 12****************/
			 case VfyPwd:{packSendOrRecieve == 1? cmdType = 16 : cmdType = 12; break;}
			 case SetAdder:{packSendOrRecieve == 1? cmdType = 16 : cmdType = 12; break;}
			 case SetSysPara:{packSendOrRecieve == 1? cmdType = 14 : cmdType = 12; break;}
     7bc:	2e e0       	ldi	r18, 0x0E	; 14
     7be:	33 2d       	mov	r19, r3
     7c0:	6e c2       	rjmp	.+1244   	; 0xc9e <__stack+0x39f>
			 case Control:{packSendOrRecieve == 1? cmdType = 13 : cmdType = 12; break;}
			 case GenImage:{packSendOrRecieve == 1? cmdType = 12 : cmdType = 12; break;}
     7c2:	27 2d       	mov	r18, r7
     7c4:	36 2d       	mov	r19, r6
     7c6:	6b c2       	rjmp	.+1238   	; 0xc9e <__stack+0x39f>
			 case UpImg:{packSendOrRecieve == 1? cmdType = 12 : cmdType = 12; break;}
     7c8:	27 2d       	mov	r18, r7
     7ca:	36 2d       	mov	r19, r6
     7cc:	68 c2       	rjmp	.+1232   	; 0xc9e <__stack+0x39f>
			 case DownImg:{packSendOrRecieve == 1? cmdType = 12 : cmdType = 12; break;}
     7ce:	27 2d       	mov	r18, r7
     7d0:	36 2d       	mov	r19, r6
     7d2:	65 c2       	rjmp	.+1226   	; 0xc9e <__stack+0x39f>
			 case Img2Tz:{packSendOrRecieve == 1? cmdType = 13 : cmdType = 12; break;}
			 case RegModel:{packSendOrRecieve == 1? cmdType = 12 : cmdType = 12; break;}
     7d4:	27 2d       	mov	r18, r7
     7d6:	36 2d       	mov	r19, r6
     7d8:	62 c2       	rjmp	.+1220   	; 0xc9e <__stack+0x39f>
			 case UpChar:{packSendOrRecieve == 1? cmdType = 13 : cmdType = 12; break;}
			 case Store:{packSendOrRecieve == 1? cmdType = 15 : cmdType = 12; break;}
     7da:	2f e0       	ldi	r18, 0x0F	; 15
     7dc:	30 e0       	ldi	r19, 0x00	; 0
     7de:	5f c2       	rjmp	.+1214   	; 0xc9e <__stack+0x39f>
			 case LoadChar:{packSendOrRecieve == 1? cmdType = 15 : cmdType = 12; break;}
     7e0:	2f e0       	ldi	r18, 0x0F	; 15
     7e2:	30 e0       	ldi	r19, 0x00	; 0
     7e4:	5c c2       	rjmp	.+1208   	; 0xc9e <__stack+0x39f>
			 case DelChar:{packSendOrRecieve == 1? cmdType = 16 : cmdType = 12; break;}
			 case Empty:{packSendOrRecieve == 1? cmdType = 12 : cmdType = 12; break;}
     7e6:	27 2d       	mov	r18, r7
     7e8:	36 2d       	mov	r19, r6
     7ea:	59 c2       	rjmp	.+1202   	; 0xc9e <__stack+0x39f>
			 case WriteNotePad:{packSendOrRecieve == 1? cmdType = 45 : cmdType = 12; break;}
     7ec:	2d e2       	ldi	r18, 0x2D	; 45
     7ee:	30 e0       	ldi	r19, 0x00	; 0
     7f0:	56 c2       	rjmp	.+1196   	; 0xc9e <__stack+0x39f>
			 /****************value of ack receive package is 11****************/
			 case SetPwd:{if(packSendOrRecieve) cmdType = 16;else cmdType = 11;break;}
			 /****************value of ack receive package is 26****************/
			 case ReadSysPara: {packSendOrRecieve == 1? cmdType = 12 : cmdType = 26; break;}
     7f2:	27 2d       	mov	r18, r7
     7f4:	36 2d       	mov	r19, r6
     7f6:	53 c2       	rjmp	.+1190   	; 0xc9e <__stack+0x39f>
			 /****************value of ack receive package is 14****************/
			 case Match:{packSendOrRecieve == 1? cmdType = 12 : cmdType = 14; break;}
     7f8:	27 2d       	mov	r18, r7
     7fa:	36 2d       	mov	r19, r6
     7fc:	50 c2       	rjmp	.+1184   	; 0xc9e <__stack+0x39f>
			 case TemplateNum:{packSendOrRecieve == 1? cmdType = 12 : cmdType = 14; break;}
     7fe:	27 2d       	mov	r18, r7
     800:	36 2d       	mov	r19, r6
     802:	4d c2       	rjmp	.+1178   	; 0xc9e <__stack+0x39f>
			 /****************value of ack receive package is 16****************/
			 case GetRandomCode:{packSendOrRecieve == 1? cmdType = 12 : cmdType = 16; break;}
     804:	27 2d       	mov	r18, r7
     806:	36 2d       	mov	r19, r6
     808:	4a c2       	rjmp	.+1172   	; 0xc9e <__stack+0x39f>
			 case Serach:{packSendOrRecieve == 1? cmdType = 17 : cmdType = 16; break;}
     80a:	21 e1       	ldi	r18, 0x11	; 17
     80c:	30 e0       	ldi	r19, 0x00	; 0
     80e:	47 c2       	rjmp	.+1166   	; 0xc9e <__stack+0x39f>
		}
	return 0;
	}
	void sendPackage(int size)
{
	for (int i = 0; i < size; i++)
     810:	14 16       	cp	r1, r20
     812:	15 06       	cpc	r1, r21
     814:	cc f4       	brge	.+50     	; 0x848 <_ZN11FingerPrint17checkAckPackErrorEc+0x354>
     816:	e9 81       	ldd	r30, Y+1	; 0x01
     818:	fa 81       	ldd	r31, Y+2	; 0x02
     81a:	7c 01       	movw	r14, r24
     81c:	7f ef       	ldi	r23, 0xFF	; 255
     81e:	e7 1a       	sub	r14, r23
     820:	f7 0a       	sbc	r15, r23
     822:	60 e0       	ldi	r22, 0x00	; 0
     824:	70 e0       	ldi	r23, 0x00	; 0
     826:	6f 01       	movw	r12, r30
	{
		FingerPrintUart.UARTsend(_dataPackage[i]);
     828:	f7 01       	movw	r30, r14
     82a:	31 91       	ld	r19, Z+
     82c:	7f 01       	movw	r14, r30
     82e:	f6 01       	movw	r30, r12
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
     830:	2c 91       	ld	r18, X
     832:	25 ff       	sbrs	r18, 5
     834:	fd cf       	rjmp	.-6      	; 0x830 <_ZN11FingerPrint17checkAckPackErrorEc+0x33c>
     836:	6f 01       	movw	r12, r30
		UDR0 = data;
     838:	e6 ec       	ldi	r30, 0xC6	; 198
     83a:	f0 e0       	ldi	r31, 0x00	; 0
     83c:	30 83       	st	Z, r19
		}
	return 0;
	}
	void sendPackage(int size)
{
	for (int i = 0; i < size; i++)
     83e:	6f 5f       	subi	r22, 0xFF	; 255
     840:	7f 4f       	sbci	r23, 0xFF	; 255
     842:	6c 15       	cp	r22, r12
     844:	7d 05       	cpc	r23, r13
     846:	84 f3       	brlt	.-32     	; 0x828 <_ZN11FingerPrint17checkAckPackErrorEc+0x334>
	}
}
	char findPackSize(int cmdType, char packSendOrRecieve)
	 {
		 //packSendOrRecieve ; 1 send; 0 recieve
		 switch (cmdType)
     848:	f4 01       	movw	r30, r8
     84a:	31 97       	sbiw	r30, 0x01	; 1
     84c:	ed 31       	cpi	r30, 0x1D	; 29
     84e:	f1 05       	cpc	r31, r1
     850:	e0 f4       	brcc	.+56     	; 0x88a <_ZN11FingerPrint17checkAckPackErrorEc+0x396>
     852:	e8 55       	subi	r30, 0x58	; 88
     854:	ff 4f       	sbci	r31, 0xFF	; 255
     856:	0c 94 fb 15 	jmp	0x2bf6	; 0x2bf6 <__tablejump2__>
		 {
			 /****************value of ack receive package is 12****************/
			 case VfyPwd:{packSendOrRecieve == 1? cmdType = 16 : cmdType = 12; break;}
     85a:	27 2d       	mov	r18, r7
     85c:	36 2d       	mov	r19, r6
     85e:	17 c0       	rjmp	.+46     	; 0x88e <_ZN11FingerPrint17checkAckPackErrorEc+0x39a>
			 case LoadChar:{packSendOrRecieve == 1? cmdType = 15 : cmdType = 12; break;}
			 case DelChar:{packSendOrRecieve == 1? cmdType = 16 : cmdType = 12; break;}
			 case Empty:{packSendOrRecieve == 1? cmdType = 12 : cmdType = 12; break;}
			 case WriteNotePad:{packSendOrRecieve == 1? cmdType = 45 : cmdType = 12; break;}
			 /****************value of ack receive package is 11****************/
			 case SetPwd:{if(packSendOrRecieve) cmdType = 16;else cmdType = 11;break;}
     860:	2b e0       	ldi	r18, 0x0B	; 11
     862:	30 e0       	ldi	r19, 0x00	; 0
     864:	14 c0       	rjmp	.+40     	; 0x88e <_ZN11FingerPrint17checkAckPackErrorEc+0x39a>
			 /****************value of ack receive package is 26****************/
			 case ReadSysPara: {packSendOrRecieve == 1? cmdType = 12 : cmdType = 26; break;}
     866:	2a e1       	ldi	r18, 0x1A	; 26
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	11 c0       	rjmp	.+34     	; 0x88e <_ZN11FingerPrint17checkAckPackErrorEc+0x39a>
			 /****************value of ack receive package is 14****************/
			 case Match:{packSendOrRecieve == 1? cmdType = 12 : cmdType = 14; break;}
     86c:	2e e0       	ldi	r18, 0x0E	; 14
     86e:	33 2d       	mov	r19, r3
     870:	0e c0       	rjmp	.+28     	; 0x88e <_ZN11FingerPrint17checkAckPackErrorEc+0x39a>
			 case TemplateNum:{packSendOrRecieve == 1? cmdType = 12 : cmdType = 14; break;}
     872:	2e e0       	ldi	r18, 0x0E	; 14
     874:	33 2d       	mov	r19, r3
     876:	0b c0       	rjmp	.+22     	; 0x88e <_ZN11FingerPrint17checkAckPackErrorEc+0x39a>
			 /****************value of ack receive package is 16****************/
			 case GetRandomCode:{packSendOrRecieve == 1? cmdType = 12 : cmdType = 16; break;}
     878:	20 e1       	ldi	r18, 0x10	; 16
     87a:	32 2d       	mov	r19, r2
     87c:	08 c0       	rjmp	.+16     	; 0x88e <_ZN11FingerPrint17checkAckPackErrorEc+0x39a>
			 case Serach:{packSendOrRecieve == 1? cmdType = 17 : cmdType = 16; break;}
     87e:	20 e1       	ldi	r18, 0x10	; 16
     880:	32 2d       	mov	r19, r2
     882:	05 c0       	rjmp	.+10     	; 0x88e <_ZN11FingerPrint17checkAckPackErrorEc+0x39a>
			 /****************value of ack receive package is 44****************/
			 case ReadNotPad:{packSendOrRecieve == 1? cmdType = 13 : cmdType = 44; break;}
     884:	2c e2       	ldi	r18, 0x2C	; 44
     886:	30 e0       	ldi	r19, 0x00	; 0
     888:	02 c0       	rjmp	.+4      	; 0x88e <_ZN11FingerPrint17checkAckPackErrorEc+0x39a>
	}
}
	char findPackSize(int cmdType, char packSendOrRecieve)
	 {
		 //packSendOrRecieve ; 1 send; 0 recieve
		 switch (cmdType)
     88a:	29 81       	ldd	r18, Y+1	; 0x01
     88c:	3a 81       	ldd	r19, Y+2	; 0x02
     88e:	fc 01       	movw	r30, r24
     890:	be 96       	adiw	r30, 0x2e	; 46
     892:	6f 01       	movw	r12, r30
	{
		_dataPackage[9] = commandValue;
	}
	void getAckPackage(char ackPackSize = 12)
	{
		int ackDataIndex = 0;
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	79 01       	movw	r14, r18
     89a:	ff 24       	eor	r15, r15
     89c:	4e 2c       	mov	r4, r14
     89e:	5f 2c       	mov	r5, r15
     8a0:	fe 83       	std	Y+6, r31	; 0x06
     8a2:	ed 83       	std	Y+5, r30	; 0x05
     8a4:	ed 81       	ldd	r30, Y+5	; 0x05
     8a6:	fe 81       	ldd	r31, Y+6	; 0x06
     8a8:	24 2d       	mov	r18, r4
     8aa:	35 2d       	mov	r19, r5
		char ackData = 0;
		while(ackDataIndex < ackPackSize)
     8ac:	6e 15       	cp	r22, r14
     8ae:	7f 05       	cpc	r23, r15
     8b0:	24 f0       	brlt	.+8      	; 0x8ba <_ZN11FingerPrint17checkAckPackErrorEc+0x3c6>
				ackData = FingerPrintUart.getData();
				_ackPacket[ackDataIndex] = ackData;
				ackDataIndex++;
			}
		}
		for (int i = 0; i<ackPackSize;i++)
     8b2:	12 16       	cp	r1, r18
     8b4:	13 06       	cpc	r1, r19
     8b6:	7c f0       	brlt	.+30     	; 0x8d6 <_ZN11FingerPrint17checkAckPackErrorEc+0x3e2>
     8b8:	20 c0       	rjmp	.+64     	; 0x8fa <_ZN11FingerPrint17checkAckPackErrorEc+0x406>
		//UCSR0C = ((1<<UCSZ00)|(1<<UCSZ01));
		UCSR0C = (3<<UCSZ00);
	}
	char checkForData()
	{
		if (UCSR0A & (1<<RXC0))
     8ba:	2c 91       	ld	r18, X
			ackDataIndex++;
			*/
			/********************************need to test************************/
			//check if there is data, if so, receive the data
			//-This avoid the program from endless loop in wait for data
			if (FingerPrintUart.checkForData())
     8bc:	22 23       	and	r18, r18
     8be:	a4 f7       	brge	.-24     	; 0x8a8 <_ZN11FingerPrint17checkAckPackErrorEc+0x3b4>
     8c0:	fe 83       	std	Y+6, r31	; 0x06
     8c2:	ed 83       	std	Y+5, r30	; 0x05
		}
		return 0;
	}
	char getData()
	{
		return UDR0;
     8c4:	e6 ec       	ldi	r30, 0xC6	; 198
     8c6:	f0 e0       	ldi	r31, 0x00	; 0
     8c8:	20 81       	ld	r18, Z
			//check if there is data, if so, receive the data
			//-This avoid the program from endless loop in wait for data
			if (FingerPrintUart.checkForData())
			{
				ackData = FingerPrintUart.getData();
				_ackPacket[ackDataIndex] = ackData;
     8ca:	f6 01       	movw	r30, r12
     8cc:	21 93       	st	Z+, r18
     8ce:	6f 01       	movw	r12, r30
				ackDataIndex++;
     8d0:	6f 5f       	subi	r22, 0xFF	; 255
     8d2:	7f 4f       	sbci	r23, 0xFF	; 255
     8d4:	e7 cf       	rjmp	.-50     	; 0x8a4 <_ZN11FingerPrint17checkAckPackErrorEc+0x3b0>
     8d6:	22 5d       	subi	r18, 0xD2	; 210
     8d8:	3f 4f       	sbci	r19, 0xFF	; 255
     8da:	bc 01       	movw	r22, r24
     8dc:	62 0f       	add	r22, r18
     8de:	73 1f       	adc	r23, r19
     8e0:	7f 01       	movw	r14, r30
			}
		}
		for (int i = 0; i<ackPackSize;i++)
		{
			FingerPrintUart.UARTsend(_ackPacket[i]);
     8e2:	f7 01       	movw	r30, r14
     8e4:	31 91       	ld	r19, Z+
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
     8e6:	2c 91       	ld	r18, X
     8e8:	25 ff       	sbrs	r18, 5
     8ea:	fd cf       	rjmp	.-6      	; 0x8e6 <_ZN11FingerPrint17checkAckPackErrorEc+0x3f2>
     8ec:	7f 01       	movw	r14, r30
		UDR0 = data;
     8ee:	e6 ec       	ldi	r30, 0xC6	; 198
     8f0:	f0 e0       	ldi	r31, 0x00	; 0
     8f2:	30 83       	st	Z, r19
				ackData = FingerPrintUart.getData();
				_ackPacket[ackDataIndex] = ackData;
				ackDataIndex++;
			}
		}
		for (int i = 0; i<ackPackSize;i++)
     8f4:	e6 16       	cp	r14, r22
     8f6:	f7 06       	cpc	r15, r23
     8f8:	a1 f7       	brne	.-24     	; 0x8e2 <_ZN11FingerPrint17checkAckPackErrorEc+0x3ee>
	bool reSendPack(int confIndex, int cmd ,int reTryTimes = 1)
	{
		for (int i = 0; i < reTryTimes; i++)
		{
			sendAndGetAck(cmd);
			if (_ackPacket[confIndex] == 0)
     8fa:	eb 81       	ldd	r30, Y+3	; 0x03
     8fc:	fc 81       	ldd	r31, Y+4	; 0x04
     8fe:	20 81       	ld	r18, Z
     900:	22 23       	and	r18, r18
     902:	09 f4       	brne	.+2      	; 0x906 <__stack+0x7>
     904:	9d c1       	rjmp	.+826    	; 0xc40 <__stack+0x341>
     906:	01 50       	subi	r16, 0x01	; 1
     908:	11 09       	sbc	r17, r1
		}
		return confIndex;
	}
	bool reSendPack(int confIndex, int cmd ,int reTryTimes = 1)
	{
		for (int i = 0; i < reTryTimes; i++)
     90a:	09 f0       	breq	.+2      	; 0x90e <__stack+0xf>
     90c:	4e cf       	rjmp	.-356    	; 0x7aa <_ZN11FingerPrint17checkAckPackErrorEc+0x2b6>
     90e:	9a c1       	rjmp	.+820    	; 0xc44 <__stack+0x345>
	}
	bool checkAckPackError(char cmd)
	{
		int confCodeIndex = (int)getAckPackConfirmCodeIndex(cmd);
		char confCode = _ackPacket[confCodeIndex - 1];
		switch(confCode)
     910:	04 e0       	ldi	r16, 0x04	; 4
     912:	10 e0       	ldi	r17, 0x00	; 0
	}
}
	char findPackSize(int cmdType, char packSendOrRecieve)
	 {
		 //packSendOrRecieve ; 1 send; 0 recieve
		 switch (cmdType)
     914:	69 81       	ldd	r22, Y+1	; 0x01
     916:	86 2e       	mov	r8, r22
     918:	91 2c       	mov	r9, r1
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
     91a:	a0 ec       	ldi	r26, 0xC0	; 192
     91c:	b0 e0       	ldi	r27, 0x00	; 0
		}
	return 0;
	}
	void sendPackage(int size)
{
	for (int i = 0; i < size; i++)
     91e:	49 83       	std	Y+1, r20	; 0x01
     920:	5a 83       	std	Y+2, r21	; 0x02
	 {
		 //packSendOrRecieve ; 1 send; 0 recieve
		 switch (cmdType)
		 {
			 /****************value of ack receive package is 12****************/
			 case VfyPwd:{packSendOrRecieve == 1? cmdType = 16 : cmdType = 12; break;}
     922:	21 2c       	mov	r2, r1
			 case ReadSysPara: {packSendOrRecieve == 1? cmdType = 12 : cmdType = 26; break;}
			 /****************value of ack receive package is 14****************/
			 case Match:{packSendOrRecieve == 1? cmdType = 12 : cmdType = 14; break;}
			 case TemplateNum:{packSendOrRecieve == 1? cmdType = 12 : cmdType = 14; break;}
			 /****************value of ack receive package is 16****************/
			 case GetRandomCode:{packSendOrRecieve == 1? cmdType = 12 : cmdType = 16; break;}
     924:	0f 2e       	mov	r0, r31
     926:	fc e0       	ldi	r31, 0x0C	; 12
     928:	7f 2e       	mov	r7, r31
     92a:	f0 2d       	mov	r31, r0
     92c:	61 2c       	mov	r6, r1
		 switch (cmdType)
		 {
			 /****************value of ack receive package is 12****************/
			 case VfyPwd:{packSendOrRecieve == 1? cmdType = 16 : cmdType = 12; break;}
			 case SetAdder:{packSendOrRecieve == 1? cmdType = 16 : cmdType = 12; break;}
			 case SetSysPara:{packSendOrRecieve == 1? cmdType = 14 : cmdType = 12; break;}
     92e:	31 2c       	mov	r3, r1
	bool reSendPack(int confIndex, int cmd ,int reTryTimes = 1)
	{
		for (int i = 0; i < reTryTimes; i++)
		{
			sendAndGetAck(cmd);
			if (_ackPacket[confIndex] == 0)
     930:	28 0f       	add	r18, r24
     932:	39 1f       	adc	r19, r25
     934:	b9 01       	movw	r22, r18
     936:	62 5d       	subi	r22, 0xD2	; 210
     938:	7f 4f       	sbci	r23, 0xFF	; 255
     93a:	7c 83       	std	Y+4, r23	; 0x04
     93c:	6b 83       	std	Y+3, r22	; 0x03
	}
}
	char findPackSize(int cmdType, char packSendOrRecieve)
	 {
		 //packSendOrRecieve ; 1 send; 0 recieve
		 switch (cmdType)
     93e:	f4 01       	movw	r30, r8
     940:	31 97       	sbiw	r30, 0x01	; 1
     942:	ed 31       	cpi	r30, 0x1D	; 29
     944:	f1 05       	cpc	r31, r1
     946:	70 f5       	brcc	.+92     	; 0x9a4 <__stack+0xa5>
     948:	eb 53       	subi	r30, 0x3B	; 59
     94a:	ff 4f       	sbci	r31, 0xFF	; 255
     94c:	0c 94 fb 15 	jmp	0x2bf6	; 0x2bf6 <__tablejump2__>
		 {
			 /****************value of ack receive package is 12****************/
			 case VfyPwd:{packSendOrRecieve == 1? cmdType = 16 : cmdType = 12; break;}
			 case SetAdder:{packSendOrRecieve == 1? cmdType = 16 : cmdType = 12; break;}
			 case SetSysPara:{packSendOrRecieve == 1? cmdType = 14 : cmdType = 12; break;}
     950:	2e e0       	ldi	r18, 0x0E	; 14
     952:	33 2d       	mov	r19, r3
     954:	ac c1       	rjmp	.+856    	; 0xcae <__stack+0x3af>
			 case Control:{packSendOrRecieve == 1? cmdType = 13 : cmdType = 12; break;}
			 case GenImage:{packSendOrRecieve == 1? cmdType = 12 : cmdType = 12; break;}
     956:	27 2d       	mov	r18, r7
     958:	36 2d       	mov	r19, r6
     95a:	a9 c1       	rjmp	.+850    	; 0xcae <__stack+0x3af>
			 case UpImg:{packSendOrRecieve == 1? cmdType = 12 : cmdType = 12; break;}
     95c:	27 2d       	mov	r18, r7
     95e:	36 2d       	mov	r19, r6
     960:	a6 c1       	rjmp	.+844    	; 0xcae <__stack+0x3af>
			 case DownImg:{packSendOrRecieve == 1? cmdType = 12 : cmdType = 12; break;}
     962:	27 2d       	mov	r18, r7
     964:	36 2d       	mov	r19, r6
     966:	a3 c1       	rjmp	.+838    	; 0xcae <__stack+0x3af>
			 case Img2Tz:{packSendOrRecieve == 1? cmdType = 13 : cmdType = 12; break;}
			 case RegModel:{packSendOrRecieve == 1? cmdType = 12 : cmdType = 12; break;}
     968:	27 2d       	mov	r18, r7
     96a:	36 2d       	mov	r19, r6
     96c:	a0 c1       	rjmp	.+832    	; 0xcae <__stack+0x3af>
			 case UpChar:{packSendOrRecieve == 1? cmdType = 13 : cmdType = 12; break;}
			 case Store:{packSendOrRecieve == 1? cmdType = 15 : cmdType = 12; break;}
     96e:	2f e0       	ldi	r18, 0x0F	; 15
     970:	30 e0       	ldi	r19, 0x00	; 0
     972:	9d c1       	rjmp	.+826    	; 0xcae <__stack+0x3af>
			 case LoadChar:{packSendOrRecieve == 1? cmdType = 15 : cmdType = 12; break;}
     974:	2f e0       	ldi	r18, 0x0F	; 15
     976:	30 e0       	ldi	r19, 0x00	; 0
     978:	9a c1       	rjmp	.+820    	; 0xcae <__stack+0x3af>
			 case DelChar:{packSendOrRecieve == 1? cmdType = 16 : cmdType = 12; break;}
			 case Empty:{packSendOrRecieve == 1? cmdType = 12 : cmdType = 12; break;}
     97a:	27 2d       	mov	r18, r7
     97c:	36 2d       	mov	r19, r6
     97e:	97 c1       	rjmp	.+814    	; 0xcae <__stack+0x3af>
			 case WriteNotePad:{packSendOrRecieve == 1? cmdType = 45 : cmdType = 12; break;}
     980:	2d e2       	ldi	r18, 0x2D	; 45
     982:	30 e0       	ldi	r19, 0x00	; 0
     984:	94 c1       	rjmp	.+808    	; 0xcae <__stack+0x3af>
			 /****************value of ack receive package is 11****************/
			 case SetPwd:{if(packSendOrRecieve) cmdType = 16;else cmdType = 11;break;}
			 /****************value of ack receive package is 26****************/
			 case ReadSysPara: {packSendOrRecieve == 1? cmdType = 12 : cmdType = 26; break;}
     986:	27 2d       	mov	r18, r7
     988:	36 2d       	mov	r19, r6
     98a:	91 c1       	rjmp	.+802    	; 0xcae <__stack+0x3af>
			 /****************value of ack receive package is 14****************/
			 case Match:{packSendOrRecieve == 1? cmdType = 12 : cmdType = 14; break;}
     98c:	27 2d       	mov	r18, r7
     98e:	36 2d       	mov	r19, r6
     990:	8e c1       	rjmp	.+796    	; 0xcae <__stack+0x3af>
			 case TemplateNum:{packSendOrRecieve == 1? cmdType = 12 : cmdType = 14; break;}
     992:	27 2d       	mov	r18, r7
     994:	36 2d       	mov	r19, r6
     996:	8b c1       	rjmp	.+790    	; 0xcae <__stack+0x3af>
			 /****************value of ack receive package is 16****************/
			 case GetRandomCode:{packSendOrRecieve == 1? cmdType = 12 : cmdType = 16; break;}
     998:	27 2d       	mov	r18, r7
     99a:	36 2d       	mov	r19, r6
     99c:	88 c1       	rjmp	.+784    	; 0xcae <__stack+0x3af>
			 case Serach:{packSendOrRecieve == 1? cmdType = 17 : cmdType = 16; break;}
     99e:	21 e1       	ldi	r18, 0x11	; 17
     9a0:	30 e0       	ldi	r19, 0x00	; 0
     9a2:	85 c1       	rjmp	.+778    	; 0xcae <__stack+0x3af>
		}
	return 0;
	}
	void sendPackage(int size)
{
	for (int i = 0; i < size; i++)
     9a4:	14 16       	cp	r1, r20
     9a6:	15 06       	cpc	r1, r21
     9a8:	cc f4       	brge	.+50     	; 0x9dc <__stack+0xdd>
     9aa:	e9 81       	ldd	r30, Y+1	; 0x01
     9ac:	fa 81       	ldd	r31, Y+2	; 0x02
     9ae:	7c 01       	movw	r14, r24
     9b0:	7f ef       	ldi	r23, 0xFF	; 255
     9b2:	e7 1a       	sub	r14, r23
     9b4:	f7 0a       	sbc	r15, r23
     9b6:	60 e0       	ldi	r22, 0x00	; 0
     9b8:	70 e0       	ldi	r23, 0x00	; 0
     9ba:	6f 01       	movw	r12, r30
	{
		FingerPrintUart.UARTsend(_dataPackage[i]);
     9bc:	f7 01       	movw	r30, r14
     9be:	31 91       	ld	r19, Z+
     9c0:	7f 01       	movw	r14, r30
     9c2:	f6 01       	movw	r30, r12
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
     9c4:	2c 91       	ld	r18, X
     9c6:	25 ff       	sbrs	r18, 5
     9c8:	fd cf       	rjmp	.-6      	; 0x9c4 <__stack+0xc5>
     9ca:	6f 01       	movw	r12, r30
		UDR0 = data;
     9cc:	e6 ec       	ldi	r30, 0xC6	; 198
     9ce:	f0 e0       	ldi	r31, 0x00	; 0
     9d0:	30 83       	st	Z, r19
		}
	return 0;
	}
	void sendPackage(int size)
{
	for (int i = 0; i < size; i++)
     9d2:	6f 5f       	subi	r22, 0xFF	; 255
     9d4:	7f 4f       	sbci	r23, 0xFF	; 255
     9d6:	6c 15       	cp	r22, r12
     9d8:	7d 05       	cpc	r23, r13
     9da:	84 f3       	brlt	.-32     	; 0x9bc <__stack+0xbd>
	}
}
	char findPackSize(int cmdType, char packSendOrRecieve)
	 {
		 //packSendOrRecieve ; 1 send; 0 recieve
		 switch (cmdType)
     9dc:	f4 01       	movw	r30, r8
     9de:	31 97       	sbiw	r30, 0x01	; 1
     9e0:	ed 31       	cpi	r30, 0x1D	; 29
     9e2:	f1 05       	cpc	r31, r1
     9e4:	e0 f4       	brcc	.+56     	; 0xa1e <__stack+0x11f>
     9e6:	ee 51       	subi	r30, 0x1E	; 30
     9e8:	ff 4f       	sbci	r31, 0xFF	; 255
     9ea:	0c 94 fb 15 	jmp	0x2bf6	; 0x2bf6 <__tablejump2__>
		 {
			 /****************value of ack receive package is 12****************/
			 case VfyPwd:{packSendOrRecieve == 1? cmdType = 16 : cmdType = 12; break;}
     9ee:	67 2d       	mov	r22, r7
     9f0:	76 2d       	mov	r23, r6
     9f2:	17 c0       	rjmp	.+46     	; 0xa22 <__stack+0x123>
			 case LoadChar:{packSendOrRecieve == 1? cmdType = 15 : cmdType = 12; break;}
			 case DelChar:{packSendOrRecieve == 1? cmdType = 16 : cmdType = 12; break;}
			 case Empty:{packSendOrRecieve == 1? cmdType = 12 : cmdType = 12; break;}
			 case WriteNotePad:{packSendOrRecieve == 1? cmdType = 45 : cmdType = 12; break;}
			 /****************value of ack receive package is 11****************/
			 case SetPwd:{if(packSendOrRecieve) cmdType = 16;else cmdType = 11;break;}
     9f4:	6b e0       	ldi	r22, 0x0B	; 11
     9f6:	70 e0       	ldi	r23, 0x00	; 0
     9f8:	14 c0       	rjmp	.+40     	; 0xa22 <__stack+0x123>
			 /****************value of ack receive package is 26****************/
			 case ReadSysPara: {packSendOrRecieve == 1? cmdType = 12 : cmdType = 26; break;}
     9fa:	6a e1       	ldi	r22, 0x1A	; 26
     9fc:	70 e0       	ldi	r23, 0x00	; 0
     9fe:	11 c0       	rjmp	.+34     	; 0xa22 <__stack+0x123>
			 /****************value of ack receive package is 14****************/
			 case Match:{packSendOrRecieve == 1? cmdType = 12 : cmdType = 14; break;}
     a00:	6e e0       	ldi	r22, 0x0E	; 14
     a02:	73 2d       	mov	r23, r3
     a04:	0e c0       	rjmp	.+28     	; 0xa22 <__stack+0x123>
			 case TemplateNum:{packSendOrRecieve == 1? cmdType = 12 : cmdType = 14; break;}
     a06:	6e e0       	ldi	r22, 0x0E	; 14
     a08:	73 2d       	mov	r23, r3
     a0a:	0b c0       	rjmp	.+22     	; 0xa22 <__stack+0x123>
			 /****************value of ack receive package is 16****************/
			 case GetRandomCode:{packSendOrRecieve == 1? cmdType = 12 : cmdType = 16; break;}
     a0c:	60 e1       	ldi	r22, 0x10	; 16
     a0e:	72 2d       	mov	r23, r2
     a10:	08 c0       	rjmp	.+16     	; 0xa22 <__stack+0x123>
			 case Serach:{packSendOrRecieve == 1? cmdType = 17 : cmdType = 16; break;}
     a12:	60 e1       	ldi	r22, 0x10	; 16
     a14:	72 2d       	mov	r23, r2
     a16:	05 c0       	rjmp	.+10     	; 0xa22 <__stack+0x123>
			 /****************value of ack receive package is 44****************/
			 case ReadNotPad:{packSendOrRecieve == 1? cmdType = 13 : cmdType = 44; break;}
     a18:	6c e2       	ldi	r22, 0x2C	; 44
     a1a:	70 e0       	ldi	r23, 0x00	; 0
     a1c:	02 c0       	rjmp	.+4      	; 0xa22 <__stack+0x123>
	}
}
	char findPackSize(int cmdType, char packSendOrRecieve)
	 {
		 //packSendOrRecieve ; 1 send; 0 recieve
		 switch (cmdType)
     a1e:	69 81       	ldd	r22, Y+1	; 0x01
     a20:	7a 81       	ldd	r23, Y+2	; 0x02
     a22:	fc 01       	movw	r30, r24
     a24:	be 96       	adiw	r30, 0x2e	; 46
     a26:	6f 01       	movw	r12, r30
	{
		_dataPackage[9] = commandValue;
	}
	void getAckPackage(char ackPackSize = 12)
	{
		int ackDataIndex = 0;
     a28:	e1 2c       	mov	r14, r1
     a2a:	f1 2c       	mov	r15, r1
     a2c:	77 27       	eor	r23, r23
     a2e:	46 2e       	mov	r4, r22
     a30:	57 2e       	mov	r5, r23
     a32:	fe 83       	std	Y+6, r31	; 0x06
     a34:	ed 83       	std	Y+5, r30	; 0x05
     a36:	ed 81       	ldd	r30, Y+5	; 0x05
     a38:	fe 81       	ldd	r31, Y+6	; 0x06
     a3a:	24 2d       	mov	r18, r4
     a3c:	35 2d       	mov	r19, r5
		char ackData = 0;
		while(ackDataIndex < ackPackSize)
     a3e:	e6 16       	cp	r14, r22
     a40:	f7 06       	cpc	r15, r23
     a42:	24 f0       	brlt	.+8      	; 0xa4c <__stack+0x14d>
				ackData = FingerPrintUart.getData();
				_ackPacket[ackDataIndex] = ackData;
				ackDataIndex++;
			}
		}
		for (int i = 0; i<ackPackSize;i++)
     a44:	12 16       	cp	r1, r18
     a46:	13 06       	cpc	r1, r19
     a48:	84 f0       	brlt	.+32     	; 0xa6a <__stack+0x16b>
     a4a:	21 c0       	rjmp	.+66     	; 0xa8e <__stack+0x18f>
		//UCSR0C = ((1<<UCSZ00)|(1<<UCSZ01));
		UCSR0C = (3<<UCSZ00);
	}
	char checkForData()
	{
		if (UCSR0A & (1<<RXC0))
     a4c:	2c 91       	ld	r18, X
			ackDataIndex++;
			*/
			/********************************need to test************************/
			//check if there is data, if so, receive the data
			//-This avoid the program from endless loop in wait for data
			if (FingerPrintUart.checkForData())
     a4e:	22 23       	and	r18, r18
     a50:	a4 f7       	brge	.-24     	; 0xa3a <__stack+0x13b>
     a52:	fe 83       	std	Y+6, r31	; 0x06
     a54:	ed 83       	std	Y+5, r30	; 0x05
		}
		return 0;
	}
	char getData()
	{
		return UDR0;
     a56:	e6 ec       	ldi	r30, 0xC6	; 198
     a58:	f0 e0       	ldi	r31, 0x00	; 0
     a5a:	20 81       	ld	r18, Z
			//check if there is data, if so, receive the data
			//-This avoid the program from endless loop in wait for data
			if (FingerPrintUart.checkForData())
			{
				ackData = FingerPrintUart.getData();
				_ackPacket[ackDataIndex] = ackData;
     a5c:	f6 01       	movw	r30, r12
     a5e:	21 93       	st	Z+, r18
     a60:	6f 01       	movw	r12, r30
				ackDataIndex++;
     a62:	ff ef       	ldi	r31, 0xFF	; 255
     a64:	ef 1a       	sub	r14, r31
     a66:	ff 0a       	sbc	r15, r31
     a68:	e6 cf       	rjmp	.-52     	; 0xa36 <__stack+0x137>
     a6a:	22 5d       	subi	r18, 0xD2	; 210
     a6c:	3f 4f       	sbci	r19, 0xFF	; 255
     a6e:	bc 01       	movw	r22, r24
     a70:	62 0f       	add	r22, r18
     a72:	73 1f       	adc	r23, r19
     a74:	7f 01       	movw	r14, r30
			}
		}
		for (int i = 0; i<ackPackSize;i++)
		{
			FingerPrintUart.UARTsend(_ackPacket[i]);
     a76:	f7 01       	movw	r30, r14
     a78:	31 91       	ld	r19, Z+
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
     a7a:	2c 91       	ld	r18, X
     a7c:	25 ff       	sbrs	r18, 5
     a7e:	fd cf       	rjmp	.-6      	; 0xa7a <__stack+0x17b>
     a80:	7f 01       	movw	r14, r30
		UDR0 = data;
     a82:	e6 ec       	ldi	r30, 0xC6	; 198
     a84:	f0 e0       	ldi	r31, 0x00	; 0
     a86:	30 83       	st	Z, r19
				ackData = FingerPrintUart.getData();
				_ackPacket[ackDataIndex] = ackData;
				ackDataIndex++;
			}
		}
		for (int i = 0; i<ackPackSize;i++)
     a88:	6e 15       	cp	r22, r14
     a8a:	7f 05       	cpc	r23, r15
     a8c:	a1 f7       	brne	.-24     	; 0xa76 <__stack+0x177>
	bool reSendPack(int confIndex, int cmd ,int reTryTimes = 1)
	{
		for (int i = 0; i < reTryTimes; i++)
		{
			sendAndGetAck(cmd);
			if (_ackPacket[confIndex] == 0)
     a8e:	eb 81       	ldd	r30, Y+3	; 0x03
     a90:	fc 81       	ldd	r31, Y+4	; 0x04
     a92:	20 81       	ld	r18, Z
     a94:	22 23       	and	r18, r18
     a96:	09 f4       	brne	.+2      	; 0xa9a <__stack+0x19b>
     a98:	d7 c0       	rjmp	.+430    	; 0xc48 <__stack+0x349>
     a9a:	01 50       	subi	r16, 0x01	; 1
     a9c:	11 09       	sbc	r17, r1
		}
		return confIndex;
	}
	bool reSendPack(int confIndex, int cmd ,int reTryTimes = 1)
	{
		for (int i = 0; i < reTryTimes; i++)
     a9e:	09 f0       	breq	.+2      	; 0xaa2 <__stack+0x1a3>
     aa0:	4e cf       	rjmp	.-356    	; 0x93e <__stack+0x3f>
     aa2:	d4 c0       	rjmp	.+424    	; 0xc4c <__stack+0x34d>
	}
	bool checkAckPackError(char cmd)
	{
		int confCodeIndex = (int)getAckPackConfirmCodeIndex(cmd);
		char confCode = _ackPacket[confCodeIndex - 1];
		switch(confCode)
     aa4:	05 e0       	ldi	r16, 0x05	; 5
     aa6:	10 e0       	ldi	r17, 0x00	; 0
	}
}
	char findPackSize(int cmdType, char packSendOrRecieve)
	 {
		 //packSendOrRecieve ; 1 send; 0 recieve
		 switch (cmdType)
     aa8:	69 81       	ldd	r22, Y+1	; 0x01
     aaa:	86 2e       	mov	r8, r22
     aac:	91 2c       	mov	r9, r1
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
     aae:	a0 ec       	ldi	r26, 0xC0	; 192
     ab0:	b0 e0       	ldi	r27, 0x00	; 0
		}
	return 0;
	}
	void sendPackage(int size)
{
	for (int i = 0; i < size; i++)
     ab2:	49 83       	std	Y+1, r20	; 0x01
     ab4:	5a 83       	std	Y+2, r21	; 0x02
	 {
		 //packSendOrRecieve ; 1 send; 0 recieve
		 switch (cmdType)
		 {
			 /****************value of ack receive package is 12****************/
			 case VfyPwd:{packSendOrRecieve == 1? cmdType = 16 : cmdType = 12; break;}
     ab6:	21 2c       	mov	r2, r1
			 case ReadSysPara: {packSendOrRecieve == 1? cmdType = 12 : cmdType = 26; break;}
			 /****************value of ack receive package is 14****************/
			 case Match:{packSendOrRecieve == 1? cmdType = 12 : cmdType = 14; break;}
			 case TemplateNum:{packSendOrRecieve == 1? cmdType = 12 : cmdType = 14; break;}
			 /****************value of ack receive package is 16****************/
			 case GetRandomCode:{packSendOrRecieve == 1? cmdType = 12 : cmdType = 16; break;}
     ab8:	0f 2e       	mov	r0, r31
     aba:	fc e0       	ldi	r31, 0x0C	; 12
     abc:	7f 2e       	mov	r7, r31
     abe:	f0 2d       	mov	r31, r0
     ac0:	61 2c       	mov	r6, r1
		 switch (cmdType)
		 {
			 /****************value of ack receive package is 12****************/
			 case VfyPwd:{packSendOrRecieve == 1? cmdType = 16 : cmdType = 12; break;}
			 case SetAdder:{packSendOrRecieve == 1? cmdType = 16 : cmdType = 12; break;}
			 case SetSysPara:{packSendOrRecieve == 1? cmdType = 14 : cmdType = 12; break;}
     ac2:	31 2c       	mov	r3, r1
	bool reSendPack(int confIndex, int cmd ,int reTryTimes = 1)
	{
		for (int i = 0; i < reTryTimes; i++)
		{
			sendAndGetAck(cmd);
			if (_ackPacket[confIndex] == 0)
     ac4:	28 0f       	add	r18, r24
     ac6:	39 1f       	adc	r19, r25
     ac8:	b9 01       	movw	r22, r18
     aca:	62 5d       	subi	r22, 0xD2	; 210
     acc:	7f 4f       	sbci	r23, 0xFF	; 255
     ace:	7c 83       	std	Y+4, r23	; 0x04
     ad0:	6b 83       	std	Y+3, r22	; 0x03
	}
}
	char findPackSize(int cmdType, char packSendOrRecieve)
	 {
		 //packSendOrRecieve ; 1 send; 0 recieve
		 switch (cmdType)
     ad2:	f4 01       	movw	r30, r8
     ad4:	31 97       	sbiw	r30, 0x01	; 1
     ad6:	ed 31       	cpi	r30, 0x1D	; 29
     ad8:	f1 05       	cpc	r31, r1
     ada:	70 f5       	brcc	.+92     	; 0xb38 <__stack+0x239>
     adc:	e1 50       	subi	r30, 0x01	; 1
     ade:	ff 4f       	sbci	r31, 0xFF	; 255
     ae0:	0c 94 fb 15 	jmp	0x2bf6	; 0x2bf6 <__tablejump2__>
		 {
			 /****************value of ack receive package is 12****************/
			 case VfyPwd:{packSendOrRecieve == 1? cmdType = 16 : cmdType = 12; break;}
			 case SetAdder:{packSendOrRecieve == 1? cmdType = 16 : cmdType = 12; break;}
			 case SetSysPara:{packSendOrRecieve == 1? cmdType = 14 : cmdType = 12; break;}
     ae4:	2e e0       	ldi	r18, 0x0E	; 14
     ae6:	33 2d       	mov	r19, r3
     ae8:	ea c0       	rjmp	.+468    	; 0xcbe <__stack+0x3bf>
			 case Control:{packSendOrRecieve == 1? cmdType = 13 : cmdType = 12; break;}
			 case GenImage:{packSendOrRecieve == 1? cmdType = 12 : cmdType = 12; break;}
     aea:	27 2d       	mov	r18, r7
     aec:	36 2d       	mov	r19, r6
     aee:	e7 c0       	rjmp	.+462    	; 0xcbe <__stack+0x3bf>
			 case UpImg:{packSendOrRecieve == 1? cmdType = 12 : cmdType = 12; break;}
     af0:	27 2d       	mov	r18, r7
     af2:	36 2d       	mov	r19, r6
     af4:	e4 c0       	rjmp	.+456    	; 0xcbe <__stack+0x3bf>
			 case DownImg:{packSendOrRecieve == 1? cmdType = 12 : cmdType = 12; break;}
     af6:	27 2d       	mov	r18, r7
     af8:	36 2d       	mov	r19, r6
     afa:	e1 c0       	rjmp	.+450    	; 0xcbe <__stack+0x3bf>
			 case Img2Tz:{packSendOrRecieve == 1? cmdType = 13 : cmdType = 12; break;}
			 case RegModel:{packSendOrRecieve == 1? cmdType = 12 : cmdType = 12; break;}
     afc:	27 2d       	mov	r18, r7
     afe:	36 2d       	mov	r19, r6
     b00:	de c0       	rjmp	.+444    	; 0xcbe <__stack+0x3bf>
			 case UpChar:{packSendOrRecieve == 1? cmdType = 13 : cmdType = 12; break;}
			 case Store:{packSendOrRecieve == 1? cmdType = 15 : cmdType = 12; break;}
     b02:	2f e0       	ldi	r18, 0x0F	; 15
     b04:	30 e0       	ldi	r19, 0x00	; 0
     b06:	db c0       	rjmp	.+438    	; 0xcbe <__stack+0x3bf>
			 case LoadChar:{packSendOrRecieve == 1? cmdType = 15 : cmdType = 12; break;}
     b08:	2f e0       	ldi	r18, 0x0F	; 15
     b0a:	30 e0       	ldi	r19, 0x00	; 0
     b0c:	d8 c0       	rjmp	.+432    	; 0xcbe <__stack+0x3bf>
			 case DelChar:{packSendOrRecieve == 1? cmdType = 16 : cmdType = 12; break;}
			 case Empty:{packSendOrRecieve == 1? cmdType = 12 : cmdType = 12; break;}
     b0e:	27 2d       	mov	r18, r7
     b10:	36 2d       	mov	r19, r6
     b12:	d5 c0       	rjmp	.+426    	; 0xcbe <__stack+0x3bf>
			 case WriteNotePad:{packSendOrRecieve == 1? cmdType = 45 : cmdType = 12; break;}
     b14:	2d e2       	ldi	r18, 0x2D	; 45
     b16:	30 e0       	ldi	r19, 0x00	; 0
     b18:	d2 c0       	rjmp	.+420    	; 0xcbe <__stack+0x3bf>
			 /****************value of ack receive package is 11****************/
			 case SetPwd:{if(packSendOrRecieve) cmdType = 16;else cmdType = 11;break;}
			 /****************value of ack receive package is 26****************/
			 case ReadSysPara: {packSendOrRecieve == 1? cmdType = 12 : cmdType = 26; break;}
     b1a:	27 2d       	mov	r18, r7
     b1c:	36 2d       	mov	r19, r6
     b1e:	cf c0       	rjmp	.+414    	; 0xcbe <__stack+0x3bf>
			 /****************value of ack receive package is 14****************/
			 case Match:{packSendOrRecieve == 1? cmdType = 12 : cmdType = 14; break;}
     b20:	27 2d       	mov	r18, r7
     b22:	36 2d       	mov	r19, r6
     b24:	cc c0       	rjmp	.+408    	; 0xcbe <__stack+0x3bf>
			 case TemplateNum:{packSendOrRecieve == 1? cmdType = 12 : cmdType = 14; break;}
     b26:	27 2d       	mov	r18, r7
     b28:	36 2d       	mov	r19, r6
     b2a:	c9 c0       	rjmp	.+402    	; 0xcbe <__stack+0x3bf>
			 /****************value of ack receive package is 16****************/
			 case GetRandomCode:{packSendOrRecieve == 1? cmdType = 12 : cmdType = 16; break;}
     b2c:	27 2d       	mov	r18, r7
     b2e:	36 2d       	mov	r19, r6
     b30:	c6 c0       	rjmp	.+396    	; 0xcbe <__stack+0x3bf>
			 case Serach:{packSendOrRecieve == 1? cmdType = 17 : cmdType = 16; break;}
     b32:	21 e1       	ldi	r18, 0x11	; 17
     b34:	30 e0       	ldi	r19, 0x00	; 0
     b36:	c3 c0       	rjmp	.+390    	; 0xcbe <__stack+0x3bf>
		}
	return 0;
	}
	void sendPackage(int size)
{
	for (int i = 0; i < size; i++)
     b38:	14 16       	cp	r1, r20
     b3a:	15 06       	cpc	r1, r21
     b3c:	cc f4       	brge	.+50     	; 0xb70 <__stack+0x271>
     b3e:	e9 81       	ldd	r30, Y+1	; 0x01
     b40:	fa 81       	ldd	r31, Y+2	; 0x02
     b42:	7c 01       	movw	r14, r24
     b44:	7f ef       	ldi	r23, 0xFF	; 255
     b46:	e7 1a       	sub	r14, r23
     b48:	f7 0a       	sbc	r15, r23
     b4a:	60 e0       	ldi	r22, 0x00	; 0
     b4c:	70 e0       	ldi	r23, 0x00	; 0
     b4e:	6f 01       	movw	r12, r30
	{
		FingerPrintUart.UARTsend(_dataPackage[i]);
     b50:	f7 01       	movw	r30, r14
     b52:	31 91       	ld	r19, Z+
     b54:	7f 01       	movw	r14, r30
     b56:	f6 01       	movw	r30, r12
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
     b58:	2c 91       	ld	r18, X
     b5a:	25 ff       	sbrs	r18, 5
     b5c:	fd cf       	rjmp	.-6      	; 0xb58 <__stack+0x259>
     b5e:	6f 01       	movw	r12, r30
		UDR0 = data;
     b60:	e6 ec       	ldi	r30, 0xC6	; 198
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	30 83       	st	Z, r19
		}
	return 0;
	}
	void sendPackage(int size)
{
	for (int i = 0; i < size; i++)
     b66:	6f 5f       	subi	r22, 0xFF	; 255
     b68:	7f 4f       	sbci	r23, 0xFF	; 255
     b6a:	6c 15       	cp	r22, r12
     b6c:	7d 05       	cpc	r23, r13
     b6e:	84 f3       	brlt	.-32     	; 0xb50 <__stack+0x251>
	}
}
	char findPackSize(int cmdType, char packSendOrRecieve)
	 {
		 //packSendOrRecieve ; 1 send; 0 recieve
		 switch (cmdType)
     b70:	f4 01       	movw	r30, r8
     b72:	31 97       	sbiw	r30, 0x01	; 1
     b74:	ed 31       	cpi	r30, 0x1D	; 29
     b76:	f1 05       	cpc	r31, r1
     b78:	e0 f4       	brcc	.+56     	; 0xbb2 <__stack+0x2b3>
     b7a:	e4 5e       	subi	r30, 0xE4	; 228
     b7c:	fe 4f       	sbci	r31, 0xFE	; 254
     b7e:	0c 94 fb 15 	jmp	0x2bf6	; 0x2bf6 <__tablejump2__>
		 {
			 /****************value of ack receive package is 12****************/
			 case VfyPwd:{packSendOrRecieve == 1? cmdType = 16 : cmdType = 12; break;}
     b82:	67 2d       	mov	r22, r7
     b84:	76 2d       	mov	r23, r6
     b86:	17 c0       	rjmp	.+46     	; 0xbb6 <__stack+0x2b7>
			 case LoadChar:{packSendOrRecieve == 1? cmdType = 15 : cmdType = 12; break;}
			 case DelChar:{packSendOrRecieve == 1? cmdType = 16 : cmdType = 12; break;}
			 case Empty:{packSendOrRecieve == 1? cmdType = 12 : cmdType = 12; break;}
			 case WriteNotePad:{packSendOrRecieve == 1? cmdType = 45 : cmdType = 12; break;}
			 /****************value of ack receive package is 11****************/
			 case SetPwd:{if(packSendOrRecieve) cmdType = 16;else cmdType = 11;break;}
     b88:	6b e0       	ldi	r22, 0x0B	; 11
     b8a:	70 e0       	ldi	r23, 0x00	; 0
     b8c:	14 c0       	rjmp	.+40     	; 0xbb6 <__stack+0x2b7>
			 /****************value of ack receive package is 26****************/
			 case ReadSysPara: {packSendOrRecieve == 1? cmdType = 12 : cmdType = 26; break;}
     b8e:	6a e1       	ldi	r22, 0x1A	; 26
     b90:	70 e0       	ldi	r23, 0x00	; 0
     b92:	11 c0       	rjmp	.+34     	; 0xbb6 <__stack+0x2b7>
			 /****************value of ack receive package is 14****************/
			 case Match:{packSendOrRecieve == 1? cmdType = 12 : cmdType = 14; break;}
     b94:	6e e0       	ldi	r22, 0x0E	; 14
     b96:	73 2d       	mov	r23, r3
     b98:	0e c0       	rjmp	.+28     	; 0xbb6 <__stack+0x2b7>
			 case TemplateNum:{packSendOrRecieve == 1? cmdType = 12 : cmdType = 14; break;}
     b9a:	6e e0       	ldi	r22, 0x0E	; 14
     b9c:	73 2d       	mov	r23, r3
     b9e:	0b c0       	rjmp	.+22     	; 0xbb6 <__stack+0x2b7>
			 /****************value of ack receive package is 16****************/
			 case GetRandomCode:{packSendOrRecieve == 1? cmdType = 12 : cmdType = 16; break;}
     ba0:	60 e1       	ldi	r22, 0x10	; 16
     ba2:	72 2d       	mov	r23, r2
     ba4:	08 c0       	rjmp	.+16     	; 0xbb6 <__stack+0x2b7>
			 case Serach:{packSendOrRecieve == 1? cmdType = 17 : cmdType = 16; break;}
     ba6:	60 e1       	ldi	r22, 0x10	; 16
     ba8:	72 2d       	mov	r23, r2
     baa:	05 c0       	rjmp	.+10     	; 0xbb6 <__stack+0x2b7>
			 /****************value of ack receive package is 44****************/
			 case ReadNotPad:{packSendOrRecieve == 1? cmdType = 13 : cmdType = 44; break;}
     bac:	6c e2       	ldi	r22, 0x2C	; 44
     bae:	70 e0       	ldi	r23, 0x00	; 0
     bb0:	02 c0       	rjmp	.+4      	; 0xbb6 <__stack+0x2b7>
	}
}
	char findPackSize(int cmdType, char packSendOrRecieve)
	 {
		 //packSendOrRecieve ; 1 send; 0 recieve
		 switch (cmdType)
     bb2:	69 81       	ldd	r22, Y+1	; 0x01
     bb4:	7a 81       	ldd	r23, Y+2	; 0x02
     bb6:	fc 01       	movw	r30, r24
     bb8:	be 96       	adiw	r30, 0x2e	; 46
     bba:	6f 01       	movw	r12, r30
	{
		_dataPackage[9] = commandValue;
	}
	void getAckPackage(char ackPackSize = 12)
	{
		int ackDataIndex = 0;
     bbc:	e1 2c       	mov	r14, r1
     bbe:	f1 2c       	mov	r15, r1
     bc0:	77 27       	eor	r23, r23
     bc2:	46 2e       	mov	r4, r22
     bc4:	57 2e       	mov	r5, r23
     bc6:	fe 83       	std	Y+6, r31	; 0x06
     bc8:	ed 83       	std	Y+5, r30	; 0x05
     bca:	ed 81       	ldd	r30, Y+5	; 0x05
     bcc:	fe 81       	ldd	r31, Y+6	; 0x06
     bce:	24 2d       	mov	r18, r4
     bd0:	35 2d       	mov	r19, r5
		char ackData = 0;
		while(ackDataIndex < ackPackSize)
     bd2:	e6 16       	cp	r14, r22
     bd4:	f7 06       	cpc	r15, r23
     bd6:	24 f0       	brlt	.+8      	; 0xbe0 <__stack+0x2e1>
				ackData = FingerPrintUart.getData();
				_ackPacket[ackDataIndex] = ackData;
				ackDataIndex++;
			}
		}
		for (int i = 0; i<ackPackSize;i++)
     bd8:	12 16       	cp	r1, r18
     bda:	13 06       	cpc	r1, r19
     bdc:	84 f0       	brlt	.+32     	; 0xbfe <__stack+0x2ff>
     bde:	21 c0       	rjmp	.+66     	; 0xc22 <__stack+0x323>
		//UCSR0C = ((1<<UCSZ00)|(1<<UCSZ01));
		UCSR0C = (3<<UCSZ00);
	}
	char checkForData()
	{
		if (UCSR0A & (1<<RXC0))
     be0:	2c 91       	ld	r18, X
			ackDataIndex++;
			*/
			/********************************need to test************************/
			//check if there is data, if so, receive the data
			//-This avoid the program from endless loop in wait for data
			if (FingerPrintUart.checkForData())
     be2:	22 23       	and	r18, r18
     be4:	a4 f7       	brge	.-24     	; 0xbce <__stack+0x2cf>
     be6:	fe 83       	std	Y+6, r31	; 0x06
     be8:	ed 83       	std	Y+5, r30	; 0x05
		}
		return 0;
	}
	char getData()
	{
		return UDR0;
     bea:	e6 ec       	ldi	r30, 0xC6	; 198
     bec:	f0 e0       	ldi	r31, 0x00	; 0
     bee:	20 81       	ld	r18, Z
			//check if there is data, if so, receive the data
			//-This avoid the program from endless loop in wait for data
			if (FingerPrintUart.checkForData())
			{
				ackData = FingerPrintUart.getData();
				_ackPacket[ackDataIndex] = ackData;
     bf0:	f6 01       	movw	r30, r12
     bf2:	21 93       	st	Z+, r18
     bf4:	6f 01       	movw	r12, r30
				ackDataIndex++;
     bf6:	ff ef       	ldi	r31, 0xFF	; 255
     bf8:	ef 1a       	sub	r14, r31
     bfa:	ff 0a       	sbc	r15, r31
     bfc:	e6 cf       	rjmp	.-52     	; 0xbca <__stack+0x2cb>
     bfe:	22 5d       	subi	r18, 0xD2	; 210
     c00:	3f 4f       	sbci	r19, 0xFF	; 255
     c02:	bc 01       	movw	r22, r24
     c04:	62 0f       	add	r22, r18
     c06:	73 1f       	adc	r23, r19
     c08:	7f 01       	movw	r14, r30
			}
		}
		for (int i = 0; i<ackPackSize;i++)
		{
			FingerPrintUart.UARTsend(_ackPacket[i]);
     c0a:	f7 01       	movw	r30, r14
     c0c:	31 91       	ld	r19, Z+
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
     c0e:	2c 91       	ld	r18, X
     c10:	25 ff       	sbrs	r18, 5
     c12:	fd cf       	rjmp	.-6      	; 0xc0e <__stack+0x30f>
     c14:	7f 01       	movw	r14, r30
		UDR0 = data;
     c16:	e6 ec       	ldi	r30, 0xC6	; 198
     c18:	f0 e0       	ldi	r31, 0x00	; 0
     c1a:	30 83       	st	Z, r19
				ackData = FingerPrintUart.getData();
				_ackPacket[ackDataIndex] = ackData;
				ackDataIndex++;
			}
		}
		for (int i = 0; i<ackPackSize;i++)
     c1c:	6e 15       	cp	r22, r14
     c1e:	7f 05       	cpc	r23, r15
     c20:	a1 f7       	brne	.-24     	; 0xc0a <__stack+0x30b>
	bool reSendPack(int confIndex, int cmd ,int reTryTimes = 1)
	{
		for (int i = 0; i < reTryTimes; i++)
		{
			sendAndGetAck(cmd);
			if (_ackPacket[confIndex] == 0)
     c22:	eb 81       	ldd	r30, Y+3	; 0x03
     c24:	fc 81       	ldd	r31, Y+4	; 0x04
     c26:	20 81       	ld	r18, Z
     c28:	22 23       	and	r18, r18
     c2a:	91 f0       	breq	.+36     	; 0xc50 <__stack+0x351>
     c2c:	01 50       	subi	r16, 0x01	; 1
     c2e:	11 09       	sbc	r17, r1
		}
		return confIndex;
	}
	bool reSendPack(int confIndex, int cmd ,int reTryTimes = 1)
	{
		for (int i = 0; i < reTryTimes; i++)
     c30:	09 f0       	breq	.+2      	; 0xc34 <__stack+0x335>
     c32:	4f cf       	rjmp	.-354    	; 0xad2 <__stack+0x1d3>
			if (_ackPacket[confIndex] == 0)
			{
				return 1;
			}
		}
		return 0;
     c34:	80 e0       	ldi	r24, 0x00	; 0
     c36:	46 c0       	rjmp	.+140    	; 0xcc4 <__stack+0x3c5>
		for (int i = 0; i < reTryTimes; i++)
		{
			sendAndGetAck(cmd);
			if (_ackPacket[confIndex] == 0)
			{
				return 1;
     c38:	81 e0       	ldi	r24, 0x01	; 1
     c3a:	44 c0       	rjmp	.+136    	; 0xcc4 <__stack+0x3c5>
			}
		}
		return 0;
     c3c:	80 e0       	ldi	r24, 0x00	; 0
     c3e:	42 c0       	rjmp	.+132    	; 0xcc4 <__stack+0x3c5>
		for (int i = 0; i < reTryTimes; i++)
		{
			sendAndGetAck(cmd);
			if (_ackPacket[confIndex] == 0)
			{
				return 1;
     c40:	81 e0       	ldi	r24, 0x01	; 1
     c42:	40 c0       	rjmp	.+128    	; 0xcc4 <__stack+0x3c5>
			}
		}
		return 0;
     c44:	80 e0       	ldi	r24, 0x00	; 0
     c46:	3e c0       	rjmp	.+124    	; 0xcc4 <__stack+0x3c5>
		for (int i = 0; i < reTryTimes; i++)
		{
			sendAndGetAck(cmd);
			if (_ackPacket[confIndex] == 0)
			{
				return 1;
     c48:	81 e0       	ldi	r24, 0x01	; 1
     c4a:	3c c0       	rjmp	.+120    	; 0xcc4 <__stack+0x3c5>
			}
		}
		return 0;
     c4c:	80 e0       	ldi	r24, 0x00	; 0
     c4e:	3a c0       	rjmp	.+116    	; 0xcc4 <__stack+0x3c5>
		for (int i = 0; i < reTryTimes; i++)
		{
			sendAndGetAck(cmd);
			if (_ackPacket[confIndex] == 0)
			{
				return 1;
     c50:	81 e0       	ldi	r24, 0x01	; 1
     c52:	38 c0       	rjmp	.+112    	; 0xcc4 <__stack+0x3c5>
	{
		int confCodeIndex = (int)getAckPackConfirmCodeIndex(cmd);
		char confCode = _ackPacket[confCodeIndex - 1];
		switch(confCode)
		{
			case 0x00: return 1;
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	36 c0       	rjmp	.+108    	; 0xcc4 <__stack+0x3c5>
	 {
		 //packSendOrRecieve ; 1 send; 0 recieve
		 switch (cmdType)
		 {
			 /****************value of ack receive package is 12****************/
			 case VfyPwd:{packSendOrRecieve == 1? cmdType = 16 : cmdType = 12; break;}
     c58:	ec e0       	ldi	r30, 0x0C	; 12
     c5a:	f0 e0       	ldi	r31, 0x00	; 0
			 case GetRandomCode:{packSendOrRecieve == 1? cmdType = 12 : cmdType = 16; break;}
			 case Serach:{packSendOrRecieve == 1? cmdType = 17 : cmdType = 16; break;}
			 /****************value of ack receive package is 44****************/
			 case ReadNotPad:{packSendOrRecieve == 1? cmdType = 13 : cmdType = 44; break;}
		 }
		 return cmdType;
     c5c:	7e 2f       	mov	r23, r30
     c5e:	a5 cc       	rjmp	.-1718   	; 0x5aa <_ZN11FingerPrint17checkAckPackErrorEc+0xb6>
			}
			
			//return confirmation code index
			return i+confIndex;
		}
		return confIndex;
     c60:	27 2f       	mov	r18, r23
		}
		return 0;
	}
	bool checkAckPackError(char cmd)
	{
		int confCodeIndex = (int)getAckPackConfirmCodeIndex(cmd);
     c62:	30 e0       	ldi	r19, 0x00	; 0
		char confCode = _ackPacket[confCodeIndex - 1];
     c64:	fc 01       	movw	r30, r24
     c66:	e2 0f       	add	r30, r18
     c68:	f3 1f       	adc	r31, r19
		switch(confCode)
     c6a:	c5 a4       	ldd	r12, Z+45	; 0x2d
     c6c:	d1 2c       	mov	r13, r1
     c6e:	fa e1       	ldi	r31, 0x1A	; 26
     c70:	cf 16       	cp	r12, r31
     c72:	d1 04       	cpc	r13, r1
     c74:	28 f4       	brcc	.+10     	; 0xc80 <__stack+0x381>
     c76:	f6 01       	movw	r30, r12
     c78:	e7 5c       	subi	r30, 0xC7	; 199
     c7a:	fe 4f       	sbci	r31, 0xFE	; 254
     c7c:	0c 94 fb 15 	jmp	0x2bf6	; 0x2bf6 <__tablejump2__>
		{
			case 0x00: return 1;
			case 0x01: return reSendPack(confCodeIndex,cmd,5);
			case 0x02: return 0;
     c80:	80 e0       	ldi	r24, 0x00	; 0
     c82:	20 c0       	rjmp	.+64     	; 0xcc4 <__stack+0x3c5>
	 {
		 //packSendOrRecieve ; 1 send; 0 recieve
		 switch (cmdType)
		 {
			 /****************value of ack receive package is 12****************/
			 case VfyPwd:{packSendOrRecieve == 1? cmdType = 16 : cmdType = 12; break;}
     c84:	20 e1       	ldi	r18, 0x10	; 16
     c86:	32 2d       	mov	r19, r2
     c88:	02 c0       	rjmp	.+4      	; 0xc8e <__stack+0x38f>
			 case SetAdder:{packSendOrRecieve == 1? cmdType = 16 : cmdType = 12; break;}
			 case SetSysPara:{packSendOrRecieve == 1? cmdType = 14 : cmdType = 12; break;}
			 case Control:{packSendOrRecieve == 1? cmdType = 13 : cmdType = 12; break;}
     c8a:	2d e0       	ldi	r18, 0x0D	; 13
     c8c:	30 e0       	ldi	r19, 0x00	; 0
     c8e:	89 01       	movw	r16, r18
     c90:	11 27       	eor	r17, r17
     c92:	f8 cc       	rjmp	.-1552   	; 0x684 <_ZN11FingerPrint17checkAckPackErrorEc+0x190>
	 {
		 //packSendOrRecieve ; 1 send; 0 recieve
		 switch (cmdType)
		 {
			 /****************value of ack receive package is 12****************/
			 case VfyPwd:{packSendOrRecieve == 1? cmdType = 16 : cmdType = 12; break;}
     c94:	20 e1       	ldi	r18, 0x10	; 16
     c96:	32 2d       	mov	r19, r2
     c98:	02 c0       	rjmp	.+4      	; 0xc9e <__stack+0x39f>
			 case SetAdder:{packSendOrRecieve == 1? cmdType = 16 : cmdType = 12; break;}
			 case SetSysPara:{packSendOrRecieve == 1? cmdType = 14 : cmdType = 12; break;}
			 case Control:{packSendOrRecieve == 1? cmdType = 13 : cmdType = 12; break;}
     c9a:	2d e0       	ldi	r18, 0x0D	; 13
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	f9 01       	movw	r30, r18
     ca0:	ff 27       	eor	r31, r31
     ca2:	bb cd       	rjmp	.-1162   	; 0x81a <_ZN11FingerPrint17checkAckPackErrorEc+0x326>
	 {
		 //packSendOrRecieve ; 1 send; 0 recieve
		 switch (cmdType)
		 {
			 /****************value of ack receive package is 12****************/
			 case VfyPwd:{packSendOrRecieve == 1? cmdType = 16 : cmdType = 12; break;}
     ca4:	20 e1       	ldi	r18, 0x10	; 16
     ca6:	32 2d       	mov	r19, r2
     ca8:	02 c0       	rjmp	.+4      	; 0xcae <__stack+0x3af>
			 case SetAdder:{packSendOrRecieve == 1? cmdType = 16 : cmdType = 12; break;}
			 case SetSysPara:{packSendOrRecieve == 1? cmdType = 14 : cmdType = 12; break;}
			 case Control:{packSendOrRecieve == 1? cmdType = 13 : cmdType = 12; break;}
     caa:	2d e0       	ldi	r18, 0x0D	; 13
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	f9 01       	movw	r30, r18
     cb0:	ff 27       	eor	r31, r31
     cb2:	7d ce       	rjmp	.-774    	; 0x9ae <__stack+0xaf>
	 {
		 //packSendOrRecieve ; 1 send; 0 recieve
		 switch (cmdType)
		 {
			 /****************value of ack receive package is 12****************/
			 case VfyPwd:{packSendOrRecieve == 1? cmdType = 16 : cmdType = 12; break;}
     cb4:	20 e1       	ldi	r18, 0x10	; 16
     cb6:	32 2d       	mov	r19, r2
     cb8:	02 c0       	rjmp	.+4      	; 0xcbe <__stack+0x3bf>
			 case SetAdder:{packSendOrRecieve == 1? cmdType = 16 : cmdType = 12; break;}
			 case SetSysPara:{packSendOrRecieve == 1? cmdType = 14 : cmdType = 12; break;}
			 case Control:{packSendOrRecieve == 1? cmdType = 13 : cmdType = 12; break;}
     cba:	2d e0       	ldi	r18, 0x0D	; 13
     cbc:	30 e0       	ldi	r19, 0x00	; 0
     cbe:	f9 01       	movw	r30, r18
     cc0:	ff 27       	eor	r31, r31
     cc2:	3f cf       	rjmp	.-386    	; 0xb42 <__stack+0x243>
			case 0x15: 
			case 0x18: return reSendPack(confCodeIndex,cmd,5);
			case 0x19: return 1;
		}
		return 0;
	}
     cc4:	26 96       	adiw	r28, 0x06	; 6
     cc6:	0f b6       	in	r0, 0x3f	; 63
     cc8:	f8 94       	cli
     cca:	de bf       	out	0x3e, r29	; 62
     ccc:	0f be       	out	0x3f, r0	; 63
     cce:	cd bf       	out	0x3d, r28	; 61
     cd0:	df 91       	pop	r29
     cd2:	cf 91       	pop	r28
     cd4:	1f 91       	pop	r17
     cd6:	0f 91       	pop	r16
     cd8:	ff 90       	pop	r15
     cda:	ef 90       	pop	r14
     cdc:	df 90       	pop	r13
     cde:	cf 90       	pop	r12
     ce0:	bf 90       	pop	r11
     ce2:	af 90       	pop	r10
     ce4:	9f 90       	pop	r9
     ce6:	8f 90       	pop	r8
     ce8:	7f 90       	pop	r7
     cea:	6f 90       	pop	r6
     cec:	5f 90       	pop	r5
     cee:	4f 90       	pop	r4
     cf0:	3f 90       	pop	r3
     cf2:	2f 90       	pop	r2
     cf4:	08 95       	ret

00000cf6 <_ZN11FingerPrint13sendAndGetAckEi>:
	void sendAndGetAck(int cmd)
     cf6:	bf 92       	push	r11
     cf8:	cf 92       	push	r12
     cfa:	df 92       	push	r13
     cfc:	ef 92       	push	r14
     cfe:	ff 92       	push	r15
     d00:	0f 93       	push	r16
     d02:	1f 93       	push	r17
     d04:	cf 93       	push	r28
     d06:	df 93       	push	r29
     d08:	8c 01       	movw	r16, r24
	}
}
	char findPackSize(int cmdType, char packSendOrRecieve)
	 {
		 //packSendOrRecieve ; 1 send; 0 recieve
		 switch (cmdType)
     d0a:	fb 01       	movw	r30, r22
     d0c:	31 97       	sbiw	r30, 0x01	; 1
     d0e:	ed 31       	cpi	r30, 0x1D	; 29
     d10:	f1 05       	cpc	r31, r1
     d12:	68 f5       	brcc	.+90     	; 0xd6e <_ZN11FingerPrint13sendAndGetAckEi+0x78>
     d14:	ed 5a       	subi	r30, 0xAD	; 173
     d16:	fe 4f       	sbci	r31, 0xFE	; 254
     d18:	0c 94 fb 15 	jmp	0x2bf6	; 0x2bf6 <__tablejump2__>
		 {
			 /****************value of ack receive package is 12****************/
			 case VfyPwd:{packSendOrRecieve == 1? cmdType = 16 : cmdType = 12; break;}
			 case SetAdder:{packSendOrRecieve == 1? cmdType = 16 : cmdType = 12; break;}
			 case SetSysPara:{packSendOrRecieve == 1? cmdType = 14 : cmdType = 12; break;}
     d1c:	9b 01       	movw	r18, r22
     d1e:	97 c0       	rjmp	.+302    	; 0xe4e <_ZN11FingerPrint13sendAndGetAckEi+0x158>
			 case Control:{packSendOrRecieve == 1? cmdType = 13 : cmdType = 12; break;}
			 case GenImage:{packSendOrRecieve == 1? cmdType = 12 : cmdType = 12; break;}
     d20:	2c e0       	ldi	r18, 0x0C	; 12
     d22:	30 e0       	ldi	r19, 0x00	; 0
     d24:	94 c0       	rjmp	.+296    	; 0xe4e <_ZN11FingerPrint13sendAndGetAckEi+0x158>
			 case UpImg:{packSendOrRecieve == 1? cmdType = 12 : cmdType = 12; break;}
     d26:	2c e0       	ldi	r18, 0x0C	; 12
     d28:	30 e0       	ldi	r19, 0x00	; 0
     d2a:	91 c0       	rjmp	.+290    	; 0xe4e <_ZN11FingerPrint13sendAndGetAckEi+0x158>
			 case DownImg:{packSendOrRecieve == 1? cmdType = 12 : cmdType = 12; break;}
     d2c:	2c e0       	ldi	r18, 0x0C	; 12
     d2e:	30 e0       	ldi	r19, 0x00	; 0
     d30:	8e c0       	rjmp	.+284    	; 0xe4e <_ZN11FingerPrint13sendAndGetAckEi+0x158>
			 case Img2Tz:{packSendOrRecieve == 1? cmdType = 13 : cmdType = 12; break;}
			 case RegModel:{packSendOrRecieve == 1? cmdType = 12 : cmdType = 12; break;}
     d32:	2c e0       	ldi	r18, 0x0C	; 12
     d34:	30 e0       	ldi	r19, 0x00	; 0
     d36:	8b c0       	rjmp	.+278    	; 0xe4e <_ZN11FingerPrint13sendAndGetAckEi+0x158>
			 case UpChar:{packSendOrRecieve == 1? cmdType = 13 : cmdType = 12; break;}
			 case Store:{packSendOrRecieve == 1? cmdType = 15 : cmdType = 12; break;}
     d38:	2f e0       	ldi	r18, 0x0F	; 15
     d3a:	30 e0       	ldi	r19, 0x00	; 0
     d3c:	88 c0       	rjmp	.+272    	; 0xe4e <_ZN11FingerPrint13sendAndGetAckEi+0x158>
			 case LoadChar:{packSendOrRecieve == 1? cmdType = 15 : cmdType = 12; break;}
     d3e:	2f e0       	ldi	r18, 0x0F	; 15
     d40:	30 e0       	ldi	r19, 0x00	; 0
     d42:	85 c0       	rjmp	.+266    	; 0xe4e <_ZN11FingerPrint13sendAndGetAckEi+0x158>
			 case DelChar:{packSendOrRecieve == 1? cmdType = 16 : cmdType = 12; break;}
			 case Empty:{packSendOrRecieve == 1? cmdType = 12 : cmdType = 12; break;}
     d44:	2c e0       	ldi	r18, 0x0C	; 12
     d46:	30 e0       	ldi	r19, 0x00	; 0
     d48:	82 c0       	rjmp	.+260    	; 0xe4e <_ZN11FingerPrint13sendAndGetAckEi+0x158>
			 case WriteNotePad:{packSendOrRecieve == 1? cmdType = 45 : cmdType = 12; break;}
     d4a:	2d e2       	ldi	r18, 0x2D	; 45
     d4c:	30 e0       	ldi	r19, 0x00	; 0
     d4e:	7f c0       	rjmp	.+254    	; 0xe4e <_ZN11FingerPrint13sendAndGetAckEi+0x158>
			 /****************value of ack receive package is 11****************/
			 case SetPwd:{if(packSendOrRecieve) cmdType = 16;else cmdType = 11;break;}
			 /****************value of ack receive package is 26****************/
			 case ReadSysPara: {packSendOrRecieve == 1? cmdType = 12 : cmdType = 26; break;}
     d50:	2c e0       	ldi	r18, 0x0C	; 12
     d52:	30 e0       	ldi	r19, 0x00	; 0
     d54:	7c c0       	rjmp	.+248    	; 0xe4e <_ZN11FingerPrint13sendAndGetAckEi+0x158>
			 /****************value of ack receive package is 14****************/
			 case Match:{packSendOrRecieve == 1? cmdType = 12 : cmdType = 14; break;}
     d56:	2c e0       	ldi	r18, 0x0C	; 12
     d58:	30 e0       	ldi	r19, 0x00	; 0
     d5a:	79 c0       	rjmp	.+242    	; 0xe4e <_ZN11FingerPrint13sendAndGetAckEi+0x158>
			 case TemplateNum:{packSendOrRecieve == 1? cmdType = 12 : cmdType = 14; break;}
     d5c:	2c e0       	ldi	r18, 0x0C	; 12
     d5e:	30 e0       	ldi	r19, 0x00	; 0
     d60:	76 c0       	rjmp	.+236    	; 0xe4e <_ZN11FingerPrint13sendAndGetAckEi+0x158>
			 /****************value of ack receive package is 16****************/
			 case GetRandomCode:{packSendOrRecieve == 1? cmdType = 12 : cmdType = 16; break;}
     d62:	2c e0       	ldi	r18, 0x0C	; 12
     d64:	30 e0       	ldi	r19, 0x00	; 0
     d66:	73 c0       	rjmp	.+230    	; 0xe4e <_ZN11FingerPrint13sendAndGetAckEi+0x158>
			 case Serach:{packSendOrRecieve == 1? cmdType = 17 : cmdType = 16; break;}
     d68:	21 e1       	ldi	r18, 0x11	; 17
     d6a:	30 e0       	ldi	r19, 0x00	; 0
     d6c:	70 c0       	rjmp	.+224    	; 0xe4e <_ZN11FingerPrint13sendAndGetAckEi+0x158>
     d6e:	9b 01       	movw	r18, r22
     d70:	33 27       	eor	r19, r19
		}
	return 0;
	}
	void sendPackage(int size)
{
	for (int i = 0; i < size; i++)
     d72:	12 16       	cp	r1, r18
     d74:	13 06       	cpc	r1, r19
     d76:	94 f4       	brge	.+36     	; 0xd9c <_ZN11FingerPrint13sendAndGetAckEi+0xa6>
     d78:	d8 01       	movw	r26, r16
     d7a:	11 96       	adiw	r26, 0x01	; 1
			case 0x18: return reSendPack(confCodeIndex,cmd,5);
			case 0x19: return 1;
		}
		return 0;
	}
	void sendAndGetAck(int cmd)
     d7c:	40 e0       	ldi	r20, 0x00	; 0
     d7e:	50 e0       	ldi	r21, 0x00	; 0
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
     d80:	e0 ec       	ldi	r30, 0xC0	; 192
     d82:	f0 e0       	ldi	r31, 0x00	; 0
		UDR0 = data;
     d84:	c6 ec       	ldi	r28, 0xC6	; 198
     d86:	d0 e0       	ldi	r29, 0x00	; 0
	}
	void sendPackage(int size)
{
	for (int i = 0; i < size; i++)
	{
		FingerPrintUart.UARTsend(_dataPackage[i]);
     d88:	8d 91       	ld	r24, X+
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
     d8a:	90 81       	ld	r25, Z
     d8c:	95 ff       	sbrs	r25, 5
     d8e:	fd cf       	rjmp	.-6      	; 0xd8a <_ZN11FingerPrint13sendAndGetAckEi+0x94>
		UDR0 = data;
     d90:	88 83       	st	Y, r24
		}
	return 0;
	}
	void sendPackage(int size)
{
	for (int i = 0; i < size; i++)
     d92:	4f 5f       	subi	r20, 0xFF	; 255
     d94:	5f 4f       	sbci	r21, 0xFF	; 255
     d96:	42 17       	cp	r20, r18
     d98:	53 07       	cpc	r21, r19
     d9a:	b4 f3       	brlt	.-20     	; 0xd88 <_ZN11FingerPrint13sendAndGetAckEi+0x92>
	}
}
	char findPackSize(int cmdType, char packSendOrRecieve)
	 {
		 //packSendOrRecieve ; 1 send; 0 recieve
		 switch (cmdType)
     d9c:	fb 01       	movw	r30, r22
     d9e:	31 97       	sbiw	r30, 0x01	; 1
     da0:	ed 31       	cpi	r30, 0x1D	; 29
     da2:	f1 05       	cpc	r31, r1
     da4:	d8 f4       	brcc	.+54     	; 0xddc <_ZN11FingerPrint13sendAndGetAckEi+0xe6>
     da6:	e0 59       	subi	r30, 0x90	; 144
     da8:	fe 4f       	sbci	r31, 0xFE	; 254
     daa:	0c 94 fb 15 	jmp	0x2bf6	; 0x2bf6 <__tablejump2__>
		 {
			 /****************value of ack receive package is 12****************/
			 case VfyPwd:{packSendOrRecieve == 1? cmdType = 16 : cmdType = 12; break;}
     dae:	6c e0       	ldi	r22, 0x0C	; 12
     db0:	70 e0       	ldi	r23, 0x00	; 0
     db2:	14 c0       	rjmp	.+40     	; 0xddc <_ZN11FingerPrint13sendAndGetAckEi+0xe6>
			 case LoadChar:{packSendOrRecieve == 1? cmdType = 15 : cmdType = 12; break;}
			 case DelChar:{packSendOrRecieve == 1? cmdType = 16 : cmdType = 12; break;}
			 case Empty:{packSendOrRecieve == 1? cmdType = 12 : cmdType = 12; break;}
			 case WriteNotePad:{packSendOrRecieve == 1? cmdType = 45 : cmdType = 12; break;}
			 /****************value of ack receive package is 11****************/
			 case SetPwd:{if(packSendOrRecieve) cmdType = 16;else cmdType = 11;break;}
     db4:	6b e0       	ldi	r22, 0x0B	; 11
     db6:	70 e0       	ldi	r23, 0x00	; 0
     db8:	11 c0       	rjmp	.+34     	; 0xddc <_ZN11FingerPrint13sendAndGetAckEi+0xe6>
			 /****************value of ack receive package is 26****************/
			 case ReadSysPara: {packSendOrRecieve == 1? cmdType = 12 : cmdType = 26; break;}
     dba:	6a e1       	ldi	r22, 0x1A	; 26
     dbc:	70 e0       	ldi	r23, 0x00	; 0
     dbe:	0e c0       	rjmp	.+28     	; 0xddc <_ZN11FingerPrint13sendAndGetAckEi+0xe6>
			 /****************value of ack receive package is 14****************/
			 case Match:{packSendOrRecieve == 1? cmdType = 12 : cmdType = 14; break;}
     dc0:	6e e0       	ldi	r22, 0x0E	; 14
     dc2:	70 e0       	ldi	r23, 0x00	; 0
     dc4:	0b c0       	rjmp	.+22     	; 0xddc <_ZN11FingerPrint13sendAndGetAckEi+0xe6>
			 case TemplateNum:{packSendOrRecieve == 1? cmdType = 12 : cmdType = 14; break;}
     dc6:	6e e0       	ldi	r22, 0x0E	; 14
     dc8:	70 e0       	ldi	r23, 0x00	; 0
     dca:	08 c0       	rjmp	.+16     	; 0xddc <_ZN11FingerPrint13sendAndGetAckEi+0xe6>
			 /****************value of ack receive package is 16****************/
			 case GetRandomCode:{packSendOrRecieve == 1? cmdType = 12 : cmdType = 16; break;}
     dcc:	60 e1       	ldi	r22, 0x10	; 16
     dce:	70 e0       	ldi	r23, 0x00	; 0
     dd0:	05 c0       	rjmp	.+10     	; 0xddc <_ZN11FingerPrint13sendAndGetAckEi+0xe6>
			 case Serach:{packSendOrRecieve == 1? cmdType = 17 : cmdType = 16; break;}
     dd2:	60 e1       	ldi	r22, 0x10	; 16
     dd4:	70 e0       	ldi	r23, 0x00	; 0
     dd6:	02 c0       	rjmp	.+4      	; 0xddc <_ZN11FingerPrint13sendAndGetAckEi+0xe6>
			 /****************value of ack receive package is 44****************/
			 case ReadNotPad:{packSendOrRecieve == 1? cmdType = 13 : cmdType = 44; break;}
     dd8:	6c e2       	ldi	r22, 0x2C	; 44
     dda:	70 e0       	ldi	r23, 0x00	; 0
     ddc:	d8 01       	movw	r26, r16
     dde:	9e 96       	adiw	r26, 0x2e	; 46
     de0:	7d 01       	movw	r14, r26
	{
		_dataPackage[9] = commandValue;
	}
	void getAckPackage(char ackPackSize = 12)
	{
		int ackDataIndex = 0;
     de2:	40 e0       	ldi	r20, 0x00	; 0
     de4:	50 e0       	ldi	r21, 0x00	; 0
     de6:	77 27       	eor	r23, r23
		//UCSR0C = ((1<<UCSZ00)|(1<<UCSZ01));
		UCSR0C = (3<<UCSZ00);
	}
	char checkForData()
	{
		if (UCSR0A & (1<<RXC0))
     de8:	c0 ec       	ldi	r28, 0xC0	; 192
     dea:	d0 e0       	ldi	r29, 0x00	; 0
     dec:	b6 2e       	mov	r11, r22
     dee:	87 2f       	mov	r24, r23
		}
		return 0;
	}
	char getData()
	{
		return UDR0;
     df0:	0f 2e       	mov	r0, r31
     df2:	f6 ec       	ldi	r31, 0xC6	; 198
     df4:	cf 2e       	mov	r12, r31
     df6:	d1 2c       	mov	r13, r1
     df8:	f0 2d       	mov	r31, r0
     dfa:	2b 2d       	mov	r18, r11
     dfc:	38 2f       	mov	r19, r24
	}
	void getAckPackage(char ackPackSize = 12)
	{
		int ackDataIndex = 0;
		char ackData = 0;
		while(ackDataIndex < ackPackSize)
     dfe:	46 17       	cp	r20, r22
     e00:	57 07       	cpc	r21, r23
     e02:	24 f0       	brlt	.+8      	; 0xe0c <_ZN11FingerPrint13sendAndGetAckEi+0x116>
				ackData = FingerPrintUart.getData();
				_ackPacket[ackDataIndex] = ackData;
				ackDataIndex++;
			}
		}
		for (int i = 0; i<ackPackSize;i++)
     e04:	12 16       	cp	r1, r18
     e06:	13 06       	cpc	r1, r19
     e08:	64 f0       	brlt	.+24     	; 0xe22 <_ZN11FingerPrint13sendAndGetAckEi+0x12c>
     e0a:	23 c0       	rjmp	.+70     	; 0xe52 <_ZN11FingerPrint13sendAndGetAckEi+0x15c>
		//UCSR0C = ((1<<UCSZ00)|(1<<UCSZ01));
		UCSR0C = (3<<UCSZ00);
	}
	char checkForData()
	{
		if (UCSR0A & (1<<RXC0))
     e0c:	98 81       	ld	r25, Y
			ackDataIndex++;
			*/
			/********************************need to test************************/
			//check if there is data, if so, receive the data
			//-This avoid the program from endless loop in wait for data
			if (FingerPrintUart.checkForData())
     e0e:	99 23       	and	r25, r25
     e10:	a4 f7       	brge	.-24     	; 0xdfa <_ZN11FingerPrint13sendAndGetAckEi+0x104>
		}
		return 0;
	}
	char getData()
	{
		return UDR0;
     e12:	f6 01       	movw	r30, r12
     e14:	90 81       	ld	r25, Z
			//check if there is data, if so, receive the data
			//-This avoid the program from endless loop in wait for data
			if (FingerPrintUart.checkForData())
			{
				ackData = FingerPrintUart.getData();
				_ackPacket[ackDataIndex] = ackData;
     e16:	f7 01       	movw	r30, r14
     e18:	91 93       	st	Z+, r25
     e1a:	7f 01       	movw	r14, r30
				ackDataIndex++;
     e1c:	4f 5f       	subi	r20, 0xFF	; 255
     e1e:	5f 4f       	sbci	r21, 0xFF	; 255
     e20:	ec cf       	rjmp	.-40     	; 0xdfa <_ZN11FingerPrint13sendAndGetAckEi+0x104>
     e22:	22 5d       	subi	r18, 0xD2	; 210
     e24:	3f 4f       	sbci	r19, 0xFF	; 255
     e26:	20 0f       	add	r18, r16
     e28:	31 1f       	adc	r19, r17
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
     e2a:	e0 ec       	ldi	r30, 0xC0	; 192
     e2c:	f0 e0       	ldi	r31, 0x00	; 0
		UDR0 = data;
     e2e:	c6 ec       	ldi	r28, 0xC6	; 198
     e30:	d0 e0       	ldi	r29, 0x00	; 0
				ackDataIndex++;
			}
		}
		for (int i = 0; i<ackPackSize;i++)
		{
			FingerPrintUart.UARTsend(_ackPacket[i]);
     e32:	9d 91       	ld	r25, X+
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
     e34:	80 81       	ld	r24, Z
     e36:	85 ff       	sbrs	r24, 5
     e38:	fd cf       	rjmp	.-6      	; 0xe34 <_ZN11FingerPrint13sendAndGetAckEi+0x13e>
		UDR0 = data;
     e3a:	98 83       	st	Y, r25
				ackData = FingerPrintUart.getData();
				_ackPacket[ackDataIndex] = ackData;
				ackDataIndex++;
			}
		}
		for (int i = 0; i<ackPackSize;i++)
     e3c:	a2 17       	cp	r26, r18
     e3e:	b3 07       	cpc	r27, r19
     e40:	c1 f7       	brne	.-16     	; 0xe32 <_ZN11FingerPrint13sendAndGetAckEi+0x13c>
     e42:	07 c0       	rjmp	.+14     	; 0xe52 <_ZN11FingerPrint13sendAndGetAckEi+0x15c>
	 {
		 //packSendOrRecieve ; 1 send; 0 recieve
		 switch (cmdType)
		 {
			 /****************value of ack receive package is 12****************/
			 case VfyPwd:{packSendOrRecieve == 1? cmdType = 16 : cmdType = 12; break;}
     e44:	20 e1       	ldi	r18, 0x10	; 16
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	02 c0       	rjmp	.+4      	; 0xe4e <_ZN11FingerPrint13sendAndGetAckEi+0x158>
			 case SetAdder:{packSendOrRecieve == 1? cmdType = 16 : cmdType = 12; break;}
			 case SetSysPara:{packSendOrRecieve == 1? cmdType = 14 : cmdType = 12; break;}
			 case Control:{packSendOrRecieve == 1? cmdType = 13 : cmdType = 12; break;}
     e4a:	2d e0       	ldi	r18, 0x0D	; 13
     e4c:	30 e0       	ldi	r19, 0x00	; 0
     e4e:	33 27       	eor	r19, r19
     e50:	93 cf       	rjmp	.-218    	; 0xd78 <_ZN11FingerPrint13sendAndGetAckEi+0x82>
	}
	void sendAndGetAck(int cmd)
	{
		sendPackage(findPackSize(cmd,1));
		getAckPackage(findPackSize(cmd,0));
	}
     e52:	df 91       	pop	r29
     e54:	cf 91       	pop	r28
     e56:	1f 91       	pop	r17
     e58:	0f 91       	pop	r16
     e5a:	ff 90       	pop	r15
     e5c:	ef 90       	pop	r14
     e5e:	df 90       	pop	r13
     e60:	cf 90       	pop	r12
     e62:	bf 90       	pop	r11
     e64:	08 95       	ret

00000e66 <main>:
		sendAndGetAck(SetSysPara);
		checkAckPackError(SetSysPara);	
	}
};
int main(void)
{
     e66:	cf 93       	push	r28
     e68:	df 93       	push	r29
     e6a:	cd b7       	in	r28, 0x3d	; 61
     e6c:	de b7       	in	r29, 0x3e	; 62
     e6e:	c9 5c       	subi	r28, 0xC9	; 201
     e70:	d1 09       	sbc	r29, r1
     e72:	0f b6       	in	r0, 0x3f	; 63
     e74:	f8 94       	cli
     e76:	de bf       	out	0x3e, r29	; 62
     e78:	0f be       	out	0x3f, r0	; 63
     e7a:	cd bf       	out	0x3d, r28	; 61
		setBaudRate(rate);
	}
	void setBaudRate(BaudRate rate)
	{
		unsigned int BAUD_PRESCALLER = (((F_CPU / (rate * 16UL))) - 1);
		UBRR0H = (unsigned int)(BAUD_PRESCALLER>>8);
     e7c:	45 ec       	ldi	r20, 0xC5	; 197
     e7e:	50 e0       	ldi	r21, 0x00	; 0
     e80:	da 01       	movw	r26, r20
     e82:	1c 92       	st	X, r1
		UBRR0L = (unsigned int)(BAUD_PRESCALLER);
     e84:	24 ec       	ldi	r18, 0xC4	; 196
     e86:	30 e0       	ldi	r19, 0x00	; 0
     e88:	77 e6       	ldi	r23, 0x67	; 103
     e8a:	f9 01       	movw	r30, r18
     e8c:	70 83       	st	Z, r23
		UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0);
     e8e:	a1 ec       	ldi	r26, 0xC1	; 193
     e90:	b0 e0       	ldi	r27, 0x00	; 0
     e92:	98 e9       	ldi	r25, 0x98	; 152
     e94:	9c 93       	st	X, r25
		//UCSR0C = ((1<<UCSZ00)|(1<<UCSZ01));
		UCSR0C = (3<<UCSZ00);
     e96:	02 ec       	ldi	r16, 0xC2	; 194
     e98:	10 e0       	ldi	r17, 0x00	; 0
     e9a:	86 e0       	ldi	r24, 0x06	; 6
     e9c:	f8 01       	movw	r30, r16
     e9e:	80 83       	st	Z, r24
		setBaudRate(rate);
	}
	void setBaudRate(BaudRate rate)
	{
		unsigned int BAUD_PRESCALLER = (((F_CPU / (rate * 16UL))) - 1);
		UBRR0H = (unsigned int)(BAUD_PRESCALLER>>8);
     ea0:	fa 01       	movw	r30, r20
     ea2:	10 82       	st	Z, r1
		UBRR0L = (unsigned int)(BAUD_PRESCALLER);
     ea4:	60 e1       	ldi	r22, 0x10	; 16
     ea6:	f9 01       	movw	r30, r18
     ea8:	60 83       	st	Z, r22
		UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0);
     eaa:	9c 93       	st	X, r25
		//UCSR0C = ((1<<UCSZ00)|(1<<UCSZ01));
		UCSR0C = (3<<UCSZ00);
     eac:	f8 01       	movw	r30, r16
     eae:	80 83       	st	Z, r24
		setBaudRate(rate);
	}
	void setBaudRate(BaudRate rate)
	{
		unsigned int BAUD_PRESCALLER = (((F_CPU / (rate * 16UL))) - 1);
		UBRR0H = (unsigned int)(BAUD_PRESCALLER>>8);
     eb0:	fa 01       	movw	r30, r20
     eb2:	10 82       	st	Z, r1
		UBRR0L = (unsigned int)(BAUD_PRESCALLER);
     eb4:	f9 01       	movw	r30, r18
     eb6:	70 83       	st	Z, r23
		UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0);
     eb8:	9c 93       	st	X, r25
		//UCSR0C = ((1<<UCSZ00)|(1<<UCSZ01));
		UCSR0C = (3<<UCSZ00);
     eba:	f8 01       	movw	r30, r16
     ebc:	80 83       	st	Z, r24
		setBaudRate(rate);
	}
	void setBaudRate(BaudRate rate)
	{
		unsigned int BAUD_PRESCALLER = (((F_CPU / (rate * 16UL))) - 1);
		UBRR0H = (unsigned int)(BAUD_PRESCALLER>>8);
     ebe:	fa 01       	movw	r30, r20
     ec0:	10 82       	st	Z, r1
		UBRR0L = (unsigned int)(BAUD_PRESCALLER);
     ec2:	f9 01       	movw	r30, r18
     ec4:	60 83       	st	Z, r22
		UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0);
     ec6:	9c 93       	st	X, r25
		//UCSR0C = ((1<<UCSZ00)|(1<<UCSZ01));
		UCSR0C = (3<<UCSZ00);
     ec8:	d8 01       	movw	r26, r16
     eca:	8c 93       	st	X, r24
	char _dataPackage[45];
	char _ackPacket[150];
	char _length;
	void setHeader(char FirstByte = 0xEF, char SeconedByte = 0x01)
	{
		_dataPackage[0] = FirstByte;
     ecc:	8f ee       	ldi	r24, 0xEF	; 239
     ece:	8a 83       	std	Y+2, r24	; 0x02
		_dataPackage[1] = SeconedByte;
     ed0:	91 e0       	ldi	r25, 0x01	; 1
     ed2:	9b 83       	std	Y+3, r25	; 0x03
	void SetAddress(unsigned long int addressVal = 0xFFFFFFFF)
	{
		char shift = 24;
		for (int i = 2; i < 6; i++)
		{
			_dataPackage[i] = addressVal >> shift;
     ed4:	8f ef       	ldi	r24, 0xFF	; 255
     ed6:	8c 83       	std	Y+4, r24	; 0x04
     ed8:	8d 83       	std	Y+5, r24	; 0x05
     eda:	8e 83       	std	Y+6, r24	; 0x06
     edc:	8f 83       	std	Y+7, r24	; 0x07
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ede:	bf ef       	ldi	r27, 0xFF	; 255
     ee0:	ed eb       	ldi	r30, 0xBD	; 189
     ee2:	fa e0       	ldi	r31, 0x0A	; 10
     ee4:	b1 50       	subi	r27, 0x01	; 1
     ee6:	e0 40       	sbci	r30, 0x00	; 0
     ee8:	f0 40       	sbci	r31, 0x00	; 0
     eea:	e1 f7       	brne	.-8      	; 0xee4 <main+0x7e>
     eec:	00 c0       	rjmp	.+0      	; 0xeee <main+0x88>
     eee:	00 00       	nop
		_dataPackage[13] = pwd;
	}
	void setPackagePID(char PID = command)
	{
		//01H = command;  02H = DATA packet; 07H = Ack packet; 08H = End of DATA packet
		_dataPackage[6] = PID;
     ef0:	98 87       	std	Y+8, r25	; 0x08
	void setPacketLength(char length = 0x07)
	{
		//Refers to the length of package content (command packets and data packets)
		//plus the length of Checksum( 2 bytes)   !!!MAX is 256 Byte!!!
		/**** {07H} = 4byte Password, 1Byte IndecationCode (command), 2Byte CheckSum ****/
		_dataPackage[7] = 0;
     ef2:	19 86       	std	Y+9, r1	; 0x09
		_dataPackage[8] = length;
     ef4:	87 e0       	ldi	r24, 0x07	; 7
     ef6:	8a 87       	std	Y+10, r24	; 0x0a
	}
	bool verifyPassword(unsigned long int pwd = 0xFFFFFFFF)
	{
		setPackagePID(command);				//package type
		setPacketLength(7);					//package size after address in Byte
		_dataPackage[9] = VfyPwd;			//setAcommand
     ef8:	83 e1       	ldi	r24, 0x13	; 19
     efa:	8b 87       	std	Y+11, r24	; 0x0b
			shift -= 8;
		}
	}
	void SetPassword(unsigned long int pwd = 0x00)
	{
		_dataPackage[10] = pwd >> 24;
     efc:	1c 86       	std	Y+12, r1	; 0x0c
		_dataPackage[11] = pwd >> 16;
     efe:	1d 86       	std	Y+13, r1	; 0x0d
		_dataPackage[12] = pwd >> 8;
     f00:	1e 86       	std	Y+14, r1	; 0x0e
		_dataPackage[13] = pwd;
     f02:	1f 86       	std	Y+15, r1	; 0x0f
		setup();
	}
	~FingerPrint(){}
	void setCheckSum(int sum, int index)
	{
		_dataPackage[index] = sum >> 8;
     f04:	18 8a       	std	Y+16, r1	; 0x10
		_dataPackage[index + 1] = sum;	
     f06:	8b e1       	ldi	r24, 0x1B	; 27
     f08:	89 8b       	std	Y+17, r24	; 0x11
     f0a:	9e 01       	movw	r18, r28
     f0c:	2e 5e       	subi	r18, 0xEE	; 238
     f0e:	3f 4f       	sbci	r19, 0xFF	; 255
     f10:	fe 01       	movw	r30, r28
     f12:	32 96       	adiw	r30, 0x02	; 2
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
     f14:	80 ec       	ldi	r24, 0xC0	; 192
     f16:	90 e0       	ldi	r25, 0x00	; 0
		UDR0 = data;
     f18:	66 ec       	ldi	r22, 0xC6	; 198
     f1a:	70 e0       	ldi	r23, 0x00	; 0
	}
	void sendPackage(int size)
{
	for (int i = 0; i < size; i++)
	{
		FingerPrintUart.UARTsend(_dataPackage[i]);
     f1c:	41 91       	ld	r20, Z+
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
     f1e:	dc 01       	movw	r26, r24
     f20:	5c 91       	ld	r21, X
     f22:	55 ff       	sbrs	r21, 5
     f24:	fc cf       	rjmp	.-8      	; 0xf1e <main+0xb8>
		UDR0 = data;
     f26:	db 01       	movw	r26, r22
     f28:	4c 93       	st	X, r20
		}
	return 0;
	}
	void sendPackage(int size)
{
	for (int i = 0; i < size; i++)
     f2a:	2e 17       	cp	r18, r30
     f2c:	3f 07       	cpc	r19, r31
     f2e:	b1 f7       	brne	.-20     	; 0xf1c <main+0xb6>
     f30:	be 01       	movw	r22, r28
     f32:	61 5d       	subi	r22, 0xD1	; 209
     f34:	7f 4f       	sbci	r23, 0xFF	; 255
     f36:	80 e0       	ldi	r24, 0x00	; 0
     f38:	90 e0       	ldi	r25, 0x00	; 0
		//UCSR0C = ((1<<UCSZ00)|(1<<UCSZ01));
		UCSR0C = (3<<UCSZ00);
	}
	char checkForData()
	{
		if (UCSR0A & (1<<RXC0))
     f3a:	e0 ec       	ldi	r30, 0xC0	; 192
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
		}
		return 0;
	}
	char getData()
	{
		return UDR0;
     f3e:	26 ec       	ldi	r18, 0xC6	; 198
     f40:	30 e0       	ldi	r19, 0x00	; 0
		//UCSR0C = ((1<<UCSZ00)|(1<<UCSZ01));
		UCSR0C = (3<<UCSZ00);
	}
	char checkForData()
	{
		if (UCSR0A & (1<<RXC0))
     f42:	40 81       	ld	r20, Z
			ackDataIndex++;
			*/
			/********************************need to test************************/
			//check if there is data, if so, receive the data
			//-This avoid the program from endless loop in wait for data
			if (FingerPrintUart.checkForData())
     f44:	44 23       	and	r20, r20
     f46:	44 f0       	brlt	.+16     	; 0xf58 <main+0xf2>
		//UCSR0C = ((1<<UCSZ00)|(1<<UCSZ01));
		UCSR0C = (3<<UCSZ00);
	}
	char checkForData()
	{
		if (UCSR0A & (1<<RXC0))
     f48:	40 81       	ld	r20, Z
			ackDataIndex++;
			*/
			/********************************need to test************************/
			//check if there is data, if so, receive the data
			//-This avoid the program from endless loop in wait for data
			if (FingerPrintUart.checkForData())
     f4a:	44 23       	and	r20, r20
     f4c:	2c f0       	brlt	.+10     	; 0xf58 <main+0xf2>
	}
	void getAckPackage(char ackPackSize = 12)
	{
		int ackDataIndex = 0;
		char ackData = 0;
		while(ackDataIndex < ackPackSize)
     f4e:	8c 30       	cpi	r24, 0x0C	; 12
     f50:	91 05       	cpc	r25, r1
     f52:	d4 f3       	brlt	.-12     	; 0xf48 <main+0xe2>
     f54:	0c 94 d0 14 	jmp	0x29a0	; 0x29a0 <main+0x1b3a>
		}
		return 0;
	}
	char getData()
	{
		return UDR0;
     f58:	d9 01       	movw	r26, r18
     f5a:	4c 91       	ld	r20, X
			//check if there is data, if so, receive the data
			//-This avoid the program from endless loop in wait for data
			if (FingerPrintUart.checkForData())
			{
				ackData = FingerPrintUart.getData();
				_ackPacket[ackDataIndex] = ackData;
     f5c:	db 01       	movw	r26, r22
     f5e:	4d 93       	st	X+, r20
     f60:	bd 01       	movw	r22, r26
				ackDataIndex++;
     f62:	01 96       	adiw	r24, 0x01	; 1
	}
	void getAckPackage(char ackPackSize = 12)
	{
		int ackDataIndex = 0;
		char ackData = 0;
		while(ackDataIndex < ackPackSize)
     f64:	8c 30       	cpi	r24, 0x0C	; 12
     f66:	91 05       	cpc	r25, r1
     f68:	61 f7       	brne	.-40     	; 0xf42 <main+0xdc>
     f6a:	0c 94 d0 14 	jmp	0x29a0	; 0x29a0 <main+0x1b3a>
				ackDataIndex++;
			}
		}
		for (int i = 0; i<ackPackSize;i++)
		{
			FingerPrintUart.UARTsend(_ackPacket[i]);
     f6e:	21 91       	ld	r18, Z+
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
     f70:	dc 01       	movw	r26, r24
     f72:	3c 91       	ld	r19, X
     f74:	35 ff       	sbrs	r19, 5
     f76:	fc cf       	rjmp	.-8      	; 0xf70 <main+0x10a>
		UDR0 = data;
     f78:	da 01       	movw	r26, r20
     f7a:	2c 93       	st	X, r18
				ackData = FingerPrintUart.getData();
				_ackPacket[ackDataIndex] = ackData;
				ackDataIndex++;
			}
		}
		for (int i = 0; i<ackPackSize;i++)
     f7c:	e4 15       	cp	r30, r4
     f7e:	f5 05       	cpc	r31, r5
     f80:	b1 f7       	brne	.-20     	; 0xf6e <main+0x108>
		setPacketLength(7);					//package size after address in Byte
		_dataPackage[9] = VfyPwd;			//setAcommand
		SetPassword();						//enter value, defult = 0x00000000
		setCheckSum(VfyPwd+command+0x07,14);//calculate sum of data after address
		sendAndGetAck(VfyPwd); //enter size of package to be sent
		return checkAckPackError(VfyPwd);
     f82:	63 e1       	ldi	r22, 0x13	; 19
     f84:	ce 01       	movw	r24, r28
     f86:	01 96       	adiw	r24, 0x01	; 1
     f88:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <_ZN11FingerPrint17checkAckPackErrorEc>
		_dataPackage[13] = pwd;
	}
	void setPackagePID(char PID = command)
	{
		//01H = command;  02H = DATA packet; 07H = Ack packet; 08H = End of DATA packet
		_dataPackage[6] = PID;
     f8c:	81 e0       	ldi	r24, 0x01	; 1
     f8e:	88 87       	std	Y+8, r24	; 0x08
	void setPacketLength(char length = 0x07)
	{
		//Refers to the length of package content (command packets and data packets)
		//plus the length of Checksum( 2 bytes)   !!!MAX is 256 Byte!!!
		/**** {07H} = 4byte Password, 1Byte IndecationCode (command), 2Byte CheckSum ****/
		_dataPackage[7] = 0;
     f90:	19 86       	std	Y+9, r1	; 0x09
		_dataPackage[8] = length;
     f92:	85 e0       	ldi	r24, 0x05	; 5
     f94:	8a 87       	std	Y+10, r24	; 0x0a
	}
	void setAcommand(commands commandValue)
	{
		_dataPackage[9] = commandValue;
     f96:	8e e0       	ldi	r24, 0x0E	; 14
     f98:	8b 87       	std	Y+11, r24	; 0x0b
	{
		//filing _dataPacket arr, index 0 to 5 is filled automatic by class contractor
		setPackagePID(command);   //1 = command  ;index 6
		setPacketLength(5);				//index 7,8
		setAcommand(SetSysPara);		//index 9
		_dataPackage[10] = parameterNum;
     f9a:	84 e0       	ldi	r24, 0x04	; 4
     f9c:	8c 87       	std	Y+12, r24	; 0x0c
		_dataPackage[11] = content;
     f9e:	86 e0       	ldi	r24, 0x06	; 6
     fa0:	8d 87       	std	Y+13, r24	; 0x0d
		setup();
	}
	~FingerPrint(){}
	void setCheckSum(int sum, int index)
	{
		_dataPackage[index] = sum >> 8;
     fa2:	1e 86       	std	Y+14, r1	; 0x0e
		_dataPackage[index + 1] = sum;	
     fa4:	8d e1       	ldi	r24, 0x1D	; 29
     fa6:	8f 87       	std	Y+15, r24	; 0x0f
     fa8:	8e 01       	movw	r16, r28
     faa:	00 5f       	subi	r16, 0xF0	; 240
     fac:	1f 4f       	sbci	r17, 0xFF	; 255
     fae:	fe 01       	movw	r30, r28
     fb0:	32 96       	adiw	r30, 0x02	; 2
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
     fb2:	80 ec       	ldi	r24, 0xC0	; 192
     fb4:	90 e0       	ldi	r25, 0x00	; 0
		UDR0 = data;
     fb6:	46 ec       	ldi	r20, 0xC6	; 198
     fb8:	50 e0       	ldi	r21, 0x00	; 0
	}
	void sendPackage(int size)
{
	for (int i = 0; i < size; i++)
	{
		FingerPrintUart.UARTsend(_dataPackage[i]);
     fba:	21 91       	ld	r18, Z+
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
     fbc:	dc 01       	movw	r26, r24
     fbe:	3c 91       	ld	r19, X
     fc0:	35 ff       	sbrs	r19, 5
     fc2:	fc cf       	rjmp	.-8      	; 0xfbc <main+0x156>
		UDR0 = data;
     fc4:	da 01       	movw	r26, r20
     fc6:	2c 93       	st	X, r18
		}
	return 0;
	}
	void sendPackage(int size)
{
	for (int i = 0; i < size; i++)
     fc8:	0e 17       	cp	r16, r30
     fca:	1f 07       	cpc	r17, r31
     fcc:	b1 f7       	brne	.-20     	; 0xfba <main+0x154>
     fce:	be 01       	movw	r22, r28
     fd0:	61 5d       	subi	r22, 0xD1	; 209
     fd2:	7f 4f       	sbci	r23, 0xFF	; 255
     fd4:	80 e0       	ldi	r24, 0x00	; 0
     fd6:	90 e0       	ldi	r25, 0x00	; 0
		//UCSR0C = ((1<<UCSZ00)|(1<<UCSZ01));
		UCSR0C = (3<<UCSZ00);
	}
	char checkForData()
	{
		if (UCSR0A & (1<<RXC0))
     fd8:	e0 ec       	ldi	r30, 0xC0	; 192
     fda:	f0 e0       	ldi	r31, 0x00	; 0
		}
		return 0;
	}
	char getData()
	{
		return UDR0;
     fdc:	26 ec       	ldi	r18, 0xC6	; 198
     fde:	30 e0       	ldi	r19, 0x00	; 0
		//UCSR0C = ((1<<UCSZ00)|(1<<UCSZ01));
		UCSR0C = (3<<UCSZ00);
	}
	char checkForData()
	{
		if (UCSR0A & (1<<RXC0))
     fe0:	40 81       	ld	r20, Z
			ackDataIndex++;
			*/
			/********************************need to test************************/
			//check if there is data, if so, receive the data
			//-This avoid the program from endless loop in wait for data
			if (FingerPrintUart.checkForData())
     fe2:	44 23       	and	r20, r20
     fe4:	44 f0       	brlt	.+16     	; 0xff6 <main+0x190>
		//UCSR0C = ((1<<UCSZ00)|(1<<UCSZ01));
		UCSR0C = (3<<UCSZ00);
	}
	char checkForData()
	{
		if (UCSR0A & (1<<RXC0))
     fe6:	40 81       	ld	r20, Z
			ackDataIndex++;
			*/
			/********************************need to test************************/
			//check if there is data, if so, receive the data
			//-This avoid the program from endless loop in wait for data
			if (FingerPrintUart.checkForData())
     fe8:	44 23       	and	r20, r20
     fea:	2c f0       	brlt	.+10     	; 0xff6 <main+0x190>
	}
	void getAckPackage(char ackPackSize = 12)
	{
		int ackDataIndex = 0;
		char ackData = 0;
		while(ackDataIndex < ackPackSize)
     fec:	8c 30       	cpi	r24, 0x0C	; 12
     fee:	91 05       	cpc	r25, r1
     ff0:	d4 f3       	brlt	.-12     	; 0xfe6 <main+0x180>
     ff2:	0c 94 dc 14 	jmp	0x29b8	; 0x29b8 <main+0x1b52>
		}
		return 0;
	}
	char getData()
	{
		return UDR0;
     ff6:	d9 01       	movw	r26, r18
     ff8:	4c 91       	ld	r20, X
			//check if there is data, if so, receive the data
			//-This avoid the program from endless loop in wait for data
			if (FingerPrintUart.checkForData())
			{
				ackData = FingerPrintUart.getData();
				_ackPacket[ackDataIndex] = ackData;
     ffa:	db 01       	movw	r26, r22
     ffc:	4d 93       	st	X+, r20
     ffe:	bd 01       	movw	r22, r26
				ackDataIndex++;
    1000:	01 96       	adiw	r24, 0x01	; 1
	}
	void getAckPackage(char ackPackSize = 12)
	{
		int ackDataIndex = 0;
		char ackData = 0;
		while(ackDataIndex < ackPackSize)
    1002:	8c 30       	cpi	r24, 0x0C	; 12
    1004:	91 05       	cpc	r25, r1
    1006:	61 f7       	brne	.-40     	; 0xfe0 <main+0x17a>
    1008:	0c 94 dc 14 	jmp	0x29b8	; 0x29b8 <main+0x1b52>
				ackDataIndex++;
			}
		}
		for (int i = 0; i<ackPackSize;i++)
		{
			FingerPrintUart.UARTsend(_ackPacket[i]);
    100c:	21 91       	ld	r18, Z+
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
    100e:	dc 01       	movw	r26, r24
    1010:	3c 91       	ld	r19, X
    1012:	35 ff       	sbrs	r19, 5
    1014:	fc cf       	rjmp	.-8      	; 0x100e <main+0x1a8>
		UDR0 = data;
    1016:	da 01       	movw	r26, r20
    1018:	2c 93       	st	X, r18
				ackData = FingerPrintUart.getData();
				_ackPacket[ackDataIndex] = ackData;
				ackDataIndex++;
			}
		}
		for (int i = 0; i<ackPackSize;i++)
    101a:	e4 15       	cp	r30, r4
    101c:	f5 05       	cpc	r31, r5
    101e:	b1 f7       	brne	.-20     	; 0x100c <main+0x1a6>
		_delay_ms(220);
		verifyPassword();
			
		setSystem(4,baud/9600); //set baud rate
		sendAndGetAck(SetSysPara);
		checkAckPackError(SetSysPara);
    1020:	6e e0       	ldi	r22, 0x0E	; 14
    1022:	ce 01       	movw	r24, r28
    1024:	01 96       	adiw	r24, 0x01	; 1
    1026:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <_ZN11FingerPrint17checkAckPackErrorEc>
		_dataPackage[13] = pwd;
	}
	void setPackagePID(char PID = command)
	{
		//01H = command;  02H = DATA packet; 07H = Ack packet; 08H = End of DATA packet
		_dataPackage[6] = PID;
    102a:	81 e0       	ldi	r24, 0x01	; 1
    102c:	88 87       	std	Y+8, r24	; 0x08
	void setPacketLength(char length = 0x07)
	{
		//Refers to the length of package content (command packets and data packets)
		//plus the length of Checksum( 2 bytes)   !!!MAX is 256 Byte!!!
		/**** {07H} = 4byte Password, 1Byte IndecationCode (command), 2Byte CheckSum ****/
		_dataPackage[7] = 0;
    102e:	19 86       	std	Y+9, r1	; 0x09
		_dataPackage[8] = length;
    1030:	95 e0       	ldi	r25, 0x05	; 5
    1032:	9a 87       	std	Y+10, r25	; 0x0a
	}
	void setAcommand(commands commandValue)
	{
		_dataPackage[9] = commandValue;
    1034:	2e e0       	ldi	r18, 0x0E	; 14
    1036:	2b 87       	std	Y+11, r18	; 0x0b
	{
		//filing _dataPacket arr, index 0 to 5 is filled automatic by class contractor
		setPackagePID(command);   //1 = command  ;index 6
		setPacketLength(5);				//index 7,8
		setAcommand(SetSysPara);		//index 9
		_dataPackage[10] = parameterNum;
    1038:	9c 87       	std	Y+12, r25	; 0x0c
		_dataPackage[11] = content;
    103a:	8d 87       	std	Y+13, r24	; 0x0d
		setup();
	}
	~FingerPrint(){}
	void setCheckSum(int sum, int index)
	{
		_dataPackage[index] = sum >> 8;
    103c:	1e 86       	std	Y+14, r1	; 0x0e
		_dataPackage[index + 1] = sum;	
    103e:	89 e1       	ldi	r24, 0x19	; 25
    1040:	8f 87       	std	Y+15, r24	; 0x0f
    1042:	fe 01       	movw	r30, r28
    1044:	32 96       	adiw	r30, 0x02	; 2
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
    1046:	80 ec       	ldi	r24, 0xC0	; 192
    1048:	90 e0       	ldi	r25, 0x00	; 0
		UDR0 = data;
    104a:	46 ec       	ldi	r20, 0xC6	; 198
    104c:	50 e0       	ldi	r21, 0x00	; 0
	}
	void sendPackage(int size)
{
	for (int i = 0; i < size; i++)
	{
		FingerPrintUart.UARTsend(_dataPackage[i]);
    104e:	21 91       	ld	r18, Z+
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
    1050:	dc 01       	movw	r26, r24
    1052:	3c 91       	ld	r19, X
    1054:	35 ff       	sbrs	r19, 5
    1056:	fc cf       	rjmp	.-8      	; 0x1050 <main+0x1ea>
		UDR0 = data;
    1058:	da 01       	movw	r26, r20
    105a:	2c 93       	st	X, r18
		}
	return 0;
	}
	void sendPackage(int size)
{
	for (int i = 0; i < size; i++)
    105c:	0e 17       	cp	r16, r30
    105e:	1f 07       	cpc	r17, r31
    1060:	b1 f7       	brne	.-20     	; 0x104e <main+0x1e8>
    1062:	be 01       	movw	r22, r28
    1064:	61 5d       	subi	r22, 0xD1	; 209
    1066:	7f 4f       	sbci	r23, 0xFF	; 255
    1068:	80 e0       	ldi	r24, 0x00	; 0
    106a:	90 e0       	ldi	r25, 0x00	; 0
		//UCSR0C = ((1<<UCSZ00)|(1<<UCSZ01));
		UCSR0C = (3<<UCSZ00);
	}
	char checkForData()
	{
		if (UCSR0A & (1<<RXC0))
    106c:	e0 ec       	ldi	r30, 0xC0	; 192
    106e:	f0 e0       	ldi	r31, 0x00	; 0
		}
		return 0;
	}
	char getData()
	{
		return UDR0;
    1070:	26 ec       	ldi	r18, 0xC6	; 198
    1072:	30 e0       	ldi	r19, 0x00	; 0
		//UCSR0C = ((1<<UCSZ00)|(1<<UCSZ01));
		UCSR0C = (3<<UCSZ00);
	}
	char checkForData()
	{
		if (UCSR0A & (1<<RXC0))
    1074:	40 81       	ld	r20, Z
			ackDataIndex++;
			*/
			/********************************need to test************************/
			//check if there is data, if so, receive the data
			//-This avoid the program from endless loop in wait for data
			if (FingerPrintUart.checkForData())
    1076:	44 23       	and	r20, r20
    1078:	44 f0       	brlt	.+16     	; 0x108a <main+0x224>
		//UCSR0C = ((1<<UCSZ00)|(1<<UCSZ01));
		UCSR0C = (3<<UCSZ00);
	}
	char checkForData()
	{
		if (UCSR0A & (1<<RXC0))
    107a:	40 81       	ld	r20, Z
			ackDataIndex++;
			*/
			/********************************need to test************************/
			//check if there is data, if so, receive the data
			//-This avoid the program from endless loop in wait for data
			if (FingerPrintUart.checkForData())
    107c:	44 23       	and	r20, r20
    107e:	2c f0       	brlt	.+10     	; 0x108a <main+0x224>
	}
	void getAckPackage(char ackPackSize = 12)
	{
		int ackDataIndex = 0;
		char ackData = 0;
		while(ackDataIndex < ackPackSize)
    1080:	8c 30       	cpi	r24, 0x0C	; 12
    1082:	91 05       	cpc	r25, r1
    1084:	d4 f3       	brlt	.-12     	; 0x107a <main+0x214>
    1086:	0c 94 e4 14 	jmp	0x29c8	; 0x29c8 <main+0x1b62>
		}
		return 0;
	}
	char getData()
	{
		return UDR0;
    108a:	d9 01       	movw	r26, r18
    108c:	4c 91       	ld	r20, X
			//check if there is data, if so, receive the data
			//-This avoid the program from endless loop in wait for data
			if (FingerPrintUart.checkForData())
			{
				ackData = FingerPrintUart.getData();
				_ackPacket[ackDataIndex] = ackData;
    108e:	db 01       	movw	r26, r22
    1090:	4d 93       	st	X+, r20
    1092:	bd 01       	movw	r22, r26
				ackDataIndex++;
    1094:	01 96       	adiw	r24, 0x01	; 1
	}
	void getAckPackage(char ackPackSize = 12)
	{
		int ackDataIndex = 0;
		char ackData = 0;
		while(ackDataIndex < ackPackSize)
    1096:	8c 30       	cpi	r24, 0x0C	; 12
    1098:	91 05       	cpc	r25, r1
    109a:	61 f7       	brne	.-40     	; 0x1074 <main+0x20e>
    109c:	0c 94 e4 14 	jmp	0x29c8	; 0x29c8 <main+0x1b62>
				ackDataIndex++;
			}
		}
		for (int i = 0; i<ackPackSize;i++)
		{
			FingerPrintUart.UARTsend(_ackPacket[i]);
    10a0:	21 91       	ld	r18, Z+
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
    10a2:	dc 01       	movw	r26, r24
    10a4:	3c 91       	ld	r19, X
    10a6:	35 ff       	sbrs	r19, 5
    10a8:	fc cf       	rjmp	.-8      	; 0x10a2 <main+0x23c>
		UDR0 = data;
    10aa:	da 01       	movw	r26, r20
    10ac:	2c 93       	st	X, r18
				ackData = FingerPrintUart.getData();
				_ackPacket[ackDataIndex] = ackData;
				ackDataIndex++;
			}
		}
		for (int i = 0; i<ackPackSize;i++)
    10ae:	e4 15       	cp	r30, r4
    10b0:	f5 05       	cpc	r31, r5
    10b2:	b1 f7       	brne	.-20     	; 0x10a0 <main+0x23a>
		sendAndGetAck(SetSysPara);
		checkAckPackError(SetSysPara);
			
		setSystem(5,securityLevel); //set the level of compare fingerprint 1 to 5, while 1 is highest
		sendAndGetAck(SetSysPara);
		checkAckPackError(SetSysPara);
    10b4:	6e e0       	ldi	r22, 0x0E	; 14
    10b6:	ce 01       	movw	r24, r28
    10b8:	01 96       	adiw	r24, 0x01	; 1
    10ba:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <_ZN11FingerPrint17checkAckPackErrorEc>
		_dataPackage[13] = pwd;
	}
	void setPackagePID(char PID = command)
	{
		//01H = command;  02H = DATA packet; 07H = Ack packet; 08H = End of DATA packet
		_dataPackage[6] = PID;
    10be:	81 e0       	ldi	r24, 0x01	; 1
    10c0:	88 87       	std	Y+8, r24	; 0x08
	void setPacketLength(char length = 0x07)
	{
		//Refers to the length of package content (command packets and data packets)
		//plus the length of Checksum( 2 bytes)   !!!MAX is 256 Byte!!!
		/**** {07H} = 4byte Password, 1Byte IndecationCode (command), 2Byte CheckSum ****/
		_dataPackage[7] = 0;
    10c2:	19 86       	std	Y+9, r1	; 0x09
		_dataPackage[8] = length;
    10c4:	85 e0       	ldi	r24, 0x05	; 5
    10c6:	8a 87       	std	Y+10, r24	; 0x0a
	}
	void setAcommand(commands commandValue)
	{
		_dataPackage[9] = commandValue;
    10c8:	8e e0       	ldi	r24, 0x0E	; 14
    10ca:	8b 87       	std	Y+11, r24	; 0x0b
	{
		//filing _dataPacket arr, index 0 to 5 is filled automatic by class contractor
		setPackagePID(command);   //1 = command  ;index 6
		setPacketLength(5);				//index 7,8
		setAcommand(SetSysPara);		//index 9
		_dataPackage[10] = parameterNum;
    10cc:	86 e0       	ldi	r24, 0x06	; 6
    10ce:	8c 87       	std	Y+12, r24	; 0x0c
		_dataPackage[11] = content;
    10d0:	1d 86       	std	Y+13, r1	; 0x0d
		setup();
	}
	~FingerPrint(){}
	void setCheckSum(int sum, int index)
	{
		_dataPackage[index] = sum >> 8;
    10d2:	1e 86       	std	Y+14, r1	; 0x0e
		_dataPackage[index + 1] = sum;	
    10d4:	89 e1       	ldi	r24, 0x19	; 25
    10d6:	8f 87       	std	Y+15, r24	; 0x0f
    10d8:	fe 01       	movw	r30, r28
    10da:	32 96       	adiw	r30, 0x02	; 2
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
    10dc:	80 ec       	ldi	r24, 0xC0	; 192
    10de:	90 e0       	ldi	r25, 0x00	; 0
		UDR0 = data;
    10e0:	46 ec       	ldi	r20, 0xC6	; 198
    10e2:	50 e0       	ldi	r21, 0x00	; 0
	}
	void sendPackage(int size)
{
	for (int i = 0; i < size; i++)
	{
		FingerPrintUart.UARTsend(_dataPackage[i]);
    10e4:	21 91       	ld	r18, Z+
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
    10e6:	dc 01       	movw	r26, r24
    10e8:	3c 91       	ld	r19, X
    10ea:	35 ff       	sbrs	r19, 5
    10ec:	fc cf       	rjmp	.-8      	; 0x10e6 <main+0x280>
		UDR0 = data;
    10ee:	da 01       	movw	r26, r20
    10f0:	2c 93       	st	X, r18
		}
	return 0;
	}
	void sendPackage(int size)
{
	for (int i = 0; i < size; i++)
    10f2:	0e 17       	cp	r16, r30
    10f4:	1f 07       	cpc	r17, r31
    10f6:	b1 f7       	brne	.-20     	; 0x10e4 <main+0x27e>
    10f8:	be 01       	movw	r22, r28
    10fa:	61 5d       	subi	r22, 0xD1	; 209
    10fc:	7f 4f       	sbci	r23, 0xFF	; 255
    10fe:	80 e0       	ldi	r24, 0x00	; 0
    1100:	90 e0       	ldi	r25, 0x00	; 0
		//UCSR0C = ((1<<UCSZ00)|(1<<UCSZ01));
		UCSR0C = (3<<UCSZ00);
	}
	char checkForData()
	{
		if (UCSR0A & (1<<RXC0))
    1102:	e0 ec       	ldi	r30, 0xC0	; 192
    1104:	f0 e0       	ldi	r31, 0x00	; 0
		}
		return 0;
	}
	char getData()
	{
		return UDR0;
    1106:	26 ec       	ldi	r18, 0xC6	; 198
    1108:	30 e0       	ldi	r19, 0x00	; 0
		//UCSR0C = ((1<<UCSZ00)|(1<<UCSZ01));
		UCSR0C = (3<<UCSZ00);
	}
	char checkForData()
	{
		if (UCSR0A & (1<<RXC0))
    110a:	40 81       	ld	r20, Z
			ackDataIndex++;
			*/
			/********************************need to test************************/
			//check if there is data, if so, receive the data
			//-This avoid the program from endless loop in wait for data
			if (FingerPrintUart.checkForData())
    110c:	44 23       	and	r20, r20
    110e:	44 f0       	brlt	.+16     	; 0x1120 <main+0x2ba>
		//UCSR0C = ((1<<UCSZ00)|(1<<UCSZ01));
		UCSR0C = (3<<UCSZ00);
	}
	char checkForData()
	{
		if (UCSR0A & (1<<RXC0))
    1110:	40 81       	ld	r20, Z
			ackDataIndex++;
			*/
			/********************************need to test************************/
			//check if there is data, if so, receive the data
			//-This avoid the program from endless loop in wait for data
			if (FingerPrintUart.checkForData())
    1112:	44 23       	and	r20, r20
    1114:	2c f0       	brlt	.+10     	; 0x1120 <main+0x2ba>
	}
	void getAckPackage(char ackPackSize = 12)
	{
		int ackDataIndex = 0;
		char ackData = 0;
		while(ackDataIndex < ackPackSize)
    1116:	8c 30       	cpi	r24, 0x0C	; 12
    1118:	91 05       	cpc	r25, r1
    111a:	d4 f3       	brlt	.-12     	; 0x1110 <main+0x2aa>
    111c:	0c 94 ec 14 	jmp	0x29d8	; 0x29d8 <main+0x1b72>
		}
		return 0;
	}
	char getData()
	{
		return UDR0;
    1120:	d9 01       	movw	r26, r18
    1122:	4c 91       	ld	r20, X
			//check if there is data, if so, receive the data
			//-This avoid the program from endless loop in wait for data
			if (FingerPrintUart.checkForData())
			{
				ackData = FingerPrintUart.getData();
				_ackPacket[ackDataIndex] = ackData;
    1124:	db 01       	movw	r26, r22
    1126:	4d 93       	st	X+, r20
    1128:	bd 01       	movw	r22, r26
				ackDataIndex++;
    112a:	01 96       	adiw	r24, 0x01	; 1
	}
	void getAckPackage(char ackPackSize = 12)
	{
		int ackDataIndex = 0;
		char ackData = 0;
		while(ackDataIndex < ackPackSize)
    112c:	8c 30       	cpi	r24, 0x0C	; 12
    112e:	91 05       	cpc	r25, r1
    1130:	61 f7       	brne	.-40     	; 0x110a <main+0x2a4>
    1132:	0c 94 ec 14 	jmp	0x29d8	; 0x29d8 <main+0x1b72>
				ackDataIndex++;
			}
		}
		for (int i = 0; i<ackPackSize;i++)
		{
			FingerPrintUart.UARTsend(_ackPacket[i]);
    1136:	21 91       	ld	r18, Z+
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
    1138:	dc 01       	movw	r26, r24
    113a:	3c 91       	ld	r19, X
    113c:	35 ff       	sbrs	r19, 5
    113e:	fc cf       	rjmp	.-8      	; 0x1138 <main+0x2d2>
		UDR0 = data;
    1140:	da 01       	movw	r26, r20
    1142:	2c 93       	st	X, r18
				ackData = FingerPrintUart.getData();
				_ackPacket[ackDataIndex] = ackData;
				ackDataIndex++;
			}
		}
		for (int i = 0; i<ackPackSize;i++)
    1144:	e4 15       	cp	r30, r4
    1146:	f5 05       	cpc	r31, r5
    1148:	b1 f7       	brne	.-20     	; 0x1136 <main+0x2d0>
		sendAndGetAck(SetSysPara);
		checkAckPackError(SetSysPara);
			
		setSystem(6,packMaxLength); //length 0=32, 1=64, 2=128, 3=256 (Byte)
		sendAndGetAck(SetSysPara);
		checkAckPackError(SetSysPara);	
    114a:	6e e0       	ldi	r22, 0x0E	; 14
    114c:	ce 01       	movw	r24, r28
    114e:	01 96       	adiw	r24, 0x01	; 1
    1150:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <_ZN11FingerPrint17checkAckPackErrorEc>
    1154:	6e 01       	movw	r12, r28
    1156:	be e0       	ldi	r27, 0x0E	; 14
    1158:	cb 0e       	add	r12, r27
    115a:	d1 1c       	adc	r13, r1
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
    115c:	00 ec       	ldi	r16, 0xC0	; 192
    115e:	10 e0       	ldi	r17, 0x00	; 0
		UDR0 = data;
    1160:	0f 2e       	mov	r0, r31
    1162:	f6 ec       	ldi	r31, 0xC6	; 198
    1164:	ef 2e       	mov	r14, r31
    1166:	f1 2c       	mov	r15, r1
    1168:	f0 2d       	mov	r31, r0
    116a:	4e 01       	movw	r8, r28
    116c:	ef e0       	ldi	r30, 0x0F	; 15
    116e:	8e 0e       	add	r8, r30
    1170:	91 1c       	adc	r9, r1
    1172:	3e 01       	movw	r6, r28
    1174:	f1 e1       	ldi	r31, 0x11	; 17
    1176:	6f 0e       	add	r6, r31
    1178:	71 1c       	adc	r7, r1
		_dataPackage[13] = pwd;
	}
	void setPackagePID(char PID = command)
	{
		//01H = command;  02H = DATA packet; 07H = Ack packet; 08H = End of DATA packet
		_dataPackage[6] = PID;
    117a:	81 e0       	ldi	r24, 0x01	; 1
    117c:	88 87       	std	Y+8, r24	; 0x08
	void setPacketLength(char length = 0x07)
	{
		//Refers to the length of package content (command packets and data packets)
		//plus the length of Checksum( 2 bytes)   !!!MAX is 256 Byte!!!
		/**** {07H} = 4byte Password, 1Byte IndecationCode (command), 2Byte CheckSum ****/
		_dataPackage[7] = 0;
    117e:	19 86       	std	Y+9, r1	; 0x09
		_dataPackage[8] = length;
    1180:	93 e0       	ldi	r25, 0x03	; 3
    1182:	9a 87       	std	Y+10, r25	; 0x0a
	}
	void setAcommand(commands commandValue)
	{
		_dataPackage[9] = commandValue;
    1184:	8b 87       	std	Y+11, r24	; 0x0b
		setup();
	}
	~FingerPrint(){}
	void setCheckSum(int sum, int index)
	{
		_dataPackage[index] = sum >> 8;
    1186:	1c 86       	std	Y+12, r1	; 0x0c
		_dataPackage[index + 1] = sum;	
    1188:	85 e0       	ldi	r24, 0x05	; 5
    118a:	8d 87       	std	Y+13, r24	; 0x0d
    118c:	16 01       	movw	r2, r12
    118e:	fe 01       	movw	r30, r28
    1190:	32 96       	adiw	r30, 0x02	; 2
	}
	void sendPackage(int size)
{
	for (int i = 0; i < size; i++)
	{
		FingerPrintUart.UARTsend(_dataPackage[i]);
    1192:	81 91       	ld	r24, Z+
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
    1194:	d8 01       	movw	r26, r16
    1196:	9c 91       	ld	r25, X
    1198:	95 ff       	sbrs	r25, 5
    119a:	fc cf       	rjmp	.-8      	; 0x1194 <main+0x32e>
		UDR0 = data;
    119c:	d7 01       	movw	r26, r14
    119e:	8c 93       	st	X, r24
		}
	return 0;
	}
	void sendPackage(int size)
{
	for (int i = 0; i < size; i++)
    11a0:	ec 15       	cp	r30, r12
    11a2:	fd 05       	cpc	r31, r13
    11a4:	b1 f7       	brne	.-20     	; 0x1192 <main+0x32c>
    11a6:	fe 01       	movw	r30, r28
    11a8:	bf 96       	adiw	r30, 0x2f	; 47
    11aa:	80 e0       	ldi	r24, 0x00	; 0
    11ac:	90 e0       	ldi	r25, 0x00	; 0
		//UCSR0C = ((1<<UCSZ00)|(1<<UCSZ01));
		UCSR0C = (3<<UCSZ00);
	}
	char checkForData()
	{
		if (UCSR0A & (1<<RXC0))
    11ae:	d8 01       	movw	r26, r16
    11b0:	2c 91       	ld	r18, X
			ackDataIndex++;
			*/
			/********************************need to test************************/
			//check if there is data, if so, receive the data
			//-This avoid the program from endless loop in wait for data
			if (FingerPrintUart.checkForData())
    11b2:	22 23       	and	r18, r18
    11b4:	4c f0       	brlt	.+18     	; 0x11c8 <main+0x362>
		//UCSR0C = ((1<<UCSZ00)|(1<<UCSZ01));
		UCSR0C = (3<<UCSZ00);
	}
	char checkForData()
	{
		if (UCSR0A & (1<<RXC0))
    11b6:	d8 01       	movw	r26, r16
    11b8:	2c 91       	ld	r18, X
			ackDataIndex++;
			*/
			/********************************need to test************************/
			//check if there is data, if so, receive the data
			//-This avoid the program from endless loop in wait for data
			if (FingerPrintUart.checkForData())
    11ba:	22 23       	and	r18, r18
    11bc:	2c f0       	brlt	.+10     	; 0x11c8 <main+0x362>
	}
	void getAckPackage(char ackPackSize = 12)
	{
		int ackDataIndex = 0;
		char ackData = 0;
		while(ackDataIndex < ackPackSize)
    11be:	8c 30       	cpi	r24, 0x0C	; 12
    11c0:	91 05       	cpc	r25, r1
    11c2:	cc f3       	brlt	.-14     	; 0x11b6 <main+0x350>
    11c4:	0c 94 f4 14 	jmp	0x29e8	; 0x29e8 <main+0x1b82>
		}
		return 0;
	}
	char getData()
	{
		return UDR0;
    11c8:	d7 01       	movw	r26, r14
    11ca:	2c 91       	ld	r18, X
			//check if there is data, if so, receive the data
			//-This avoid the program from endless loop in wait for data
			if (FingerPrintUart.checkForData())
			{
				ackData = FingerPrintUart.getData();
				_ackPacket[ackDataIndex] = ackData;
    11cc:	21 93       	st	Z+, r18
				ackDataIndex++;
    11ce:	01 96       	adiw	r24, 0x01	; 1
	}
	void getAckPackage(char ackPackSize = 12)
	{
		int ackDataIndex = 0;
		char ackData = 0;
		while(ackDataIndex < ackPackSize)
    11d0:	8c 30       	cpi	r24, 0x0C	; 12
    11d2:	91 05       	cpc	r25, r1
    11d4:	61 f7       	brne	.-40     	; 0x11ae <main+0x348>
    11d6:	0c 94 f4 14 	jmp	0x29e8	; 0x29e8 <main+0x1b82>
				ackDataIndex++;
			}
		}
		for (int i = 0; i<ackPackSize;i++)
		{
			FingerPrintUart.UARTsend(_ackPacket[i]);
    11da:	81 91       	ld	r24, Z+
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
    11dc:	d8 01       	movw	r26, r16
    11de:	9c 91       	ld	r25, X
    11e0:	95 ff       	sbrs	r25, 5
    11e2:	fc cf       	rjmp	.-8      	; 0x11dc <main+0x376>
		UDR0 = data;
    11e4:	d7 01       	movw	r26, r14
    11e6:	8c 93       	st	X, r24
				ackData = FingerPrintUart.getData();
				_ackPacket[ackDataIndex] = ackData;
				ackDataIndex++;
			}
		}
		for (int i = 0; i<ackPackSize;i++)
    11e8:	e4 15       	cp	r30, r4
    11ea:	f5 05       	cpc	r31, r5
    11ec:	b1 f7       	brne	.-20     	; 0x11da <main+0x374>
    11ee:	0c 94 f8 14 	jmp	0x29f0	; 0x29f0 <main+0x1b8a>
		{
			confIndex = packSize - 2;
		}
		for (int i = 0; i < packSize;i++)
		{
			while(_ackPacket[i] != 0xEF && i < packSize)
    11f2:	8c 30       	cpi	r24, 0x0C	; 12
    11f4:	91 05       	cpc	r25, r1
    11f6:	11 f4       	brne	.+4      	; 0x11fc <main+0x396>
    11f8:	0c 94 03 15 	jmp	0x2a06	; 0x2a06 <main+0x1ba0>
			{
				i++;
    11fc:	01 96       	adiw	r24, 0x01	; 1
		{
			confIndex = packSize - 2;
		}
		for (int i = 0; i < packSize;i++)
		{
			while(_ackPacket[i] != 0xEF && i < packSize)
    11fe:	21 91       	ld	r18, Z+
    1200:	2f 3e       	cpi	r18, 0xEF	; 239
    1202:	b9 f7       	brne	.-18     	; 0x11f2 <main+0x38c>
    1204:	0c 94 03 15 	jmp	0x2a06	; 0x2a06 <main+0x1ba0>
	}
	bool checkAckPackError(char cmd)
	{
		int confCodeIndex = (int)getAckPackConfirmCodeIndex(cmd);
		char confCode = _ackPacket[confCodeIndex - 1];
		switch(confCode)
    1208:	88 ad       	ldd	r24, Y+56	; 0x38
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	8a 31       	cpi	r24, 0x1A	; 26
    120e:	91 05       	cpc	r25, r1
    1210:	08 f0       	brcs	.+2      	; 0x1214 <main+0x3ae>
    1212:	b3 cf       	rjmp	.-154    	; 0x117a <main+0x314>
    1214:	fc 01       	movw	r30, r24
    1216:	e3 57       	subi	r30, 0x73	; 115
    1218:	fe 4f       	sbci	r31, 0xFE	; 254
    121a:	0c 94 fb 15 	jmp	0x2bf6	; 0x2bf6 <__tablejump2__>
		}
		return 0;
	}
	bool checkAckPackError(char cmd)
	{
		int confCodeIndex = (int)getAckPackConfirmCodeIndex(cmd);
    121e:	8a e0       	ldi	r24, 0x0A	; 10
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	0f 2e       	mov	r0, r31
    1224:	f5 e0       	ldi	r31, 0x05	; 5
    1226:	af 2e       	mov	r10, r31
    1228:	b1 2c       	mov	r11, r1
    122a:	f0 2d       	mov	r31, r0
	bool reSendPack(int confIndex, int cmd ,int reTryTimes = 1)
	{
		for (int i = 0; i < reTryTimes; i++)
		{
			sendAndGetAck(cmd);
			if (_ackPacket[confIndex] == 0)
    122c:	ef e2       	ldi	r30, 0x2F	; 47
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	ec 0f       	add	r30, r28
    1232:	fd 1f       	adc	r31, r29
    1234:	e8 0f       	add	r30, r24
    1236:	f9 1f       	adc	r31, r25
    1238:	ca 53       	subi	r28, 0x3A	; 58
    123a:	df 4f       	sbci	r29, 0xFF	; 255
    123c:	f9 83       	std	Y+1, r31	; 0x01
    123e:	e8 83       	st	Y, r30
    1240:	c6 5c       	subi	r28, 0xC6	; 198
    1242:	d0 40       	sbci	r29, 0x00	; 0
    1244:	77 c0       	rjmp	.+238    	; 0x1334 <main+0x4ce>
		}
		return 0;
	}
	bool checkAckPackError(char cmd)
	{
		int confCodeIndex = (int)getAckPackConfirmCodeIndex(cmd);
    1246:	8a e0       	ldi	r24, 0x0A	; 10
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	68 94       	set
    124c:	aa 24       	eor	r10, r10
    124e:	a2 f8       	bld	r10, 2
    1250:	b1 2c       	mov	r11, r1
	bool reSendPack(int confIndex, int cmd ,int reTryTimes = 1)
	{
		for (int i = 0; i < reTryTimes; i++)
		{
			sendAndGetAck(cmd);
			if (_ackPacket[confIndex] == 0)
    1252:	2f e2       	ldi	r18, 0x2F	; 47
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	2c 0f       	add	r18, r28
    1258:	3d 1f       	adc	r19, r29
    125a:	28 0f       	add	r18, r24
    125c:	39 1f       	adc	r19, r25
    125e:	ca 53       	subi	r28, 0x3A	; 58
    1260:	df 4f       	sbci	r29, 0xFF	; 255
    1262:	39 83       	std	Y+1, r19	; 0x01
    1264:	28 83       	st	Y, r18
    1266:	c6 5c       	subi	r28, 0xC6	; 198
    1268:	d0 40       	sbci	r29, 0x00	; 0
    126a:	50 c0       	rjmp	.+160    	; 0x130c <main+0x4a6>
		}
		return 0;
	}
	bool checkAckPackError(char cmd)
	{
		int confCodeIndex = (int)getAckPackConfirmCodeIndex(cmd);
    126c:	8a e0       	ldi	r24, 0x0A	; 10
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	0f 2e       	mov	r0, r31
    1272:	f3 e0       	ldi	r31, 0x03	; 3
    1274:	af 2e       	mov	r10, r31
    1276:	b1 2c       	mov	r11, r1
    1278:	f0 2d       	mov	r31, r0
	bool reSendPack(int confIndex, int cmd ,int reTryTimes = 1)
	{
		for (int i = 0; i < reTryTimes; i++)
		{
			sendAndGetAck(cmd);
			if (_ackPacket[confIndex] == 0)
    127a:	4f e2       	ldi	r20, 0x2F	; 47
    127c:	50 e0       	ldi	r21, 0x00	; 0
    127e:	4c 0f       	add	r20, r28
    1280:	5d 1f       	adc	r21, r29
    1282:	48 0f       	add	r20, r24
    1284:	59 1f       	adc	r21, r25
    1286:	ca 53       	subi	r28, 0x3A	; 58
    1288:	df 4f       	sbci	r29, 0xFF	; 255
    128a:	59 83       	std	Y+1, r21	; 0x01
    128c:	48 83       	st	Y, r20
    128e:	c6 5c       	subi	r28, 0xC6	; 198
    1290:	d0 40       	sbci	r29, 0x00	; 0
    1292:	28 c0       	rjmp	.+80     	; 0x12e4 <main+0x47e>
		}
		return 0;
	}
	bool checkAckPackError(char cmd)
	{
		int confCodeIndex = (int)getAckPackConfirmCodeIndex(cmd);
    1294:	8a e0       	ldi	r24, 0x0A	; 10
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	0f 2e       	mov	r0, r31
    129a:	f5 e0       	ldi	r31, 0x05	; 5
    129c:	af 2e       	mov	r10, r31
    129e:	b1 2c       	mov	r11, r1
    12a0:	f0 2d       	mov	r31, r0
	bool reSendPack(int confIndex, int cmd ,int reTryTimes = 1)
	{
		for (int i = 0; i < reTryTimes; i++)
		{
			sendAndGetAck(cmd);
			if (_ackPacket[confIndex] == 0)
    12a2:	6f e2       	ldi	r22, 0x2F	; 47
    12a4:	70 e0       	ldi	r23, 0x00	; 0
    12a6:	6c 0f       	add	r22, r28
    12a8:	7d 1f       	adc	r23, r29
    12aa:	68 0f       	add	r22, r24
    12ac:	79 1f       	adc	r23, r25
    12ae:	ca 53       	subi	r28, 0x3A	; 58
    12b0:	df 4f       	sbci	r29, 0xFF	; 255
    12b2:	79 83       	std	Y+1, r23	; 0x01
    12b4:	68 83       	st	Y, r22
    12b6:	c6 5c       	subi	r28, 0xC6	; 198
    12b8:	d0 40       	sbci	r29, 0x00	; 0
	}
	bool reSendPack(int confIndex, int cmd ,int reTryTimes = 1)
	{
		for (int i = 0; i < reTryTimes; i++)
		{
			sendAndGetAck(cmd);
    12ba:	61 e0       	ldi	r22, 0x01	; 1
    12bc:	70 e0       	ldi	r23, 0x00	; 0
    12be:	ce 01       	movw	r24, r28
    12c0:	01 96       	adiw	r24, 0x01	; 1
    12c2:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <_ZN11FingerPrint13sendAndGetAckEi>
			if (_ackPacket[confIndex] == 0)
    12c6:	ca 53       	subi	r28, 0x3A	; 58
    12c8:	df 4f       	sbci	r29, 0xFF	; 255
    12ca:	a8 81       	ld	r26, Y
    12cc:	b9 81       	ldd	r27, Y+1	; 0x01
    12ce:	c6 5c       	subi	r28, 0xC6	; 198
    12d0:	d0 40       	sbci	r29, 0x00	; 0
    12d2:	8c 91       	ld	r24, X
    12d4:	88 23       	and	r24, r24
    12d6:	09 f4       	brne	.+2      	; 0x12da <main+0x474>
    12d8:	41 c0       	rjmp	.+130    	; 0x135c <main+0x4f6>
    12da:	b1 e0       	ldi	r27, 0x01	; 1
    12dc:	ab 1a       	sub	r10, r27
    12de:	b1 08       	sbc	r11, r1
		}
		return confIndex;
	}
	bool reSendPack(int confIndex, int cmd ,int reTryTimes = 1)
	{
		for (int i = 0; i < reTryTimes; i++)
    12e0:	61 f7       	brne	.-40     	; 0x12ba <main+0x454>
    12e2:	4b cf       	rjmp	.-362    	; 0x117a <main+0x314>
		{
			sendAndGetAck(cmd);
    12e4:	61 e0       	ldi	r22, 0x01	; 1
    12e6:	70 e0       	ldi	r23, 0x00	; 0
    12e8:	ce 01       	movw	r24, r28
    12ea:	01 96       	adiw	r24, 0x01	; 1
    12ec:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <_ZN11FingerPrint13sendAndGetAckEi>
			if (_ackPacket[confIndex] == 0)
    12f0:	ca 53       	subi	r28, 0x3A	; 58
    12f2:	df 4f       	sbci	r29, 0xFF	; 255
    12f4:	e8 81       	ld	r30, Y
    12f6:	f9 81       	ldd	r31, Y+1	; 0x01
    12f8:	c6 5c       	subi	r28, 0xC6	; 198
    12fa:	d0 40       	sbci	r29, 0x00	; 0
    12fc:	80 81       	ld	r24, Z
    12fe:	88 23       	and	r24, r24
    1300:	69 f1       	breq	.+90     	; 0x135c <main+0x4f6>
    1302:	f1 e0       	ldi	r31, 0x01	; 1
    1304:	af 1a       	sub	r10, r31
    1306:	b1 08       	sbc	r11, r1
		}
		return confIndex;
	}
	bool reSendPack(int confIndex, int cmd ,int reTryTimes = 1)
	{
		for (int i = 0; i < reTryTimes; i++)
    1308:	69 f7       	brne	.-38     	; 0x12e4 <main+0x47e>
    130a:	37 cf       	rjmp	.-402    	; 0x117a <main+0x314>
		{
			sendAndGetAck(cmd);
    130c:	61 e0       	ldi	r22, 0x01	; 1
    130e:	70 e0       	ldi	r23, 0x00	; 0
    1310:	ce 01       	movw	r24, r28
    1312:	01 96       	adiw	r24, 0x01	; 1
    1314:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <_ZN11FingerPrint13sendAndGetAckEi>
			if (_ackPacket[confIndex] == 0)
    1318:	ca 53       	subi	r28, 0x3A	; 58
    131a:	df 4f       	sbci	r29, 0xFF	; 255
    131c:	a8 81       	ld	r26, Y
    131e:	b9 81       	ldd	r27, Y+1	; 0x01
    1320:	c6 5c       	subi	r28, 0xC6	; 198
    1322:	d0 40       	sbci	r29, 0x00	; 0
    1324:	8c 91       	ld	r24, X
    1326:	88 23       	and	r24, r24
    1328:	c9 f0       	breq	.+50     	; 0x135c <main+0x4f6>
    132a:	b1 e0       	ldi	r27, 0x01	; 1
    132c:	ab 1a       	sub	r10, r27
    132e:	b1 08       	sbc	r11, r1
		}
		return confIndex;
	}
	bool reSendPack(int confIndex, int cmd ,int reTryTimes = 1)
	{
		for (int i = 0; i < reTryTimes; i++)
    1330:	69 f7       	brne	.-38     	; 0x130c <main+0x4a6>
    1332:	23 cf       	rjmp	.-442    	; 0x117a <main+0x314>
		{
			sendAndGetAck(cmd);
    1334:	61 e0       	ldi	r22, 0x01	; 1
    1336:	70 e0       	ldi	r23, 0x00	; 0
    1338:	ce 01       	movw	r24, r28
    133a:	01 96       	adiw	r24, 0x01	; 1
    133c:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <_ZN11FingerPrint13sendAndGetAckEi>
			if (_ackPacket[confIndex] == 0)
    1340:	ca 53       	subi	r28, 0x3A	; 58
    1342:	df 4f       	sbci	r29, 0xFF	; 255
    1344:	e8 81       	ld	r30, Y
    1346:	f9 81       	ldd	r31, Y+1	; 0x01
    1348:	c6 5c       	subi	r28, 0xC6	; 198
    134a:	d0 40       	sbci	r29, 0x00	; 0
    134c:	80 81       	ld	r24, Z
    134e:	88 23       	and	r24, r24
    1350:	29 f0       	breq	.+10     	; 0x135c <main+0x4f6>
    1352:	f1 e0       	ldi	r31, 0x01	; 1
    1354:	af 1a       	sub	r10, r31
    1356:	b1 08       	sbc	r11, r1
		}
		return confIndex;
	}
	bool reSendPack(int confIndex, int cmd ,int reTryTimes = 1)
	{
		for (int i = 0; i < reTryTimes; i++)
    1358:	69 f7       	brne	.-38     	; 0x1334 <main+0x4ce>
    135a:	0f cf       	rjmp	.-482    	; 0x117a <main+0x314>
	void setPacketLength(char length = 0x07)
	{
		//Refers to the length of package content (command packets and data packets)
		//plus the length of Checksum( 2 bytes)   !!!MAX is 256 Byte!!!
		/**** {07H} = 4byte Password, 1Byte IndecationCode (command), 2Byte CheckSum ****/
		_dataPackage[7] = 0;
    135c:	19 86       	std	Y+9, r1	; 0x09
		_dataPackage[8] = length;
    135e:	84 e0       	ldi	r24, 0x04	; 4
    1360:	8a 87       	std	Y+10, r24	; 0x0a
	}
	void setAcommand(commands commandValue)
	{
		_dataPackage[9] = commandValue;
    1362:	82 e0       	ldi	r24, 0x02	; 2
    1364:	8b 87       	std	Y+11, r24	; 0x0b
		sendAndGetAck(GenImage);
		if (checkAckPackError(GenImage))
		{
			setPacketLength(0x04);						//index 7,8
			setAcommand(Img2Tz);						//index 9
			_dataPackage[10] = bufferID;				//buffer ID
    1366:	81 e0       	ldi	r24, 0x01	; 1
    1368:	8c 87       	std	Y+12, r24	; 0x0c
		setup();
	}
	~FingerPrint(){}
	void setCheckSum(int sum, int index)
	{
		_dataPackage[index] = sum >> 8;
    136a:	1d 86       	std	Y+13, r1	; 0x0d
		_dataPackage[index + 1] = sum;	
    136c:	88 e0       	ldi	r24, 0x08	; 8
    136e:	8e 87       	std	Y+14, r24	; 0x0e
    1370:	54 01       	movw	r10, r8
    1372:	fe 01       	movw	r30, r28
    1374:	32 96       	adiw	r30, 0x02	; 2
	}
	void sendPackage(int size)
{
	for (int i = 0; i < size; i++)
	{
		FingerPrintUart.UARTsend(_dataPackage[i]);
    1376:	81 91       	ld	r24, Z+
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
    1378:	d8 01       	movw	r26, r16
    137a:	9c 91       	ld	r25, X
    137c:	95 ff       	sbrs	r25, 5
    137e:	fc cf       	rjmp	.-8      	; 0x1378 <main+0x512>
		UDR0 = data;
    1380:	d7 01       	movw	r26, r14
    1382:	8c 93       	st	X, r24
		}
	return 0;
	}
	void sendPackage(int size)
{
	for (int i = 0; i < size; i++)
    1384:	8e 16       	cp	r8, r30
    1386:	9f 06       	cpc	r9, r31
    1388:	b1 f7       	brne	.-20     	; 0x1376 <main+0x510>
    138a:	fe 01       	movw	r30, r28
    138c:	bf 96       	adiw	r30, 0x2f	; 47
    138e:	80 e0       	ldi	r24, 0x00	; 0
    1390:	90 e0       	ldi	r25, 0x00	; 0
		//UCSR0C = ((1<<UCSZ00)|(1<<UCSZ01));
		UCSR0C = (3<<UCSZ00);
	}
	char checkForData()
	{
		if (UCSR0A & (1<<RXC0))
    1392:	d8 01       	movw	r26, r16
    1394:	2c 91       	ld	r18, X
			ackDataIndex++;
			*/
			/********************************need to test************************/
			//check if there is data, if so, receive the data
			//-This avoid the program from endless loop in wait for data
			if (FingerPrintUart.checkForData())
    1396:	22 23       	and	r18, r18
    1398:	4c f0       	brlt	.+18     	; 0x13ac <main+0x546>
		//UCSR0C = ((1<<UCSZ00)|(1<<UCSZ01));
		UCSR0C = (3<<UCSZ00);
	}
	char checkForData()
	{
		if (UCSR0A & (1<<RXC0))
    139a:	d8 01       	movw	r26, r16
    139c:	2c 91       	ld	r18, X
			ackDataIndex++;
			*/
			/********************************need to test************************/
			//check if there is data, if so, receive the data
			//-This avoid the program from endless loop in wait for data
			if (FingerPrintUart.checkForData())
    139e:	22 23       	and	r18, r18
    13a0:	2c f0       	brlt	.+10     	; 0x13ac <main+0x546>
	}
	void getAckPackage(char ackPackSize = 12)
	{
		int ackDataIndex = 0;
		char ackData = 0;
		while(ackDataIndex < ackPackSize)
    13a2:	8c 30       	cpi	r24, 0x0C	; 12
    13a4:	91 05       	cpc	r25, r1
    13a6:	cc f3       	brlt	.-14     	; 0x139a <main+0x534>
    13a8:	0c 94 17 15 	jmp	0x2a2e	; 0x2a2e <main+0x1bc8>
		}
		return 0;
	}
	char getData()
	{
		return UDR0;
    13ac:	d7 01       	movw	r26, r14
    13ae:	2c 91       	ld	r18, X
			//check if there is data, if so, receive the data
			//-This avoid the program from endless loop in wait for data
			if (FingerPrintUart.checkForData())
			{
				ackData = FingerPrintUart.getData();
				_ackPacket[ackDataIndex] = ackData;
    13b0:	21 93       	st	Z+, r18
				ackDataIndex++;
    13b2:	01 96       	adiw	r24, 0x01	; 1
	}
	void getAckPackage(char ackPackSize = 12)
	{
		int ackDataIndex = 0;
		char ackData = 0;
		while(ackDataIndex < ackPackSize)
    13b4:	8c 30       	cpi	r24, 0x0C	; 12
    13b6:	91 05       	cpc	r25, r1
    13b8:	61 f7       	brne	.-40     	; 0x1392 <main+0x52c>
    13ba:	0c 94 17 15 	jmp	0x2a2e	; 0x2a2e <main+0x1bc8>
				ackDataIndex++;
			}
		}
		for (int i = 0; i<ackPackSize;i++)
		{
			FingerPrintUart.UARTsend(_ackPacket[i]);
    13be:	81 91       	ld	r24, Z+
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
    13c0:	d8 01       	movw	r26, r16
    13c2:	9c 91       	ld	r25, X
    13c4:	95 ff       	sbrs	r25, 5
    13c6:	fc cf       	rjmp	.-8      	; 0x13c0 <main+0x55a>
		UDR0 = data;
    13c8:	d7 01       	movw	r26, r14
    13ca:	8c 93       	st	X, r24
				ackData = FingerPrintUart.getData();
				_ackPacket[ackDataIndex] = ackData;
				ackDataIndex++;
			}
		}
		for (int i = 0; i<ackPackSize;i++)
    13cc:	e4 15       	cp	r30, r4
    13ce:	f5 05       	cpc	r31, r5
    13d0:	b1 f7       	brne	.-20     	; 0x13be <main+0x558>
			setPacketLength(0x04);						//index 7,8
			setAcommand(Img2Tz);						//index 9
			_dataPackage[10] = bufferID;				//buffer ID
			setCheckSum(command+0x04+Img2Tz+0x01,11);	//index 10, 11
			sendAndGetAck(Img2Tz);
			if (checkAckPackError(Img2Tz))
    13d2:	62 e0       	ldi	r22, 0x02	; 2
    13d4:	ce 01       	movw	r24, r28
    13d6:	01 96       	adiw	r24, 0x01	; 1
    13d8:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <_ZN11FingerPrint17checkAckPackErrorEc>
		sendAndGetAck(RegModel);
		return checkAckPackError(RegModel);
	}
	bool setNewFinger(char fingerID = 0x01)
	{
		if (genFingerImg())
    13dc:	88 23       	and	r24, r24
    13de:	09 f4       	brne	.+2      	; 0x13e2 <main+0x57c>
    13e0:	cc ce       	rjmp	.-616    	; 0x117a <main+0x314>
    13e2:	23 e0       	ldi	r18, 0x03	; 3
    13e4:	30 e0       	ldi	r19, 0x00	; 0
		_dataPackage[13] = pwd;
	}
	void setPackagePID(char PID = command)
	{
		//01H = command;  02H = DATA packet; 07H = Ack packet; 08H = End of DATA packet
		_dataPackage[6] = PID;
    13e6:	41 e0       	ldi	r20, 0x01	; 1
	{
		//Refers to the length of package content (command packets and data packets)
		//plus the length of Checksum( 2 bytes)   !!!MAX is 256 Byte!!!
		/**** {07H} = 4byte Password, 1Byte IndecationCode (command), 2Byte CheckSum ****/
		_dataPackage[7] = 0;
		_dataPackage[8] = length;
    13e8:	63 e0       	ldi	r22, 0x03	; 3
	}
	~FingerPrint(){}
	void setCheckSum(int sum, int index)
	{
		_dataPackage[index] = sum >> 8;
		_dataPackage[index + 1] = sum;	
    13ea:	55 e0       	ldi	r21, 0x05	; 5
    13ec:	bf ef       	ldi	r27, 0xFF	; 255
    13ee:	ed e3       	ldi	r30, 0x3D	; 61
    13f0:	f9 e4       	ldi	r31, 0x49	; 73
    13f2:	b1 50       	subi	r27, 0x01	; 1
    13f4:	e0 40       	sbci	r30, 0x00	; 0
    13f6:	f0 40       	sbci	r31, 0x00	; 0
    13f8:	e1 f7       	brne	.-8      	; 0x13f2 <main+0x58c>
    13fa:	00 c0       	rjmp	.+0      	; 0x13fc <main+0x596>
    13fc:	00 00       	nop
		_dataPackage[13] = pwd;
	}
	void setPackagePID(char PID = command)
	{
		//01H = command;  02H = DATA packet; 07H = Ack packet; 08H = End of DATA packet
		_dataPackage[6] = PID;
    13fe:	48 87       	std	Y+8, r20	; 0x08
	void setPacketLength(char length = 0x07)
	{
		//Refers to the length of package content (command packets and data packets)
		//plus the length of Checksum( 2 bytes)   !!!MAX is 256 Byte!!!
		/**** {07H} = 4byte Password, 1Byte IndecationCode (command), 2Byte CheckSum ****/
		_dataPackage[7] = 0;
    1400:	19 86       	std	Y+9, r1	; 0x09
		_dataPackage[8] = length;
    1402:	6a 87       	std	Y+10, r22	; 0x0a
	}
	void setAcommand(commands commandValue)
	{
		_dataPackage[9] = commandValue;
    1404:	4b 87       	std	Y+11, r20	; 0x0b
		setup();
	}
	~FingerPrint(){}
	void setCheckSum(int sum, int index)
	{
		_dataPackage[index] = sum >> 8;
    1406:	1c 86       	std	Y+12, r1	; 0x0c
		_dataPackage[index + 1] = sum;	
    1408:	5d 87       	std	Y+13, r21	; 0x0d
    140a:	fe 01       	movw	r30, r28
    140c:	32 96       	adiw	r30, 0x02	; 2
	}
	void sendPackage(int size)
{
	for (int i = 0; i < size; i++)
	{
		FingerPrintUart.UARTsend(_dataPackage[i]);
    140e:	81 91       	ld	r24, Z+
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
    1410:	d8 01       	movw	r26, r16
    1412:	9c 91       	ld	r25, X
    1414:	95 ff       	sbrs	r25, 5
    1416:	fc cf       	rjmp	.-8      	; 0x1410 <main+0x5aa>
		UDR0 = data;
    1418:	d7 01       	movw	r26, r14
    141a:	8c 93       	st	X, r24
		}
	return 0;
	}
	void sendPackage(int size)
{
	for (int i = 0; i < size; i++)
    141c:	ec 15       	cp	r30, r12
    141e:	fd 05       	cpc	r31, r13
    1420:	b1 f7       	brne	.-20     	; 0x140e <main+0x5a8>
    1422:	fe 01       	movw	r30, r28
    1424:	bf 96       	adiw	r30, 0x2f	; 47
    1426:	80 e0       	ldi	r24, 0x00	; 0
    1428:	90 e0       	ldi	r25, 0x00	; 0
		//UCSR0C = ((1<<UCSZ00)|(1<<UCSZ01));
		UCSR0C = (3<<UCSZ00);
	}
	char checkForData()
	{
		if (UCSR0A & (1<<RXC0))
    142a:	d8 01       	movw	r26, r16
    142c:	7c 91       	ld	r23, X
			ackDataIndex++;
			*/
			/********************************need to test************************/
			//check if there is data, if so, receive the data
			//-This avoid the program from endless loop in wait for data
			if (FingerPrintUart.checkForData())
    142e:	77 23       	and	r23, r23
    1430:	4c f0       	brlt	.+18     	; 0x1444 <main+0x5de>
		//UCSR0C = ((1<<UCSZ00)|(1<<UCSZ01));
		UCSR0C = (3<<UCSZ00);
	}
	char checkForData()
	{
		if (UCSR0A & (1<<RXC0))
    1432:	d8 01       	movw	r26, r16
    1434:	7c 91       	ld	r23, X
			ackDataIndex++;
			*/
			/********************************need to test************************/
			//check if there is data, if so, receive the data
			//-This avoid the program from endless loop in wait for data
			if (FingerPrintUart.checkForData())
    1436:	77 23       	and	r23, r23
    1438:	2c f0       	brlt	.+10     	; 0x1444 <main+0x5de>
	}
	void getAckPackage(char ackPackSize = 12)
	{
		int ackDataIndex = 0;
		char ackData = 0;
		while(ackDataIndex < ackPackSize)
    143a:	8c 30       	cpi	r24, 0x0C	; 12
    143c:	91 05       	cpc	r25, r1
    143e:	cc f3       	brlt	.-14     	; 0x1432 <main+0x5cc>
    1440:	0c 94 1b 15 	jmp	0x2a36	; 0x2a36 <main+0x1bd0>
		}
		return 0;
	}
	char getData()
	{
		return UDR0;
    1444:	d7 01       	movw	r26, r14
    1446:	7c 91       	ld	r23, X
			//check if there is data, if so, receive the data
			//-This avoid the program from endless loop in wait for data
			if (FingerPrintUart.checkForData())
			{
				ackData = FingerPrintUart.getData();
				_ackPacket[ackDataIndex] = ackData;
    1448:	71 93       	st	Z+, r23
				ackDataIndex++;
    144a:	01 96       	adiw	r24, 0x01	; 1
	}
	void getAckPackage(char ackPackSize = 12)
	{
		int ackDataIndex = 0;
		char ackData = 0;
		while(ackDataIndex < ackPackSize)
    144c:	8c 30       	cpi	r24, 0x0C	; 12
    144e:	91 05       	cpc	r25, r1
    1450:	61 f7       	brne	.-40     	; 0x142a <main+0x5c4>
    1452:	0c 94 1b 15 	jmp	0x2a36	; 0x2a36 <main+0x1bd0>
				ackDataIndex++;
			}
		}
		for (int i = 0; i<ackPackSize;i++)
		{
			FingerPrintUart.UARTsend(_ackPacket[i]);
    1456:	81 91       	ld	r24, Z+
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
    1458:	d8 01       	movw	r26, r16
    145a:	9c 91       	ld	r25, X
    145c:	95 ff       	sbrs	r25, 5
    145e:	fc cf       	rjmp	.-8      	; 0x1458 <main+0x5f2>
		UDR0 = data;
    1460:	d7 01       	movw	r26, r14
    1462:	8c 93       	st	X, r24
				ackData = FingerPrintUart.getData();
				_ackPacket[ackDataIndex] = ackData;
				ackDataIndex++;
			}
		}
		for (int i = 0; i<ackPackSize;i++)
    1464:	e4 15       	cp	r30, r4
    1466:	f5 05       	cpc	r31, r5
    1468:	b1 f7       	brne	.-20     	; 0x1456 <main+0x5f0>
    146a:	21 50       	subi	r18, 0x01	; 1
    146c:	31 09       	sbc	r19, r1
			}
			return 0;
}
	void blinkTheSensor(char blinkTimes = 1)
	{
		for(int i = 0; i < blinkTimes; i++)
    146e:	09 f0       	breq	.+2      	; 0x1472 <main+0x60c>
    1470:	bd cf       	rjmp	.-134    	; 0x13ec <main+0x586>
		_dataPackage[13] = pwd;
	}
	void setPackagePID(char PID = command)
	{
		//01H = command;  02H = DATA packet; 07H = Ack packet; 08H = End of DATA packet
		_dataPackage[6] = PID;
    1472:	81 e0       	ldi	r24, 0x01	; 1
    1474:	88 87       	std	Y+8, r24	; 0x08
	void setPacketLength(char length = 0x07)
	{
		//Refers to the length of package content (command packets and data packets)
		//plus the length of Checksum( 2 bytes)   !!!MAX is 256 Byte!!!
		/**** {07H} = 4byte Password, 1Byte IndecationCode (command), 2Byte CheckSum ****/
		_dataPackage[7] = 0;
    1476:	19 86       	std	Y+9, r1	; 0x09
		_dataPackage[8] = length;
    1478:	93 e0       	ldi	r25, 0x03	; 3
    147a:	9a 87       	std	Y+10, r25	; 0x0a
	}
	void setAcommand(commands commandValue)
	{
		_dataPackage[9] = commandValue;
    147c:	8b 87       	std	Y+11, r24	; 0x0b
		setup();
	}
	~FingerPrint(){}
	void setCheckSum(int sum, int index)
	{
		_dataPackage[index] = sum >> 8;
    147e:	1c 86       	std	Y+12, r1	; 0x0c
		_dataPackage[index + 1] = sum;	
    1480:	85 e0       	ldi	r24, 0x05	; 5
    1482:	8d 87       	std	Y+13, r24	; 0x0d
    1484:	fe 01       	movw	r30, r28
    1486:	32 96       	adiw	r30, 0x02	; 2
	}
	void sendPackage(int size)
{
	for (int i = 0; i < size; i++)
	{
		FingerPrintUart.UARTsend(_dataPackage[i]);
    1488:	81 91       	ld	r24, Z+
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
    148a:	d8 01       	movw	r26, r16
    148c:	9c 91       	ld	r25, X
    148e:	95 ff       	sbrs	r25, 5
    1490:	fc cf       	rjmp	.-8      	; 0x148a <main+0x624>
		UDR0 = data;
    1492:	d7 01       	movw	r26, r14
    1494:	8c 93       	st	X, r24
		}
	return 0;
	}
	void sendPackage(int size)
{
	for (int i = 0; i < size; i++)
    1496:	ec 15       	cp	r30, r12
    1498:	fd 05       	cpc	r31, r13
    149a:	b1 f7       	brne	.-20     	; 0x1488 <main+0x622>
    149c:	fe 01       	movw	r30, r28
    149e:	bf 96       	adiw	r30, 0x2f	; 47
    14a0:	80 e0       	ldi	r24, 0x00	; 0
    14a2:	90 e0       	ldi	r25, 0x00	; 0
		//UCSR0C = ((1<<UCSZ00)|(1<<UCSZ01));
		UCSR0C = (3<<UCSZ00);
	}
	char checkForData()
	{
		if (UCSR0A & (1<<RXC0))
    14a4:	d8 01       	movw	r26, r16
    14a6:	2c 91       	ld	r18, X
			ackDataIndex++;
			*/
			/********************************need to test************************/
			//check if there is data, if so, receive the data
			//-This avoid the program from endless loop in wait for data
			if (FingerPrintUart.checkForData())
    14a8:	22 23       	and	r18, r18
    14aa:	4c f0       	brlt	.+18     	; 0x14be <main+0x658>
		//UCSR0C = ((1<<UCSZ00)|(1<<UCSZ01));
		UCSR0C = (3<<UCSZ00);
	}
	char checkForData()
	{
		if (UCSR0A & (1<<RXC0))
    14ac:	d8 01       	movw	r26, r16
    14ae:	2c 91       	ld	r18, X
			ackDataIndex++;
			*/
			/********************************need to test************************/
			//check if there is data, if so, receive the data
			//-This avoid the program from endless loop in wait for data
			if (FingerPrintUart.checkForData())
    14b0:	22 23       	and	r18, r18
    14b2:	2c f0       	brlt	.+10     	; 0x14be <main+0x658>
	}
	void getAckPackage(char ackPackSize = 12)
	{
		int ackDataIndex = 0;
		char ackData = 0;
		while(ackDataIndex < ackPackSize)
    14b4:	8c 30       	cpi	r24, 0x0C	; 12
    14b6:	91 05       	cpc	r25, r1
    14b8:	cc f3       	brlt	.-14     	; 0x14ac <main+0x646>
    14ba:	0c 94 1f 15 	jmp	0x2a3e	; 0x2a3e <main+0x1bd8>
		}
		return 0;
	}
	char getData()
	{
		return UDR0;
    14be:	d7 01       	movw	r26, r14
    14c0:	2c 91       	ld	r18, X
			//check if there is data, if so, receive the data
			//-This avoid the program from endless loop in wait for data
			if (FingerPrintUart.checkForData())
			{
				ackData = FingerPrintUart.getData();
				_ackPacket[ackDataIndex] = ackData;
    14c2:	21 93       	st	Z+, r18
				ackDataIndex++;
    14c4:	01 96       	adiw	r24, 0x01	; 1
	}
	void getAckPackage(char ackPackSize = 12)
	{
		int ackDataIndex = 0;
		char ackData = 0;
		while(ackDataIndex < ackPackSize)
    14c6:	8c 30       	cpi	r24, 0x0C	; 12
    14c8:	91 05       	cpc	r25, r1
    14ca:	61 f7       	brne	.-40     	; 0x14a4 <main+0x63e>
    14cc:	0c 94 1f 15 	jmp	0x2a3e	; 0x2a3e <main+0x1bd8>
				ackDataIndex++;
			}
		}
		for (int i = 0; i<ackPackSize;i++)
		{
			FingerPrintUart.UARTsend(_ackPacket[i]);
    14d0:	81 91       	ld	r24, Z+
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
    14d2:	d8 01       	movw	r26, r16
    14d4:	9c 91       	ld	r25, X
    14d6:	95 ff       	sbrs	r25, 5
    14d8:	fc cf       	rjmp	.-8      	; 0x14d2 <main+0x66c>
		UDR0 = data;
    14da:	d7 01       	movw	r26, r14
    14dc:	8c 93       	st	X, r24
				ackData = FingerPrintUart.getData();
				_ackPacket[ackDataIndex] = ackData;
				ackDataIndex++;
			}
		}
		for (int i = 0; i<ackPackSize;i++)
    14de:	e4 15       	cp	r30, r4
    14e0:	f5 05       	cpc	r31, r5
    14e2:	b1 f7       	brne	.-20     	; 0x14d0 <main+0x66a>
		setPackagePID(command);						//1 = command  ;index 6
		setPacketLength(0x03);						//index 7,8
		setAcommand(GenImage);						//index 9
		setCheckSum(command+0x03+GenImage,10);		//index 10, 11
		sendAndGetAck(GenImage);
		if (checkAckPackError(GenImage))
    14e4:	61 e0       	ldi	r22, 0x01	; 1
    14e6:	ce 01       	movw	r24, r28
    14e8:	01 96       	adiw	r24, 0x01	; 1
    14ea:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <_ZN11FingerPrint17checkAckPackErrorEc>
    14ee:	88 23       	and	r24, r24
    14f0:	09 f4       	brne	.+2      	; 0x14f4 <main+0x68e>
    14f2:	43 ce       	rjmp	.-890    	; 0x117a <main+0x314>
	void setPacketLength(char length = 0x07)
	{
		//Refers to the length of package content (command packets and data packets)
		//plus the length of Checksum( 2 bytes)   !!!MAX is 256 Byte!!!
		/**** {07H} = 4byte Password, 1Byte IndecationCode (command), 2Byte CheckSum ****/
		_dataPackage[7] = 0;
    14f4:	19 86       	std	Y+9, r1	; 0x09
		_dataPackage[8] = length;
    14f6:	84 e0       	ldi	r24, 0x04	; 4
    14f8:	8a 87       	std	Y+10, r24	; 0x0a
	}
	void setAcommand(commands commandValue)
	{
		_dataPackage[9] = commandValue;
    14fa:	82 e0       	ldi	r24, 0x02	; 2
    14fc:	8b 87       	std	Y+11, r24	; 0x0b
		sendAndGetAck(GenImage);
		if (checkAckPackError(GenImage))
		{
			setPacketLength(0x04);						//index 7,8
			setAcommand(Img2Tz);						//index 9
			_dataPackage[10] = bufferID;				//buffer ID
    14fe:	8c 87       	std	Y+12, r24	; 0x0c
		setup();
	}
	~FingerPrint(){}
	void setCheckSum(int sum, int index)
	{
		_dataPackage[index] = sum >> 8;
    1500:	1d 86       	std	Y+13, r1	; 0x0d
		_dataPackage[index + 1] = sum;	
    1502:	88 e0       	ldi	r24, 0x08	; 8
    1504:	8e 87       	std	Y+14, r24	; 0x0e
    1506:	fe 01       	movw	r30, r28
    1508:	32 96       	adiw	r30, 0x02	; 2
	}
	void sendPackage(int size)
{
	for (int i = 0; i < size; i++)
	{
		FingerPrintUart.UARTsend(_dataPackage[i]);
    150a:	81 91       	ld	r24, Z+
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
    150c:	d8 01       	movw	r26, r16
    150e:	9c 91       	ld	r25, X
    1510:	95 ff       	sbrs	r25, 5
    1512:	fc cf       	rjmp	.-8      	; 0x150c <main+0x6a6>
		UDR0 = data;
    1514:	d7 01       	movw	r26, r14
    1516:	8c 93       	st	X, r24
		}
	return 0;
	}
	void sendPackage(int size)
{
	for (int i = 0; i < size; i++)
    1518:	8e 16       	cp	r8, r30
    151a:	9f 06       	cpc	r9, r31
    151c:	b1 f7       	brne	.-20     	; 0x150a <main+0x6a4>
    151e:	fe 01       	movw	r30, r28
    1520:	bf 96       	adiw	r30, 0x2f	; 47
    1522:	80 e0       	ldi	r24, 0x00	; 0
    1524:	90 e0       	ldi	r25, 0x00	; 0
		//UCSR0C = ((1<<UCSZ00)|(1<<UCSZ01));
		UCSR0C = (3<<UCSZ00);
	}
	char checkForData()
	{
		if (UCSR0A & (1<<RXC0))
    1526:	d8 01       	movw	r26, r16
    1528:	2c 91       	ld	r18, X
			ackDataIndex++;
			*/
			/********************************need to test************************/
			//check if there is data, if so, receive the data
			//-This avoid the program from endless loop in wait for data
			if (FingerPrintUart.checkForData())
    152a:	22 23       	and	r18, r18
    152c:	4c f0       	brlt	.+18     	; 0x1540 <main+0x6da>
		//UCSR0C = ((1<<UCSZ00)|(1<<UCSZ01));
		UCSR0C = (3<<UCSZ00);
	}
	char checkForData()
	{
		if (UCSR0A & (1<<RXC0))
    152e:	d8 01       	movw	r26, r16
    1530:	2c 91       	ld	r18, X
			ackDataIndex++;
			*/
			/********************************need to test************************/
			//check if there is data, if so, receive the data
			//-This avoid the program from endless loop in wait for data
			if (FingerPrintUart.checkForData())
    1532:	22 23       	and	r18, r18
    1534:	2c f0       	brlt	.+10     	; 0x1540 <main+0x6da>
	}
	void getAckPackage(char ackPackSize = 12)
	{
		int ackDataIndex = 0;
		char ackData = 0;
		while(ackDataIndex < ackPackSize)
    1536:	8c 30       	cpi	r24, 0x0C	; 12
    1538:	91 05       	cpc	r25, r1
    153a:	cc f3       	brlt	.-14     	; 0x152e <main+0x6c8>
    153c:	0c 94 23 15 	jmp	0x2a46	; 0x2a46 <main+0x1be0>
		}
		return 0;
	}
	char getData()
	{
		return UDR0;
    1540:	d7 01       	movw	r26, r14
    1542:	2c 91       	ld	r18, X
			//check if there is data, if so, receive the data
			//-This avoid the program from endless loop in wait for data
			if (FingerPrintUart.checkForData())
			{
				ackData = FingerPrintUart.getData();
				_ackPacket[ackDataIndex] = ackData;
    1544:	21 93       	st	Z+, r18
				ackDataIndex++;
    1546:	01 96       	adiw	r24, 0x01	; 1
	}
	void getAckPackage(char ackPackSize = 12)
	{
		int ackDataIndex = 0;
		char ackData = 0;
		while(ackDataIndex < ackPackSize)
    1548:	8c 30       	cpi	r24, 0x0C	; 12
    154a:	91 05       	cpc	r25, r1
    154c:	61 f7       	brne	.-40     	; 0x1526 <main+0x6c0>
    154e:	0c 94 23 15 	jmp	0x2a46	; 0x2a46 <main+0x1be0>
				ackDataIndex++;
			}
		}
		for (int i = 0; i<ackPackSize;i++)
		{
			FingerPrintUart.UARTsend(_ackPacket[i]);
    1552:	81 91       	ld	r24, Z+
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
    1554:	d8 01       	movw	r26, r16
    1556:	9c 91       	ld	r25, X
    1558:	95 ff       	sbrs	r25, 5
    155a:	fc cf       	rjmp	.-8      	; 0x1554 <main+0x6ee>
		UDR0 = data;
    155c:	d7 01       	movw	r26, r14
    155e:	8c 93       	st	X, r24
				ackData = FingerPrintUart.getData();
				_ackPacket[ackDataIndex] = ackData;
				ackDataIndex++;
			}
		}
		for (int i = 0; i<ackPackSize;i++)
    1560:	e4 15       	cp	r30, r4
    1562:	f5 05       	cpc	r31, r5
    1564:	b1 f7       	brne	.-20     	; 0x1552 <main+0x6ec>
			setPacketLength(0x04);						//index 7,8
			setAcommand(Img2Tz);						//index 9
			_dataPackage[10] = bufferID;				//buffer ID
			setCheckSum(command+0x04+Img2Tz+0x01,11);	//index 10, 11
			sendAndGetAck(Img2Tz);
			if (checkAckPackError(Img2Tz))
    1566:	62 e0       	ldi	r22, 0x02	; 2
    1568:	ce 01       	movw	r24, r28
    156a:	01 96       	adiw	r24, 0x01	; 1
    156c:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <_ZN11FingerPrint17checkAckPackErrorEc>
	bool setNewFinger(char fingerID = 0x01)
	{
		if (genFingerImg())
		{
			blinkTheSensor(3);
			if (genFingerImg(0x02))
    1570:	88 23       	and	r24, r24
    1572:	09 f4       	brne	.+2      	; 0x1576 <main+0x710>
    1574:	02 ce       	rjmp	.-1020   	; 0x117a <main+0x314>
	void setPacketLength(char length = 0x07)
	{
		//Refers to the length of package content (command packets and data packets)
		//plus the length of Checksum( 2 bytes)   !!!MAX is 256 Byte!!!
		/**** {07H} = 4byte Password, 1Byte IndecationCode (command), 2Byte CheckSum ****/
		_dataPackage[7] = 0;
    1576:	19 86       	std	Y+9, r1	; 0x09
		_dataPackage[8] = length;
    1578:	83 e0       	ldi	r24, 0x03	; 3
    157a:	8a 87       	std	Y+10, r24	; 0x0a
	}
	void setAcommand(commands commandValue)
	{
		_dataPackage[9] = commandValue;
    157c:	85 e0       	ldi	r24, 0x05	; 5
    157e:	8b 87       	std	Y+11, r24	; 0x0b
		setup();
	}
	~FingerPrint(){}
	void setCheckSum(int sum, int index)
	{
		_dataPackage[index] = sum >> 8;
    1580:	1f 86       	std	Y+15, r1	; 0x0f
		_dataPackage[index + 1] = sum;	
    1582:	89 e0       	ldi	r24, 0x09	; 9
    1584:	88 8b       	std	Y+16, r24	; 0x10
    1586:	fe 01       	movw	r30, r28
    1588:	32 96       	adiw	r30, 0x02	; 2
	}
	void sendPackage(int size)
{
	for (int i = 0; i < size; i++)
	{
		FingerPrintUart.UARTsend(_dataPackage[i]);
    158a:	81 91       	ld	r24, Z+
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
    158c:	d8 01       	movw	r26, r16
    158e:	9c 91       	ld	r25, X
    1590:	95 ff       	sbrs	r25, 5
    1592:	fc cf       	rjmp	.-8      	; 0x158c <main+0x726>
		UDR0 = data;
    1594:	d7 01       	movw	r26, r14
    1596:	8c 93       	st	X, r24
		}
	return 0;
	}
	void sendPackage(int size)
{
	for (int i = 0; i < size; i++)
    1598:	ec 15       	cp	r30, r12
    159a:	fd 05       	cpc	r31, r13
    159c:	b1 f7       	brne	.-20     	; 0x158a <main+0x724>
    159e:	fe 01       	movw	r30, r28
    15a0:	bf 96       	adiw	r30, 0x2f	; 47
    15a2:	80 e0       	ldi	r24, 0x00	; 0
    15a4:	90 e0       	ldi	r25, 0x00	; 0
		//UCSR0C = ((1<<UCSZ00)|(1<<UCSZ01));
		UCSR0C = (3<<UCSZ00);
	}
	char checkForData()
	{
		if (UCSR0A & (1<<RXC0))
    15a6:	d8 01       	movw	r26, r16
    15a8:	2c 91       	ld	r18, X
			ackDataIndex++;
			*/
			/********************************need to test************************/
			//check if there is data, if so, receive the data
			//-This avoid the program from endless loop in wait for data
			if (FingerPrintUart.checkForData())
    15aa:	22 23       	and	r18, r18
    15ac:	4c f0       	brlt	.+18     	; 0x15c0 <main+0x75a>
		//UCSR0C = ((1<<UCSZ00)|(1<<UCSZ01));
		UCSR0C = (3<<UCSZ00);
	}
	char checkForData()
	{
		if (UCSR0A & (1<<RXC0))
    15ae:	d8 01       	movw	r26, r16
    15b0:	2c 91       	ld	r18, X
			ackDataIndex++;
			*/
			/********************************need to test************************/
			//check if there is data, if so, receive the data
			//-This avoid the program from endless loop in wait for data
			if (FingerPrintUart.checkForData())
    15b2:	22 23       	and	r18, r18
    15b4:	2c f0       	brlt	.+10     	; 0x15c0 <main+0x75a>
	}
	void getAckPackage(char ackPackSize = 12)
	{
		int ackDataIndex = 0;
		char ackData = 0;
		while(ackDataIndex < ackPackSize)
    15b6:	8c 30       	cpi	r24, 0x0C	; 12
    15b8:	91 05       	cpc	r25, r1
    15ba:	cc f3       	brlt	.-14     	; 0x15ae <main+0x748>
    15bc:	0c 94 27 15 	jmp	0x2a4e	; 0x2a4e <main+0x1be8>
		}
		return 0;
	}
	char getData()
	{
		return UDR0;
    15c0:	d7 01       	movw	r26, r14
    15c2:	2c 91       	ld	r18, X
			//check if there is data, if so, receive the data
			//-This avoid the program from endless loop in wait for data
			if (FingerPrintUart.checkForData())
			{
				ackData = FingerPrintUart.getData();
				_ackPacket[ackDataIndex] = ackData;
    15c4:	21 93       	st	Z+, r18
				ackDataIndex++;
    15c6:	01 96       	adiw	r24, 0x01	; 1
	}
	void getAckPackage(char ackPackSize = 12)
	{
		int ackDataIndex = 0;
		char ackData = 0;
		while(ackDataIndex < ackPackSize)
    15c8:	8c 30       	cpi	r24, 0x0C	; 12
    15ca:	91 05       	cpc	r25, r1
    15cc:	61 f7       	brne	.-40     	; 0x15a6 <main+0x740>
    15ce:	0c 94 27 15 	jmp	0x2a4e	; 0x2a4e <main+0x1be8>
				ackDataIndex++;
			}
		}
		for (int i = 0; i<ackPackSize;i++)
		{
			FingerPrintUart.UARTsend(_ackPacket[i]);
    15d2:	81 91       	ld	r24, Z+
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
    15d4:	d8 01       	movw	r26, r16
    15d6:	9c 91       	ld	r25, X
    15d8:	95 ff       	sbrs	r25, 5
    15da:	fc cf       	rjmp	.-8      	; 0x15d4 <main+0x76e>
		UDR0 = data;
    15dc:	d7 01       	movw	r26, r14
    15de:	8c 93       	st	X, r24
				ackData = FingerPrintUart.getData();
				_ackPacket[ackDataIndex] = ackData;
				ackDataIndex++;
			}
		}
		for (int i = 0; i<ackPackSize;i++)
    15e0:	e4 15       	cp	r30, r4
    15e2:	f5 05       	cpc	r31, r5
    15e4:	b1 f7       	brne	.-20     	; 0x15d2 <main+0x76c>
	{
		setPacketLength(0x03);								//index 7,8
		setAcommand(RegModel);								//index 9
		setCheckSum(command+0x03+RegModel,13);	//index 10, 11
		sendAndGetAck(RegModel);
		return checkAckPackError(RegModel);
    15e6:	65 e0       	ldi	r22, 0x05	; 5
    15e8:	ce 01       	movw	r24, r28
    15ea:	01 96       	adiw	r24, 0x01	; 1
    15ec:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <_ZN11FingerPrint17checkAckPackErrorEc>
		if (genFingerImg())
		{
			blinkTheSensor(3);
			if (genFingerImg(0x02))
			{
				if (combineTwofingersIntoOne())
    15f0:	88 23       	and	r24, r24
    15f2:	09 f4       	brne	.+2      	; 0x15f6 <main+0x790>
    15f4:	c2 cd       	rjmp	.-1148   	; 0x117a <main+0x314>
	void setPacketLength(char length = 0x07)
	{
		//Refers to the length of package content (command packets and data packets)
		//plus the length of Checksum( 2 bytes)   !!!MAX is 256 Byte!!!
		/**** {07H} = 4byte Password, 1Byte IndecationCode (command), 2Byte CheckSum ****/
		_dataPackage[7] = 0;
    15f6:	19 86       	std	Y+9, r1	; 0x09
		_dataPackage[8] = length;
    15f8:	86 e0       	ldi	r24, 0x06	; 6
    15fa:	8a 87       	std	Y+10, r24	; 0x0a
	}
	void setAcommand(commands commandValue)
	{
		_dataPackage[9] = commandValue;
    15fc:	8b 87       	std	Y+11, r24	; 0x0b
			{
				if (combineTwofingersIntoOne())
				{
					setPacketLength(0x06);								//index 7,8
					setAcommand(Store);									//index 9
					_dataPackage[10] = 0x01;							//buffer ID
    15fe:	81 e0       	ldi	r24, 0x01	; 1
    1600:	8c 87       	std	Y+12, r24	; 0x0c
					_dataPackage[11] = 0x00;							//page ID msByte
    1602:	1d 86       	std	Y+13, r1	; 0x0d
					_dataPackage[12] = fingerID;						//page ID lsByte
    1604:	84 e0       	ldi	r24, 0x04	; 4
    1606:	8e 87       	std	Y+14, r24	; 0x0e
		setup();
	}
	~FingerPrint(){}
	void setCheckSum(int sum, int index)
	{
		_dataPackage[index] = sum >> 8;
    1608:	1f 86       	std	Y+15, r1	; 0x0f
		_dataPackage[index + 1] = sum;	
    160a:	82 e1       	ldi	r24, 0x12	; 18
    160c:	88 8b       	std	Y+16, r24	; 0x10
    160e:	fe 01       	movw	r30, r28
    1610:	32 96       	adiw	r30, 0x02	; 2
	}
	void sendPackage(int size)
{
	for (int i = 0; i < size; i++)
	{
		FingerPrintUart.UARTsend(_dataPackage[i]);
    1612:	81 91       	ld	r24, Z+
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
    1614:	d8 01       	movw	r26, r16
    1616:	9c 91       	ld	r25, X
    1618:	95 ff       	sbrs	r25, 5
    161a:	fc cf       	rjmp	.-8      	; 0x1614 <main+0x7ae>
		UDR0 = data;
    161c:	d7 01       	movw	r26, r14
    161e:	8c 93       	st	X, r24
		}
	return 0;
	}
	void sendPackage(int size)
{
	for (int i = 0; i < size; i++)
    1620:	e6 15       	cp	r30, r6
    1622:	f7 05       	cpc	r31, r7
    1624:	b1 f7       	brne	.-20     	; 0x1612 <main+0x7ac>
    1626:	fe 01       	movw	r30, r28
    1628:	bf 96       	adiw	r30, 0x2f	; 47
    162a:	80 e0       	ldi	r24, 0x00	; 0
    162c:	90 e0       	ldi	r25, 0x00	; 0
		//UCSR0C = ((1<<UCSZ00)|(1<<UCSZ01));
		UCSR0C = (3<<UCSZ00);
	}
	char checkForData()
	{
		if (UCSR0A & (1<<RXC0))
    162e:	d8 01       	movw	r26, r16
    1630:	2c 91       	ld	r18, X
			ackDataIndex++;
			*/
			/********************************need to test************************/
			//check if there is data, if so, receive the data
			//-This avoid the program from endless loop in wait for data
			if (FingerPrintUart.checkForData())
    1632:	22 23       	and	r18, r18
    1634:	4c f0       	brlt	.+18     	; 0x1648 <main+0x7e2>
		//UCSR0C = ((1<<UCSZ00)|(1<<UCSZ01));
		UCSR0C = (3<<UCSZ00);
	}
	char checkForData()
	{
		if (UCSR0A & (1<<RXC0))
    1636:	d8 01       	movw	r26, r16
    1638:	2c 91       	ld	r18, X
			ackDataIndex++;
			*/
			/********************************need to test************************/
			//check if there is data, if so, receive the data
			//-This avoid the program from endless loop in wait for data
			if (FingerPrintUart.checkForData())
    163a:	22 23       	and	r18, r18
    163c:	2c f0       	brlt	.+10     	; 0x1648 <main+0x7e2>
	}
	void getAckPackage(char ackPackSize = 12)
	{
		int ackDataIndex = 0;
		char ackData = 0;
		while(ackDataIndex < ackPackSize)
    163e:	8c 30       	cpi	r24, 0x0C	; 12
    1640:	91 05       	cpc	r25, r1
    1642:	cc f3       	brlt	.-14     	; 0x1636 <main+0x7d0>
    1644:	0c 94 2b 15 	jmp	0x2a56	; 0x2a56 <main+0x1bf0>
		}
		return 0;
	}
	char getData()
	{
		return UDR0;
    1648:	d7 01       	movw	r26, r14
    164a:	2c 91       	ld	r18, X
			//check if there is data, if so, receive the data
			//-This avoid the program from endless loop in wait for data
			if (FingerPrintUart.checkForData())
			{
				ackData = FingerPrintUart.getData();
				_ackPacket[ackDataIndex] = ackData;
    164c:	21 93       	st	Z+, r18
				ackDataIndex++;
    164e:	01 96       	adiw	r24, 0x01	; 1
	}
	void getAckPackage(char ackPackSize = 12)
	{
		int ackDataIndex = 0;
		char ackData = 0;
		while(ackDataIndex < ackPackSize)
    1650:	8c 30       	cpi	r24, 0x0C	; 12
    1652:	91 05       	cpc	r25, r1
    1654:	61 f7       	brne	.-40     	; 0x162e <main+0x7c8>
    1656:	0c 94 2b 15 	jmp	0x2a56	; 0x2a56 <main+0x1bf0>
				ackDataIndex++;
			}
		}
		for (int i = 0; i<ackPackSize;i++)
		{
			FingerPrintUart.UARTsend(_ackPacket[i]);
    165a:	81 91       	ld	r24, Z+
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
    165c:	d8 01       	movw	r26, r16
    165e:	9c 91       	ld	r25, X
    1660:	95 ff       	sbrs	r25, 5
    1662:	fc cf       	rjmp	.-8      	; 0x165c <main+0x7f6>
		UDR0 = data;
    1664:	d7 01       	movw	r26, r14
    1666:	8c 93       	st	X, r24
				ackData = FingerPrintUart.getData();
				_ackPacket[ackDataIndex] = ackData;
				ackDataIndex++;
			}
		}
		for (int i = 0; i<ackPackSize;i++)
    1668:	e4 15       	cp	r30, r4
    166a:	f5 05       	cpc	r31, r5
    166c:	b1 f7       	brne	.-20     	; 0x165a <main+0x7f4>
    166e:	0c 94 2f 15 	jmp	0x2a5e	; 0x2a5e <main+0x1bf8>
					_dataPackage[10] = 0x01;							//buffer ID
					_dataPackage[11] = 0x00;							//page ID msByte
					_dataPackage[12] = fingerID;						//page ID lsByte
					setCheckSum(command+0x06+Store+fingerID+0x01,13);	//index 13, 14
					sendAndGetAck(Store);
					if (checkAckPackError(Store))
    1672:	25 e0       	ldi	r18, 0x05	; 5
    1674:	30 e0       	ldi	r19, 0x00	; 0
		_dataPackage[13] = pwd;
	}
	void setPackagePID(char PID = command)
	{
		//01H = command;  02H = DATA packet; 07H = Ack packet; 08H = End of DATA packet
		_dataPackage[6] = PID;
    1676:	41 e0       	ldi	r20, 0x01	; 1
	{
		//Refers to the length of package content (command packets and data packets)
		//plus the length of Checksum( 2 bytes)   !!!MAX is 256 Byte!!!
		/**** {07H} = 4byte Password, 1Byte IndecationCode (command), 2Byte CheckSum ****/
		_dataPackage[7] = 0;
		_dataPackage[8] = length;
    1678:	13 e0       	ldi	r17, 0x03	; 3
	}
	~FingerPrint(){}
	void setCheckSum(int sum, int index)
	{
		_dataPackage[index] = sum >> 8;
		_dataPackage[index + 1] = sum;	
    167a:	55 e0       	ldi	r21, 0x05	; 5
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
    167c:	e0 ec       	ldi	r30, 0xC0	; 192
    167e:	f0 e0       	ldi	r31, 0x00	; 0
		UDR0 = data;
    1680:	0f 2e       	mov	r0, r31
    1682:	f6 ec       	ldi	r31, 0xC6	; 198
    1684:	ef 2e       	mov	r14, r31
    1686:	f1 2c       	mov	r15, r1
    1688:	f0 2d       	mov	r31, r0
    168a:	bf ef       	ldi	r27, 0xFF	; 255
    168c:	6d e3       	ldi	r22, 0x3D	; 61
    168e:	79 e4       	ldi	r23, 0x49	; 73
    1690:	b1 50       	subi	r27, 0x01	; 1
    1692:	60 40       	sbci	r22, 0x00	; 0
    1694:	70 40       	sbci	r23, 0x00	; 0
    1696:	e1 f7       	brne	.-8      	; 0x1690 <main+0x82a>
    1698:	00 c0       	rjmp	.+0      	; 0x169a <main+0x834>
    169a:	00 00       	nop
		_dataPackage[13] = pwd;
	}
	void setPackagePID(char PID = command)
	{
		//01H = command;  02H = DATA packet; 07H = Ack packet; 08H = End of DATA packet
		_dataPackage[6] = PID;
    169c:	48 87       	std	Y+8, r20	; 0x08
	void setPacketLength(char length = 0x07)
	{
		//Refers to the length of package content (command packets and data packets)
		//plus the length of Checksum( 2 bytes)   !!!MAX is 256 Byte!!!
		/**** {07H} = 4byte Password, 1Byte IndecationCode (command), 2Byte CheckSum ****/
		_dataPackage[7] = 0;
    169e:	19 86       	std	Y+9, r1	; 0x09
		_dataPackage[8] = length;
    16a0:	1a 87       	std	Y+10, r17	; 0x0a
	}
	void setAcommand(commands commandValue)
	{
		_dataPackage[9] = commandValue;
    16a2:	4b 87       	std	Y+11, r20	; 0x0b
		setup();
	}
	~FingerPrint(){}
	void setCheckSum(int sum, int index)
	{
		_dataPackage[index] = sum >> 8;
    16a4:	1c 86       	std	Y+12, r1	; 0x0c
		_dataPackage[index + 1] = sum;	
    16a6:	5d 87       	std	Y+13, r21	; 0x0d
    16a8:	ce 01       	movw	r24, r28
    16aa:	02 96       	adiw	r24, 0x02	; 2
	}
	void sendPackage(int size)
{
	for (int i = 0; i < size; i++)
	{
		FingerPrintUart.UARTsend(_dataPackage[i]);
    16ac:	dc 01       	movw	r26, r24
    16ae:	6d 91       	ld	r22, X+
    16b0:	cd 01       	movw	r24, r26
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
    16b2:	70 81       	ld	r23, Z
    16b4:	75 ff       	sbrs	r23, 5
    16b6:	fd cf       	rjmp	.-6      	; 0x16b2 <main+0x84c>
		UDR0 = data;
    16b8:	d7 01       	movw	r26, r14
    16ba:	6c 93       	st	X, r22
		}
	return 0;
	}
	void sendPackage(int size)
{
	for (int i = 0; i < size; i++)
    16bc:	82 15       	cp	r24, r2
    16be:	93 05       	cpc	r25, r3
    16c0:	a9 f7       	brne	.-22     	; 0x16ac <main+0x846>
    16c2:	be 01       	movw	r22, r28
    16c4:	61 5d       	subi	r22, 0xD1	; 209
    16c6:	7f 4f       	sbci	r23, 0xFF	; 255
    16c8:	80 e0       	ldi	r24, 0x00	; 0
    16ca:	90 e0       	ldi	r25, 0x00	; 0
		//UCSR0C = ((1<<UCSZ00)|(1<<UCSZ01));
		UCSR0C = (3<<UCSZ00);
	}
	char checkForData()
	{
		if (UCSR0A & (1<<RXC0))
    16cc:	00 81       	ld	r16, Z
			ackDataIndex++;
			*/
			/********************************need to test************************/
			//check if there is data, if so, receive the data
			//-This avoid the program from endless loop in wait for data
			if (FingerPrintUart.checkForData())
    16ce:	00 23       	and	r16, r16
    16d0:	44 f0       	brlt	.+16     	; 0x16e2 <main+0x87c>
		//UCSR0C = ((1<<UCSZ00)|(1<<UCSZ01));
		UCSR0C = (3<<UCSZ00);
	}
	char checkForData()
	{
		if (UCSR0A & (1<<RXC0))
    16d2:	00 81       	ld	r16, Z
			ackDataIndex++;
			*/
			/********************************need to test************************/
			//check if there is data, if so, receive the data
			//-This avoid the program from endless loop in wait for data
			if (FingerPrintUart.checkForData())
    16d4:	00 23       	and	r16, r16
    16d6:	2c f0       	brlt	.+10     	; 0x16e2 <main+0x87c>
	}
	void getAckPackage(char ackPackSize = 12)
	{
		int ackDataIndex = 0;
		char ackData = 0;
		while(ackDataIndex < ackPackSize)
    16d8:	8c 30       	cpi	r24, 0x0C	; 12
    16da:	91 05       	cpc	r25, r1
    16dc:	d4 f3       	brlt	.-12     	; 0x16d2 <main+0x86c>
    16de:	0c 94 3e 15 	jmp	0x2a7c	; 0x2a7c <main+0x1c16>
		}
		return 0;
	}
	char getData()
	{
		return UDR0;
    16e2:	d7 01       	movw	r26, r14
    16e4:	0c 91       	ld	r16, X
			//check if there is data, if so, receive the data
			//-This avoid the program from endless loop in wait for data
			if (FingerPrintUart.checkForData())
			{
				ackData = FingerPrintUart.getData();
				_ackPacket[ackDataIndex] = ackData;
    16e6:	db 01       	movw	r26, r22
    16e8:	0d 93       	st	X+, r16
    16ea:	bd 01       	movw	r22, r26
				ackDataIndex++;
    16ec:	01 96       	adiw	r24, 0x01	; 1
	}
	void getAckPackage(char ackPackSize = 12)
	{
		int ackDataIndex = 0;
		char ackData = 0;
		while(ackDataIndex < ackPackSize)
    16ee:	8c 30       	cpi	r24, 0x0C	; 12
    16f0:	91 05       	cpc	r25, r1
    16f2:	61 f7       	brne	.-40     	; 0x16cc <main+0x866>
    16f4:	0c 94 3e 15 	jmp	0x2a7c	; 0x2a7c <main+0x1c16>
				ackDataIndex++;
			}
		}
		for (int i = 0; i<ackPackSize;i++)
		{
			FingerPrintUart.UARTsend(_ackPacket[i]);
    16f8:	dc 01       	movw	r26, r24
    16fa:	6d 91       	ld	r22, X+
    16fc:	cd 01       	movw	r24, r26
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
    16fe:	70 81       	ld	r23, Z
    1700:	75 ff       	sbrs	r23, 5
    1702:	fd cf       	rjmp	.-6      	; 0x16fe <main+0x898>
		UDR0 = data;
    1704:	d7 01       	movw	r26, r14
    1706:	6c 93       	st	X, r22
				ackData = FingerPrintUart.getData();
				_ackPacket[ackDataIndex] = ackData;
				ackDataIndex++;
			}
		}
		for (int i = 0; i<ackPackSize;i++)
    1708:	84 15       	cp	r24, r4
    170a:	95 05       	cpc	r25, r5
    170c:	a9 f7       	brne	.-22     	; 0x16f8 <main+0x892>
    170e:	21 50       	subi	r18, 0x01	; 1
    1710:	31 09       	sbc	r19, r1
			}
			return 0;
}
	void blinkTheSensor(char blinkTimes = 1)
	{
		for(int i = 0; i < blinkTimes; i++)
    1712:	09 f0       	breq	.+2      	; 0x1716 <main+0x8b0>
    1714:	ba cf       	rjmp	.-140    	; 0x168a <main+0x824>
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
    1716:	a0 ec       	ldi	r26, 0xC0	; 192
    1718:	b0 e0       	ldi	r27, 0x00	; 0
		UDR0 = data;
    171a:	86 ec       	ldi	r24, 0xC6	; 198
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	7e 01       	movw	r14, r28
    1720:	e3 e1       	ldi	r30, 0x13	; 19
    1722:	ee 0e       	add	r14, r30
    1724:	f1 1c       	adc	r15, r1
    1726:	9e 01       	movw	r18, r28
    1728:	21 5c       	subi	r18, 0xC1	; 193
    172a:	3f 4f       	sbci	r19, 0xFF	; 255
		_dataPackage[13] = pwd;
	}
	void setPackagePID(char PID = command)
	{
		//01H = command;  02H = DATA packet; 07H = Ack packet; 08H = End of DATA packet
		_dataPackage[6] = PID;
    172c:	dd 24       	eor	r13, r13
    172e:	d3 94       	inc	r13
		}
		return 0;
	}
	bool checkAckPackError(char cmd)
	{
		int confCodeIndex = (int)getAckPackConfirmCodeIndex(cmd);
    1730:	0f 2e       	mov	r0, r31
    1732:	fa e0       	ldi	r31, 0x0A	; 10
    1734:	cf 2e       	mov	r12, r31
    1736:	f0 2d       	mov	r31, r0
    1738:	91 2c       	mov	r9, r1
	}
	~FingerPrint(){}
	void setCheckSum(int sum, int index)
	{
		_dataPackage[index] = sum >> 8;
		_dataPackage[index + 1] = sum;	
    173a:	68 94       	set
    173c:	66 24       	eor	r6, r6
    173e:	63 f8       	bld	r6, 3
	{
		int confCodeIndex = (int)getAckPackConfirmCodeIndex(cmd);
		char confCode = _ackPacket[confCodeIndex - 1];
		switch(confCode)
		{
			case 0x00: return 1;
    1740:	ca 53       	subi	r28, 0x3A	; 58
    1742:	df 4f       	sbci	r29, 0xFF	; 255
    1744:	88 80       	ld	r8, Y
    1746:	c6 5c       	subi	r28, 0xC6	; 198
    1748:	d0 40       	sbci	r29, 0x00	; 0
    174a:	ff ef       	ldi	r31, 0xFF	; 255
    174c:	41 ee       	ldi	r20, 0xE1	; 225
    174e:	54 e0       	ldi	r21, 0x04	; 4
    1750:	f1 50       	subi	r31, 0x01	; 1
    1752:	40 40       	sbci	r20, 0x00	; 0
    1754:	50 40       	sbci	r21, 0x00	; 0
    1756:	e1 f7       	brne	.-8      	; 0x1750 <main+0x8ea>
    1758:	00 c0       	rjmp	.+0      	; 0x175a <main+0x8f4>
    175a:	00 00       	nop
		_dataPackage[13] = pwd;
	}
	void setPackagePID(char PID = command)
	{
		//01H = command;  02H = DATA packet; 07H = Ack packet; 08H = End of DATA packet
		_dataPackage[6] = PID;
    175c:	d8 86       	std	Y+8, r13	; 0x08
	void setPacketLength(char length = 0x07)
	{
		//Refers to the length of package content (command packets and data packets)
		//plus the length of Checksum( 2 bytes)   !!!MAX is 256 Byte!!!
		/**** {07H} = 4byte Password, 1Byte IndecationCode (command), 2Byte CheckSum ****/
		_dataPackage[7] = 0;
    175e:	19 86       	std	Y+9, r1	; 0x09
		_dataPackage[8] = length;
    1760:	63 e0       	ldi	r22, 0x03	; 3
    1762:	6a 87       	std	Y+10, r22	; 0x0a
	}
	void setAcommand(commands commandValue)
	{
		_dataPackage[9] = commandValue;
    1764:	db 86       	std	Y+11, r13	; 0x0b
		setup();
	}
	~FingerPrint(){}
	void setCheckSum(int sum, int index)
	{
		_dataPackage[index] = sum >> 8;
    1766:	1c 86       	std	Y+12, r1	; 0x0c
		_dataPackage[index + 1] = sum;	
    1768:	75 e0       	ldi	r23, 0x05	; 5
    176a:	7d 87       	std	Y+13, r23	; 0x0d
    176c:	fe 01       	movw	r30, r28
    176e:	32 96       	adiw	r30, 0x02	; 2
    1770:	bf 01       	movw	r22, r30
	}
	void sendPackage(int size)
{
	for (int i = 0; i < size; i++)
	{
		FingerPrintUart.UARTsend(_dataPackage[i]);
    1772:	fb 01       	movw	r30, r22
    1774:	51 91       	ld	r21, Z+
    1776:	bf 01       	movw	r22, r30
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
    1778:	4c 91       	ld	r20, X
    177a:	45 ff       	sbrs	r20, 5
    177c:	fd cf       	rjmp	.-6      	; 0x1778 <main+0x912>
		UDR0 = data;
    177e:	fc 01       	movw	r30, r24
    1780:	50 83       	st	Z, r21
		}
	return 0;
	}
	void sendPackage(int size)
{
	for (int i = 0; i < size; i++)
    1782:	62 15       	cp	r22, r2
    1784:	73 05       	cpc	r23, r3
    1786:	a9 f7       	brne	.-22     	; 0x1772 <main+0x90c>
    1788:	fe 01       	movw	r30, r28
    178a:	bf 96       	adiw	r30, 0x2f	; 47
    178c:	60 e0       	ldi	r22, 0x00	; 0
    178e:	70 e0       	ldi	r23, 0x00	; 0
    1790:	8f 01       	movw	r16, r30
		//UCSR0C = ((1<<UCSZ00)|(1<<UCSZ01));
		UCSR0C = (3<<UCSZ00);
	}
	char checkForData()
	{
		if (UCSR0A & (1<<RXC0))
    1792:	4c 91       	ld	r20, X
			ackDataIndex++;
			*/
			/********************************need to test************************/
			//check if there is data, if so, receive the data
			//-This avoid the program from endless loop in wait for data
			if (FingerPrintUart.checkForData())
    1794:	44 23       	and	r20, r20
    1796:	54 f0       	brlt	.+20     	; 0x17ac <main+0x946>
    1798:	f8 01       	movw	r30, r16
		//UCSR0C = ((1<<UCSZ00)|(1<<UCSZ01));
		UCSR0C = (3<<UCSZ00);
	}
	char checkForData()
	{
		if (UCSR0A & (1<<RXC0))
    179a:	4c 91       	ld	r20, X
			ackDataIndex++;
			*/
			/********************************need to test************************/
			//check if there is data, if so, receive the data
			//-This avoid the program from endless loop in wait for data
			if (FingerPrintUart.checkForData())
    179c:	44 23       	and	r20, r20
    179e:	2c f0       	brlt	.+10     	; 0x17aa <main+0x944>
	}
	void getAckPackage(char ackPackSize = 12)
	{
		int ackDataIndex = 0;
		char ackData = 0;
		while(ackDataIndex < ackPackSize)
    17a0:	6c 30       	cpi	r22, 0x0C	; 12
    17a2:	71 05       	cpc	r23, r1
    17a4:	d4 f3       	brlt	.-12     	; 0x179a <main+0x934>
    17a6:	0c 94 42 15 	jmp	0x2a84	; 0x2a84 <main+0x1c1e>
    17aa:	8f 01       	movw	r16, r30
		}
		return 0;
	}
	char getData()
	{
		return UDR0;
    17ac:	fc 01       	movw	r30, r24
    17ae:	40 81       	ld	r20, Z
			//check if there is data, if so, receive the data
			//-This avoid the program from endless loop in wait for data
			if (FingerPrintUart.checkForData())
			{
				ackData = FingerPrintUart.getData();
				_ackPacket[ackDataIndex] = ackData;
    17b0:	f8 01       	movw	r30, r16
    17b2:	41 93       	st	Z+, r20
    17b4:	8f 01       	movw	r16, r30
				ackDataIndex++;
    17b6:	6f 5f       	subi	r22, 0xFF	; 255
    17b8:	7f 4f       	sbci	r23, 0xFF	; 255
	}
	void getAckPackage(char ackPackSize = 12)
	{
		int ackDataIndex = 0;
		char ackData = 0;
		while(ackDataIndex < ackPackSize)
    17ba:	6c 30       	cpi	r22, 0x0C	; 12
    17bc:	71 05       	cpc	r23, r1
    17be:	49 f7       	brne	.-46     	; 0x1792 <main+0x92c>
    17c0:	0c 94 42 15 	jmp	0x2a84	; 0x2a84 <main+0x1c1e>
				ackDataIndex++;
			}
		}
		for (int i = 0; i<ackPackSize;i++)
		{
			FingerPrintUart.UARTsend(_ackPacket[i]);
    17c4:	fb 01       	movw	r30, r22
    17c6:	51 91       	ld	r21, Z+
    17c8:	bf 01       	movw	r22, r30
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
    17ca:	4c 91       	ld	r20, X
    17cc:	45 ff       	sbrs	r20, 5
    17ce:	fd cf       	rjmp	.-6      	; 0x17ca <main+0x964>
		UDR0 = data;
    17d0:	fc 01       	movw	r30, r24
    17d2:	50 83       	st	Z, r21
				ackData = FingerPrintUart.getData();
				_ackPacket[ackDataIndex] = ackData;
				ackDataIndex++;
			}
		}
		for (int i = 0; i<ackPackSize;i++)
    17d4:	64 15       	cp	r22, r4
    17d6:	75 05       	cpc	r23, r5
    17d8:	a9 f7       	brne	.-22     	; 0x17c4 <main+0x95e>
    17da:	0c 94 47 15 	jmp	0x2a8e	; 0x2a8e <main+0x1c28>
		{
			confIndex = packSize - 2;
		}
		for (int i = 0; i < packSize;i++)
		{
			while(_ackPacket[i] != 0xEF && i < packSize)
    17de:	4c 30       	cpi	r20, 0x0C	; 12
    17e0:	51 05       	cpc	r21, r1
    17e2:	11 f4       	brne	.+4      	; 0x17e8 <main+0x982>
    17e4:	0c 94 52 15 	jmp	0x2aa4	; 0x2aa4 <main+0x1c3e>
			{
				i++;
    17e8:	4f 5f       	subi	r20, 0xFF	; 255
    17ea:	5f 4f       	sbci	r21, 0xFF	; 255
		{
			confIndex = packSize - 2;
		}
		for (int i = 0; i < packSize;i++)
		{
			while(_ackPacket[i] != 0xEF && i < packSize)
    17ec:	61 91       	ld	r22, Z+
    17ee:	6f 3e       	cpi	r22, 0xEF	; 239
    17f0:	b1 f7       	brne	.-20     	; 0x17de <main+0x978>
    17f2:	0c 94 52 15 	jmp	0x2aa4	; 0x2aa4 <main+0x1c3e>
	}
	bool checkAckPackError(char cmd)
	{
		int confCodeIndex = (int)getAckPackConfirmCodeIndex(cmd);
		char confCode = _ackPacket[confCodeIndex - 1];
		switch(confCode)
    17f6:	48 ad       	ldd	r20, Y+56	; 0x38
    17f8:	50 e0       	ldi	r21, 0x00	; 0
    17fa:	4a 31       	cpi	r20, 0x1A	; 26
    17fc:	51 05       	cpc	r21, r1
    17fe:	08 f0       	brcs	.+2      	; 0x1802 <main+0x99c>
    1800:	a4 cf       	rjmp	.-184    	; 0x174a <main+0x8e4>
    1802:	fa 01       	movw	r30, r20
    1804:	e9 55       	subi	r30, 0x59	; 89
    1806:	fe 4f       	sbci	r31, 0xFE	; 254
    1808:	0c 94 fb 15 	jmp	0x2bf6	; 0x2bf6 <__tablejump2__>
		}
		return 0;
	}
	bool checkAckPackError(char cmd)
	{
		int confCodeIndex = (int)getAckPackConfirmCodeIndex(cmd);
    180c:	0c 2d       	mov	r16, r12
    180e:	19 2d       	mov	r17, r9
		}
	return 0;
	}
	void sendPackage(int size)
{
	for (int i = 0; i < size; i++)
    1810:	65 e0       	ldi	r22, 0x05	; 5
    1812:	70 e0       	ldi	r23, 0x00	; 0
	bool reSendPack(int confIndex, int cmd ,int reTryTimes = 1)
	{
		for (int i = 0; i < reTryTimes; i++)
		{
			sendAndGetAck(cmd);
			if (_ackPacket[confIndex] == 0)
    1814:	4f e2       	ldi	r20, 0x2F	; 47
    1816:	50 e0       	ldi	r21, 0x00	; 0
    1818:	4c 0f       	add	r20, r28
    181a:	5d 1f       	adc	r21, r29
    181c:	04 0f       	add	r16, r20
    181e:	15 1f       	adc	r17, r21
    1820:	c0 c1       	rjmp	.+896    	; 0x1ba2 <main+0xd3c>
		}
		return 0;
	}
	bool checkAckPackError(char cmd)
	{
		int confCodeIndex = (int)getAckPackConfirmCodeIndex(cmd);
    1822:	0c 2d       	mov	r16, r12
    1824:	19 2d       	mov	r17, r9
		}
	return 0;
	}
	void sendPackage(int size)
{
	for (int i = 0; i < size; i++)
    1826:	64 e0       	ldi	r22, 0x04	; 4
    1828:	70 e0       	ldi	r23, 0x00	; 0
	bool reSendPack(int confIndex, int cmd ,int reTryTimes = 1)
	{
		for (int i = 0; i < reTryTimes; i++)
		{
			sendAndGetAck(cmd);
			if (_ackPacket[confIndex] == 0)
    182a:	ef e2       	ldi	r30, 0x2F	; 47
    182c:	f0 e0       	ldi	r31, 0x00	; 0
    182e:	ec 0f       	add	r30, r28
    1830:	fd 1f       	adc	r31, r29
    1832:	0e 0f       	add	r16, r30
    1834:	1f 1f       	adc	r17, r31
    1836:	2b c1       	rjmp	.+598    	; 0x1a8e <main+0xc28>
		}
		return 0;
	}
	bool checkAckPackError(char cmd)
	{
		int confCodeIndex = (int)getAckPackConfirmCodeIndex(cmd);
    1838:	0c 2d       	mov	r16, r12
    183a:	19 2d       	mov	r17, r9
		}
	return 0;
	}
	void sendPackage(int size)
{
	for (int i = 0; i < size; i++)
    183c:	63 e0       	ldi	r22, 0x03	; 3
    183e:	70 e0       	ldi	r23, 0x00	; 0
	bool reSendPack(int confIndex, int cmd ,int reTryTimes = 1)
	{
		for (int i = 0; i < reTryTimes; i++)
		{
			sendAndGetAck(cmd);
			if (_ackPacket[confIndex] == 0)
    1840:	4f e2       	ldi	r20, 0x2F	; 47
    1842:	50 e0       	ldi	r21, 0x00	; 0
    1844:	4c 0f       	add	r20, r28
    1846:	5d 1f       	adc	r21, r29
    1848:	04 0f       	add	r16, r20
    184a:	15 1f       	adc	r17, r21
    184c:	95 c0       	rjmp	.+298    	; 0x1978 <main+0xb12>
		}
		return 0;
	}
	bool checkAckPackError(char cmd)
	{
		int confCodeIndex = (int)getAckPackConfirmCodeIndex(cmd);
    184e:	0c 2d       	mov	r16, r12
    1850:	19 2d       	mov	r17, r9
    1852:	65 e0       	ldi	r22, 0x05	; 5
    1854:	70 e0       	ldi	r23, 0x00	; 0
	bool reSendPack(int confIndex, int cmd ,int reTryTimes = 1)
	{
		for (int i = 0; i < reTryTimes; i++)
		{
			sendAndGetAck(cmd);
			if (_ackPacket[confIndex] == 0)
    1856:	ef e2       	ldi	r30, 0x2F	; 47
    1858:	f0 e0       	ldi	r31, 0x00	; 0
    185a:	ec 0f       	add	r30, r28
    185c:	fd 1f       	adc	r31, r29
    185e:	0e 0f       	add	r16, r30
    1860:	1f 1f       	adc	r17, r31
		}
		return 0;
	}
	bool checkAckPackError(char cmd)
	{
		int confCodeIndex = (int)getAckPackConfirmCodeIndex(cmd);
    1862:	fe 01       	movw	r30, r28
    1864:	32 96       	adiw	r30, 0x02	; 2
    1866:	c8 53       	subi	r28, 0x38	; 56
    1868:	df 4f       	sbci	r29, 0xFF	; 255
    186a:	f9 83       	std	Y+1, r31	; 0x01
    186c:	e8 83       	st	Y, r30
    186e:	c8 5c       	subi	r28, 0xC8	; 200
    1870:	d0 40       	sbci	r29, 0x00	; 0
	}
	void sendPackage(int size)
{
	for (int i = 0; i < size; i++)
	{
		FingerPrintUart.UARTsend(_dataPackage[i]);
    1872:	c8 53       	subi	r28, 0x38	; 56
    1874:	df 4f       	sbci	r29, 0xFF	; 255
    1876:	e8 81       	ld	r30, Y
    1878:	f9 81       	ldd	r31, Y+1	; 0x01
    187a:	c8 5c       	subi	r28, 0xC8	; 200
    187c:	d0 40       	sbci	r29, 0x00	; 0
    187e:	51 91       	ld	r21, Z+
    1880:	c8 53       	subi	r28, 0x38	; 56
    1882:	df 4f       	sbci	r29, 0xFF	; 255
    1884:	f9 83       	std	Y+1, r31	; 0x01
    1886:	e8 83       	st	Y, r30
    1888:	c8 5c       	subi	r28, 0xC8	; 200
    188a:	d0 40       	sbci	r29, 0x00	; 0
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
    188c:	4c 91       	ld	r20, X
    188e:	45 ff       	sbrs	r20, 5
    1890:	fd cf       	rjmp	.-6      	; 0x188c <main+0xa26>
    1892:	c8 53       	subi	r28, 0x38	; 56
    1894:	df 4f       	sbci	r29, 0xFF	; 255
    1896:	f9 83       	std	Y+1, r31	; 0x01
    1898:	e8 83       	st	Y, r30
    189a:	c8 5c       	subi	r28, 0xC8	; 200
    189c:	d0 40       	sbci	r29, 0x00	; 0
		UDR0 = data;
    189e:	fc 01       	movw	r30, r24
    18a0:	50 83       	st	Z, r21
		}
	return 0;
	}
	void sendPackage(int size)
{
	for (int i = 0; i < size; i++)
    18a2:	c8 53       	subi	r28, 0x38	; 56
    18a4:	df 4f       	sbci	r29, 0xFF	; 255
    18a6:	48 81       	ld	r20, Y
    18a8:	59 81       	ldd	r21, Y+1	; 0x01
    18aa:	c8 5c       	subi	r28, 0xC8	; 200
    18ac:	d0 40       	sbci	r29, 0x00	; 0
    18ae:	42 15       	cp	r20, r2
    18b0:	53 05       	cpc	r21, r3
    18b2:	f9 f6       	brne	.-66     	; 0x1872 <main+0xa0c>
    18b4:	fe 01       	movw	r30, r28
    18b6:	bf 96       	adiw	r30, 0x2f	; 47
    18b8:	40 e0       	ldi	r20, 0x00	; 0
    18ba:	50 e0       	ldi	r21, 0x00	; 0
    18bc:	c8 53       	subi	r28, 0x38	; 56
    18be:	df 4f       	sbci	r29, 0xFF	; 255
    18c0:	f9 83       	std	Y+1, r31	; 0x01
    18c2:	e8 83       	st	Y, r30
    18c4:	c8 5c       	subi	r28, 0xC8	; 200
    18c6:	d0 40       	sbci	r29, 0x00	; 0
		//UCSR0C = ((1<<UCSZ00)|(1<<UCSZ01));
		UCSR0C = (3<<UCSZ00);
	}
	char checkForData()
	{
		if (UCSR0A & (1<<RXC0))
    18c8:	7c 90       	ld	r7, X
			ackDataIndex++;
			*/
			/********************************need to test************************/
			//check if there is data, if so, receive the data
			//-This avoid the program from endless loop in wait for data
			if (FingerPrintUart.checkForData())
    18ca:	77 20       	and	r7, r7
    18cc:	a4 f0       	brlt	.+40     	; 0x18f6 <main+0xa90>
    18ce:	c8 53       	subi	r28, 0x38	; 56
    18d0:	df 4f       	sbci	r29, 0xFF	; 255
    18d2:	e8 81       	ld	r30, Y
    18d4:	f9 81       	ldd	r31, Y+1	; 0x01
    18d6:	c8 5c       	subi	r28, 0xC8	; 200
    18d8:	d0 40       	sbci	r29, 0x00	; 0
		//UCSR0C = ((1<<UCSZ00)|(1<<UCSZ01));
		UCSR0C = (3<<UCSZ00);
	}
	char checkForData()
	{
		if (UCSR0A & (1<<RXC0))
    18da:	7c 90       	ld	r7, X
			ackDataIndex++;
			*/
			/********************************need to test************************/
			//check if there is data, if so, receive the data
			//-This avoid the program from endless loop in wait for data
			if (FingerPrintUart.checkForData())
    18dc:	77 20       	and	r7, r7
    18de:	2c f0       	brlt	.+10     	; 0x18ea <main+0xa84>
	}
	void getAckPackage(char ackPackSize = 12)
	{
		int ackDataIndex = 0;
		char ackData = 0;
		while(ackDataIndex < ackPackSize)
    18e0:	4c 30       	cpi	r20, 0x0C	; 12
    18e2:	51 05       	cpc	r21, r1
    18e4:	d4 f3       	brlt	.-12     	; 0x18da <main+0xa74>
    18e6:	0c 94 67 15 	jmp	0x2ace	; 0x2ace <main+0x1c68>
    18ea:	c8 53       	subi	r28, 0x38	; 56
    18ec:	df 4f       	sbci	r29, 0xFF	; 255
    18ee:	f9 83       	std	Y+1, r31	; 0x01
    18f0:	e8 83       	st	Y, r30
    18f2:	c8 5c       	subi	r28, 0xC8	; 200
    18f4:	d0 40       	sbci	r29, 0x00	; 0
		}
		return 0;
	}
	char getData()
	{
		return UDR0;
    18f6:	fc 01       	movw	r30, r24
    18f8:	70 80       	ld	r7, Z
			//check if there is data, if so, receive the data
			//-This avoid the program from endless loop in wait for data
			if (FingerPrintUart.checkForData())
			{
				ackData = FingerPrintUart.getData();
				_ackPacket[ackDataIndex] = ackData;
    18fa:	c8 53       	subi	r28, 0x38	; 56
    18fc:	df 4f       	sbci	r29, 0xFF	; 255
    18fe:	e8 81       	ld	r30, Y
    1900:	f9 81       	ldd	r31, Y+1	; 0x01
    1902:	c8 5c       	subi	r28, 0xC8	; 200
    1904:	d0 40       	sbci	r29, 0x00	; 0
    1906:	71 92       	st	Z+, r7
    1908:	c8 53       	subi	r28, 0x38	; 56
    190a:	df 4f       	sbci	r29, 0xFF	; 255
    190c:	f9 83       	std	Y+1, r31	; 0x01
    190e:	e8 83       	st	Y, r30
    1910:	c8 5c       	subi	r28, 0xC8	; 200
    1912:	d0 40       	sbci	r29, 0x00	; 0
				ackDataIndex++;
    1914:	4f 5f       	subi	r20, 0xFF	; 255
    1916:	5f 4f       	sbci	r21, 0xFF	; 255
	}
	void getAckPackage(char ackPackSize = 12)
	{
		int ackDataIndex = 0;
		char ackData = 0;
		while(ackDataIndex < ackPackSize)
    1918:	4c 30       	cpi	r20, 0x0C	; 12
    191a:	51 05       	cpc	r21, r1
    191c:	a9 f6       	brne	.-86     	; 0x18c8 <main+0xa62>
    191e:	0c 94 67 15 	jmp	0x2ace	; 0x2ace <main+0x1c68>
				ackDataIndex++;
			}
		}
		for (int i = 0; i<ackPackSize;i++)
		{
			FingerPrintUart.UARTsend(_ackPacket[i]);
    1922:	c8 53       	subi	r28, 0x38	; 56
    1924:	df 4f       	sbci	r29, 0xFF	; 255
    1926:	e8 81       	ld	r30, Y
    1928:	f9 81       	ldd	r31, Y+1	; 0x01
    192a:	c8 5c       	subi	r28, 0xC8	; 200
    192c:	d0 40       	sbci	r29, 0x00	; 0
    192e:	51 91       	ld	r21, Z+
    1930:	c8 53       	subi	r28, 0x38	; 56
    1932:	df 4f       	sbci	r29, 0xFF	; 255
    1934:	f9 83       	std	Y+1, r31	; 0x01
    1936:	e8 83       	st	Y, r30
    1938:	c8 5c       	subi	r28, 0xC8	; 200
    193a:	d0 40       	sbci	r29, 0x00	; 0
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
    193c:	4c 91       	ld	r20, X
    193e:	45 ff       	sbrs	r20, 5
    1940:	fd cf       	rjmp	.-6      	; 0x193c <main+0xad6>
    1942:	c8 53       	subi	r28, 0x38	; 56
    1944:	df 4f       	sbci	r29, 0xFF	; 255
    1946:	f9 83       	std	Y+1, r31	; 0x01
    1948:	e8 83       	st	Y, r30
    194a:	c8 5c       	subi	r28, 0xC8	; 200
    194c:	d0 40       	sbci	r29, 0x00	; 0
		UDR0 = data;
    194e:	fc 01       	movw	r30, r24
    1950:	50 83       	st	Z, r21
				ackData = FingerPrintUart.getData();
				_ackPacket[ackDataIndex] = ackData;
				ackDataIndex++;
			}
		}
		for (int i = 0; i<ackPackSize;i++)
    1952:	c8 53       	subi	r28, 0x38	; 56
    1954:	df 4f       	sbci	r29, 0xFF	; 255
    1956:	48 81       	ld	r20, Y
    1958:	59 81       	ldd	r21, Y+1	; 0x01
    195a:	c8 5c       	subi	r28, 0xC8	; 200
    195c:	d0 40       	sbci	r29, 0x00	; 0
    195e:	44 15       	cp	r20, r4
    1960:	55 05       	cpc	r21, r5
    1962:	f9 f6       	brne	.-66     	; 0x1922 <main+0xabc>
	bool reSendPack(int confIndex, int cmd ,int reTryTimes = 1)
	{
		for (int i = 0; i < reTryTimes; i++)
		{
			sendAndGetAck(cmd);
			if (_ackPacket[confIndex] == 0)
    1964:	f8 01       	movw	r30, r16
    1966:	40 81       	ld	r20, Z
    1968:	44 23       	and	r20, r20
    196a:	09 f4       	brne	.+2      	; 0x196e <main+0xb08>
    196c:	a2 c1       	rjmp	.+836    	; 0x1cb2 <main+0xe4c>
    196e:	61 50       	subi	r22, 0x01	; 1
    1970:	71 09       	sbc	r23, r1
		}
		return confIndex;
	}
	bool reSendPack(int confIndex, int cmd ,int reTryTimes = 1)
	{
		for (int i = 0; i < reTryTimes; i++)
    1972:	09 f0       	breq	.+2      	; 0x1976 <main+0xb10>
    1974:	76 cf       	rjmp	.-276    	; 0x1862 <main+0x9fc>
    1976:	e9 ce       	rjmp	.-558    	; 0x174a <main+0x8e4>
		}
	return 0;
	}
	void sendPackage(int size)
{
	for (int i = 0; i < size; i++)
    1978:	fe 01       	movw	r30, r28
    197a:	32 96       	adiw	r30, 0x02	; 2
    197c:	c8 53       	subi	r28, 0x38	; 56
    197e:	df 4f       	sbci	r29, 0xFF	; 255
    1980:	f9 83       	std	Y+1, r31	; 0x01
    1982:	e8 83       	st	Y, r30
    1984:	c8 5c       	subi	r28, 0xC8	; 200
    1986:	d0 40       	sbci	r29, 0x00	; 0
	{
		FingerPrintUart.UARTsend(_dataPackage[i]);
    1988:	c8 53       	subi	r28, 0x38	; 56
    198a:	df 4f       	sbci	r29, 0xFF	; 255
    198c:	e8 81       	ld	r30, Y
    198e:	f9 81       	ldd	r31, Y+1	; 0x01
    1990:	c8 5c       	subi	r28, 0xC8	; 200
    1992:	d0 40       	sbci	r29, 0x00	; 0
    1994:	51 91       	ld	r21, Z+
    1996:	c8 53       	subi	r28, 0x38	; 56
    1998:	df 4f       	sbci	r29, 0xFF	; 255
    199a:	f9 83       	std	Y+1, r31	; 0x01
    199c:	e8 83       	st	Y, r30
    199e:	c8 5c       	subi	r28, 0xC8	; 200
    19a0:	d0 40       	sbci	r29, 0x00	; 0
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
    19a2:	4c 91       	ld	r20, X
    19a4:	45 ff       	sbrs	r20, 5
    19a6:	fd cf       	rjmp	.-6      	; 0x19a2 <main+0xb3c>
    19a8:	c8 53       	subi	r28, 0x38	; 56
    19aa:	df 4f       	sbci	r29, 0xFF	; 255
    19ac:	f9 83       	std	Y+1, r31	; 0x01
    19ae:	e8 83       	st	Y, r30
    19b0:	c8 5c       	subi	r28, 0xC8	; 200
    19b2:	d0 40       	sbci	r29, 0x00	; 0
		UDR0 = data;
    19b4:	fc 01       	movw	r30, r24
    19b6:	50 83       	st	Z, r21
		}
	return 0;
	}
	void sendPackage(int size)
{
	for (int i = 0; i < size; i++)
    19b8:	c8 53       	subi	r28, 0x38	; 56
    19ba:	df 4f       	sbci	r29, 0xFF	; 255
    19bc:	48 81       	ld	r20, Y
    19be:	59 81       	ldd	r21, Y+1	; 0x01
    19c0:	c8 5c       	subi	r28, 0xC8	; 200
    19c2:	d0 40       	sbci	r29, 0x00	; 0
    19c4:	42 15       	cp	r20, r2
    19c6:	53 05       	cpc	r21, r3
    19c8:	f9 f6       	brne	.-66     	; 0x1988 <main+0xb22>
    19ca:	fe 01       	movw	r30, r28
    19cc:	bf 96       	adiw	r30, 0x2f	; 47
    19ce:	40 e0       	ldi	r20, 0x00	; 0
    19d0:	50 e0       	ldi	r21, 0x00	; 0
    19d2:	c8 53       	subi	r28, 0x38	; 56
    19d4:	df 4f       	sbci	r29, 0xFF	; 255
    19d6:	f9 83       	std	Y+1, r31	; 0x01
    19d8:	e8 83       	st	Y, r30
    19da:	c8 5c       	subi	r28, 0xC8	; 200
    19dc:	d0 40       	sbci	r29, 0x00	; 0
		//UCSR0C = ((1<<UCSZ00)|(1<<UCSZ01));
		UCSR0C = (3<<UCSZ00);
	}
	char checkForData()
	{
		if (UCSR0A & (1<<RXC0))
    19de:	7c 90       	ld	r7, X
			ackDataIndex++;
			*/
			/********************************need to test************************/
			//check if there is data, if so, receive the data
			//-This avoid the program from endless loop in wait for data
			if (FingerPrintUart.checkForData())
    19e0:	77 20       	and	r7, r7
    19e2:	a4 f0       	brlt	.+40     	; 0x1a0c <main+0xba6>
    19e4:	c8 53       	subi	r28, 0x38	; 56
    19e6:	df 4f       	sbci	r29, 0xFF	; 255
    19e8:	e8 81       	ld	r30, Y
    19ea:	f9 81       	ldd	r31, Y+1	; 0x01
    19ec:	c8 5c       	subi	r28, 0xC8	; 200
    19ee:	d0 40       	sbci	r29, 0x00	; 0
		//UCSR0C = ((1<<UCSZ00)|(1<<UCSZ01));
		UCSR0C = (3<<UCSZ00);
	}
	char checkForData()
	{
		if (UCSR0A & (1<<RXC0))
    19f0:	7c 90       	ld	r7, X
			ackDataIndex++;
			*/
			/********************************need to test************************/
			//check if there is data, if so, receive the data
			//-This avoid the program from endless loop in wait for data
			if (FingerPrintUart.checkForData())
    19f2:	77 20       	and	r7, r7
    19f4:	2c f0       	brlt	.+10     	; 0x1a00 <main+0xb9a>
	}
	void getAckPackage(char ackPackSize = 12)
	{
		int ackDataIndex = 0;
		char ackData = 0;
		while(ackDataIndex < ackPackSize)
    19f6:	4c 30       	cpi	r20, 0x0C	; 12
    19f8:	51 05       	cpc	r21, r1
    19fa:	d4 f3       	brlt	.-12     	; 0x19f0 <main+0xb8a>
    19fc:	0c 94 71 15 	jmp	0x2ae2	; 0x2ae2 <main+0x1c7c>
    1a00:	c8 53       	subi	r28, 0x38	; 56
    1a02:	df 4f       	sbci	r29, 0xFF	; 255
    1a04:	f9 83       	std	Y+1, r31	; 0x01
    1a06:	e8 83       	st	Y, r30
    1a08:	c8 5c       	subi	r28, 0xC8	; 200
    1a0a:	d0 40       	sbci	r29, 0x00	; 0
		}
		return 0;
	}
	char getData()
	{
		return UDR0;
    1a0c:	fc 01       	movw	r30, r24
    1a0e:	70 80       	ld	r7, Z
			//check if there is data, if so, receive the data
			//-This avoid the program from endless loop in wait for data
			if (FingerPrintUart.checkForData())
			{
				ackData = FingerPrintUart.getData();
				_ackPacket[ackDataIndex] = ackData;
    1a10:	c8 53       	subi	r28, 0x38	; 56
    1a12:	df 4f       	sbci	r29, 0xFF	; 255
    1a14:	e8 81       	ld	r30, Y
    1a16:	f9 81       	ldd	r31, Y+1	; 0x01
    1a18:	c8 5c       	subi	r28, 0xC8	; 200
    1a1a:	d0 40       	sbci	r29, 0x00	; 0
    1a1c:	71 92       	st	Z+, r7
    1a1e:	c8 53       	subi	r28, 0x38	; 56
    1a20:	df 4f       	sbci	r29, 0xFF	; 255
    1a22:	f9 83       	std	Y+1, r31	; 0x01
    1a24:	e8 83       	st	Y, r30
    1a26:	c8 5c       	subi	r28, 0xC8	; 200
    1a28:	d0 40       	sbci	r29, 0x00	; 0
				ackDataIndex++;
    1a2a:	4f 5f       	subi	r20, 0xFF	; 255
    1a2c:	5f 4f       	sbci	r21, 0xFF	; 255
	}
	void getAckPackage(char ackPackSize = 12)
	{
		int ackDataIndex = 0;
		char ackData = 0;
		while(ackDataIndex < ackPackSize)
    1a2e:	4c 30       	cpi	r20, 0x0C	; 12
    1a30:	51 05       	cpc	r21, r1
    1a32:	a9 f6       	brne	.-86     	; 0x19de <main+0xb78>
    1a34:	0c 94 71 15 	jmp	0x2ae2	; 0x2ae2 <main+0x1c7c>
				ackDataIndex++;
			}
		}
		for (int i = 0; i<ackPackSize;i++)
		{
			FingerPrintUart.UARTsend(_ackPacket[i]);
    1a38:	c8 53       	subi	r28, 0x38	; 56
    1a3a:	df 4f       	sbci	r29, 0xFF	; 255
    1a3c:	e8 81       	ld	r30, Y
    1a3e:	f9 81       	ldd	r31, Y+1	; 0x01
    1a40:	c8 5c       	subi	r28, 0xC8	; 200
    1a42:	d0 40       	sbci	r29, 0x00	; 0
    1a44:	51 91       	ld	r21, Z+
    1a46:	c8 53       	subi	r28, 0x38	; 56
    1a48:	df 4f       	sbci	r29, 0xFF	; 255
    1a4a:	f9 83       	std	Y+1, r31	; 0x01
    1a4c:	e8 83       	st	Y, r30
    1a4e:	c8 5c       	subi	r28, 0xC8	; 200
    1a50:	d0 40       	sbci	r29, 0x00	; 0
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
    1a52:	4c 91       	ld	r20, X
    1a54:	45 ff       	sbrs	r20, 5
    1a56:	fd cf       	rjmp	.-6      	; 0x1a52 <main+0xbec>
    1a58:	c8 53       	subi	r28, 0x38	; 56
    1a5a:	df 4f       	sbci	r29, 0xFF	; 255
    1a5c:	f9 83       	std	Y+1, r31	; 0x01
    1a5e:	e8 83       	st	Y, r30
    1a60:	c8 5c       	subi	r28, 0xC8	; 200
    1a62:	d0 40       	sbci	r29, 0x00	; 0
		UDR0 = data;
    1a64:	fc 01       	movw	r30, r24
    1a66:	50 83       	st	Z, r21
				ackData = FingerPrintUart.getData();
				_ackPacket[ackDataIndex] = ackData;
				ackDataIndex++;
			}
		}
		for (int i = 0; i<ackPackSize;i++)
    1a68:	c8 53       	subi	r28, 0x38	; 56
    1a6a:	df 4f       	sbci	r29, 0xFF	; 255
    1a6c:	48 81       	ld	r20, Y
    1a6e:	59 81       	ldd	r21, Y+1	; 0x01
    1a70:	c8 5c       	subi	r28, 0xC8	; 200
    1a72:	d0 40       	sbci	r29, 0x00	; 0
    1a74:	44 15       	cp	r20, r4
    1a76:	55 05       	cpc	r21, r5
    1a78:	f9 f6       	brne	.-66     	; 0x1a38 <main+0xbd2>
	bool reSendPack(int confIndex, int cmd ,int reTryTimes = 1)
	{
		for (int i = 0; i < reTryTimes; i++)
		{
			sendAndGetAck(cmd);
			if (_ackPacket[confIndex] == 0)
    1a7a:	f8 01       	movw	r30, r16
    1a7c:	40 81       	ld	r20, Z
    1a7e:	44 23       	and	r20, r20
    1a80:	09 f4       	brne	.+2      	; 0x1a84 <main+0xc1e>
    1a82:	17 c1       	rjmp	.+558    	; 0x1cb2 <main+0xe4c>
    1a84:	61 50       	subi	r22, 0x01	; 1
    1a86:	71 09       	sbc	r23, r1
		}
		return confIndex;
	}
	bool reSendPack(int confIndex, int cmd ,int reTryTimes = 1)
	{
		for (int i = 0; i < reTryTimes; i++)
    1a88:	09 f0       	breq	.+2      	; 0x1a8c <main+0xc26>
    1a8a:	76 cf       	rjmp	.-276    	; 0x1978 <main+0xb12>
    1a8c:	5e ce       	rjmp	.-836    	; 0x174a <main+0x8e4>
		}
	return 0;
	}
	void sendPackage(int size)
{
	for (int i = 0; i < size; i++)
    1a8e:	fe 01       	movw	r30, r28
    1a90:	32 96       	adiw	r30, 0x02	; 2
    1a92:	c8 53       	subi	r28, 0x38	; 56
    1a94:	df 4f       	sbci	r29, 0xFF	; 255
    1a96:	f9 83       	std	Y+1, r31	; 0x01
    1a98:	e8 83       	st	Y, r30
    1a9a:	c8 5c       	subi	r28, 0xC8	; 200
    1a9c:	d0 40       	sbci	r29, 0x00	; 0
	{
		FingerPrintUart.UARTsend(_dataPackage[i]);
    1a9e:	c8 53       	subi	r28, 0x38	; 56
    1aa0:	df 4f       	sbci	r29, 0xFF	; 255
    1aa2:	e8 81       	ld	r30, Y
    1aa4:	f9 81       	ldd	r31, Y+1	; 0x01
    1aa6:	c8 5c       	subi	r28, 0xC8	; 200
    1aa8:	d0 40       	sbci	r29, 0x00	; 0
    1aaa:	51 91       	ld	r21, Z+
    1aac:	c8 53       	subi	r28, 0x38	; 56
    1aae:	df 4f       	sbci	r29, 0xFF	; 255
    1ab0:	f9 83       	std	Y+1, r31	; 0x01
    1ab2:	e8 83       	st	Y, r30
    1ab4:	c8 5c       	subi	r28, 0xC8	; 200
    1ab6:	d0 40       	sbci	r29, 0x00	; 0
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
    1ab8:	4c 91       	ld	r20, X
    1aba:	45 ff       	sbrs	r20, 5
    1abc:	fd cf       	rjmp	.-6      	; 0x1ab8 <main+0xc52>
    1abe:	c8 53       	subi	r28, 0x38	; 56
    1ac0:	df 4f       	sbci	r29, 0xFF	; 255
    1ac2:	f9 83       	std	Y+1, r31	; 0x01
    1ac4:	e8 83       	st	Y, r30
    1ac6:	c8 5c       	subi	r28, 0xC8	; 200
    1ac8:	d0 40       	sbci	r29, 0x00	; 0
		UDR0 = data;
    1aca:	fc 01       	movw	r30, r24
    1acc:	50 83       	st	Z, r21
		}
	return 0;
	}
	void sendPackage(int size)
{
	for (int i = 0; i < size; i++)
    1ace:	c8 53       	subi	r28, 0x38	; 56
    1ad0:	df 4f       	sbci	r29, 0xFF	; 255
    1ad2:	48 81       	ld	r20, Y
    1ad4:	59 81       	ldd	r21, Y+1	; 0x01
    1ad6:	c8 5c       	subi	r28, 0xC8	; 200
    1ad8:	d0 40       	sbci	r29, 0x00	; 0
    1ada:	42 15       	cp	r20, r2
    1adc:	53 05       	cpc	r21, r3
    1ade:	f9 f6       	brne	.-66     	; 0x1a9e <main+0xc38>
    1ae0:	fe 01       	movw	r30, r28
    1ae2:	bf 96       	adiw	r30, 0x2f	; 47
    1ae4:	40 e0       	ldi	r20, 0x00	; 0
    1ae6:	50 e0       	ldi	r21, 0x00	; 0
    1ae8:	c8 53       	subi	r28, 0x38	; 56
    1aea:	df 4f       	sbci	r29, 0xFF	; 255
    1aec:	f9 83       	std	Y+1, r31	; 0x01
    1aee:	e8 83       	st	Y, r30
    1af0:	c8 5c       	subi	r28, 0xC8	; 200
    1af2:	d0 40       	sbci	r29, 0x00	; 0
		//UCSR0C = ((1<<UCSZ00)|(1<<UCSZ01));
		UCSR0C = (3<<UCSZ00);
	}
	char checkForData()
	{
		if (UCSR0A & (1<<RXC0))
    1af4:	7c 90       	ld	r7, X
			ackDataIndex++;
			*/
			/********************************need to test************************/
			//check if there is data, if so, receive the data
			//-This avoid the program from endless loop in wait for data
			if (FingerPrintUart.checkForData())
    1af6:	77 20       	and	r7, r7
    1af8:	a4 f0       	brlt	.+40     	; 0x1b22 <main+0xcbc>
    1afa:	c8 53       	subi	r28, 0x38	; 56
    1afc:	df 4f       	sbci	r29, 0xFF	; 255
    1afe:	e8 81       	ld	r30, Y
    1b00:	f9 81       	ldd	r31, Y+1	; 0x01
    1b02:	c8 5c       	subi	r28, 0xC8	; 200
    1b04:	d0 40       	sbci	r29, 0x00	; 0
		//UCSR0C = ((1<<UCSZ00)|(1<<UCSZ01));
		UCSR0C = (3<<UCSZ00);
	}
	char checkForData()
	{
		if (UCSR0A & (1<<RXC0))
    1b06:	7c 90       	ld	r7, X
			ackDataIndex++;
			*/
			/********************************need to test************************/
			//check if there is data, if so, receive the data
			//-This avoid the program from endless loop in wait for data
			if (FingerPrintUart.checkForData())
    1b08:	77 20       	and	r7, r7
    1b0a:	2c f0       	brlt	.+10     	; 0x1b16 <main+0xcb0>
	}
	void getAckPackage(char ackPackSize = 12)
	{
		int ackDataIndex = 0;
		char ackData = 0;
		while(ackDataIndex < ackPackSize)
    1b0c:	4c 30       	cpi	r20, 0x0C	; 12
    1b0e:	51 05       	cpc	r21, r1
    1b10:	d4 f3       	brlt	.-12     	; 0x1b06 <main+0xca0>
    1b12:	0c 94 7b 15 	jmp	0x2af6	; 0x2af6 <main+0x1c90>
    1b16:	c8 53       	subi	r28, 0x38	; 56
    1b18:	df 4f       	sbci	r29, 0xFF	; 255
    1b1a:	f9 83       	std	Y+1, r31	; 0x01
    1b1c:	e8 83       	st	Y, r30
    1b1e:	c8 5c       	subi	r28, 0xC8	; 200
    1b20:	d0 40       	sbci	r29, 0x00	; 0
		}
		return 0;
	}
	char getData()
	{
		return UDR0;
    1b22:	fc 01       	movw	r30, r24
    1b24:	70 80       	ld	r7, Z
			//check if there is data, if so, receive the data
			//-This avoid the program from endless loop in wait for data
			if (FingerPrintUart.checkForData())
			{
				ackData = FingerPrintUart.getData();
				_ackPacket[ackDataIndex] = ackData;
    1b26:	c8 53       	subi	r28, 0x38	; 56
    1b28:	df 4f       	sbci	r29, 0xFF	; 255
    1b2a:	e8 81       	ld	r30, Y
    1b2c:	f9 81       	ldd	r31, Y+1	; 0x01
    1b2e:	c8 5c       	subi	r28, 0xC8	; 200
    1b30:	d0 40       	sbci	r29, 0x00	; 0
    1b32:	71 92       	st	Z+, r7
    1b34:	c8 53       	subi	r28, 0x38	; 56
    1b36:	df 4f       	sbci	r29, 0xFF	; 255
    1b38:	f9 83       	std	Y+1, r31	; 0x01
    1b3a:	e8 83       	st	Y, r30
    1b3c:	c8 5c       	subi	r28, 0xC8	; 200
    1b3e:	d0 40       	sbci	r29, 0x00	; 0
				ackDataIndex++;
    1b40:	4f 5f       	subi	r20, 0xFF	; 255
    1b42:	5f 4f       	sbci	r21, 0xFF	; 255
	}
	void getAckPackage(char ackPackSize = 12)
	{
		int ackDataIndex = 0;
		char ackData = 0;
		while(ackDataIndex < ackPackSize)
    1b44:	4c 30       	cpi	r20, 0x0C	; 12
    1b46:	51 05       	cpc	r21, r1
    1b48:	a9 f6       	brne	.-86     	; 0x1af4 <main+0xc8e>
    1b4a:	d5 c7       	rjmp	.+4010   	; 0x2af6 <main+0x1c90>
				ackDataIndex++;
			}
		}
		for (int i = 0; i<ackPackSize;i++)
		{
			FingerPrintUart.UARTsend(_ackPacket[i]);
    1b4c:	c8 53       	subi	r28, 0x38	; 56
    1b4e:	df 4f       	sbci	r29, 0xFF	; 255
    1b50:	e8 81       	ld	r30, Y
    1b52:	f9 81       	ldd	r31, Y+1	; 0x01
    1b54:	c8 5c       	subi	r28, 0xC8	; 200
    1b56:	d0 40       	sbci	r29, 0x00	; 0
    1b58:	51 91       	ld	r21, Z+
    1b5a:	c8 53       	subi	r28, 0x38	; 56
    1b5c:	df 4f       	sbci	r29, 0xFF	; 255
    1b5e:	f9 83       	std	Y+1, r31	; 0x01
    1b60:	e8 83       	st	Y, r30
    1b62:	c8 5c       	subi	r28, 0xC8	; 200
    1b64:	d0 40       	sbci	r29, 0x00	; 0
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
    1b66:	4c 91       	ld	r20, X
    1b68:	45 ff       	sbrs	r20, 5
    1b6a:	fd cf       	rjmp	.-6      	; 0x1b66 <main+0xd00>
    1b6c:	c8 53       	subi	r28, 0x38	; 56
    1b6e:	df 4f       	sbci	r29, 0xFF	; 255
    1b70:	f9 83       	std	Y+1, r31	; 0x01
    1b72:	e8 83       	st	Y, r30
    1b74:	c8 5c       	subi	r28, 0xC8	; 200
    1b76:	d0 40       	sbci	r29, 0x00	; 0
		UDR0 = data;
    1b78:	fc 01       	movw	r30, r24
    1b7a:	50 83       	st	Z, r21
				ackData = FingerPrintUart.getData();
				_ackPacket[ackDataIndex] = ackData;
				ackDataIndex++;
			}
		}
		for (int i = 0; i<ackPackSize;i++)
    1b7c:	c8 53       	subi	r28, 0x38	; 56
    1b7e:	df 4f       	sbci	r29, 0xFF	; 255
    1b80:	48 81       	ld	r20, Y
    1b82:	59 81       	ldd	r21, Y+1	; 0x01
    1b84:	c8 5c       	subi	r28, 0xC8	; 200
    1b86:	d0 40       	sbci	r29, 0x00	; 0
    1b88:	44 15       	cp	r20, r4
    1b8a:	55 05       	cpc	r21, r5
    1b8c:	f9 f6       	brne	.-66     	; 0x1b4c <main+0xce6>
	bool reSendPack(int confIndex, int cmd ,int reTryTimes = 1)
	{
		for (int i = 0; i < reTryTimes; i++)
		{
			sendAndGetAck(cmd);
			if (_ackPacket[confIndex] == 0)
    1b8e:	f8 01       	movw	r30, r16
    1b90:	40 81       	ld	r20, Z
    1b92:	44 23       	and	r20, r20
    1b94:	09 f4       	brne	.+2      	; 0x1b98 <main+0xd32>
    1b96:	8d c0       	rjmp	.+282    	; 0x1cb2 <main+0xe4c>
    1b98:	61 50       	subi	r22, 0x01	; 1
    1b9a:	71 09       	sbc	r23, r1
		}
		return confIndex;
	}
	bool reSendPack(int confIndex, int cmd ,int reTryTimes = 1)
	{
		for (int i = 0; i < reTryTimes; i++)
    1b9c:	09 f0       	breq	.+2      	; 0x1ba0 <main+0xd3a>
    1b9e:	77 cf       	rjmp	.-274    	; 0x1a8e <main+0xc28>
    1ba0:	d4 cd       	rjmp	.-1112   	; 0x174a <main+0x8e4>
		}
	return 0;
	}
	void sendPackage(int size)
{
	for (int i = 0; i < size; i++)
    1ba2:	fe 01       	movw	r30, r28
    1ba4:	32 96       	adiw	r30, 0x02	; 2
    1ba6:	c8 53       	subi	r28, 0x38	; 56
    1ba8:	df 4f       	sbci	r29, 0xFF	; 255
    1baa:	f9 83       	std	Y+1, r31	; 0x01
    1bac:	e8 83       	st	Y, r30
    1bae:	c8 5c       	subi	r28, 0xC8	; 200
    1bb0:	d0 40       	sbci	r29, 0x00	; 0
	{
		FingerPrintUart.UARTsend(_dataPackage[i]);
    1bb2:	c8 53       	subi	r28, 0x38	; 56
    1bb4:	df 4f       	sbci	r29, 0xFF	; 255
    1bb6:	e8 81       	ld	r30, Y
    1bb8:	f9 81       	ldd	r31, Y+1	; 0x01
    1bba:	c8 5c       	subi	r28, 0xC8	; 200
    1bbc:	d0 40       	sbci	r29, 0x00	; 0
    1bbe:	51 91       	ld	r21, Z+
    1bc0:	c8 53       	subi	r28, 0x38	; 56
    1bc2:	df 4f       	sbci	r29, 0xFF	; 255
    1bc4:	f9 83       	std	Y+1, r31	; 0x01
    1bc6:	e8 83       	st	Y, r30
    1bc8:	c8 5c       	subi	r28, 0xC8	; 200
    1bca:	d0 40       	sbci	r29, 0x00	; 0
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
    1bcc:	4c 91       	ld	r20, X
    1bce:	45 ff       	sbrs	r20, 5
    1bd0:	fd cf       	rjmp	.-6      	; 0x1bcc <main+0xd66>
    1bd2:	c8 53       	subi	r28, 0x38	; 56
    1bd4:	df 4f       	sbci	r29, 0xFF	; 255
    1bd6:	f9 83       	std	Y+1, r31	; 0x01
    1bd8:	e8 83       	st	Y, r30
    1bda:	c8 5c       	subi	r28, 0xC8	; 200
    1bdc:	d0 40       	sbci	r29, 0x00	; 0
		UDR0 = data;
    1bde:	fc 01       	movw	r30, r24
    1be0:	50 83       	st	Z, r21
		}
	return 0;
	}
	void sendPackage(int size)
{
	for (int i = 0; i < size; i++)
    1be2:	c8 53       	subi	r28, 0x38	; 56
    1be4:	df 4f       	sbci	r29, 0xFF	; 255
    1be6:	48 81       	ld	r20, Y
    1be8:	59 81       	ldd	r21, Y+1	; 0x01
    1bea:	c8 5c       	subi	r28, 0xC8	; 200
    1bec:	d0 40       	sbci	r29, 0x00	; 0
    1bee:	42 15       	cp	r20, r2
    1bf0:	53 05       	cpc	r21, r3
    1bf2:	f9 f6       	brne	.-66     	; 0x1bb2 <main+0xd4c>
    1bf4:	fe 01       	movw	r30, r28
    1bf6:	bf 96       	adiw	r30, 0x2f	; 47
    1bf8:	40 e0       	ldi	r20, 0x00	; 0
    1bfa:	50 e0       	ldi	r21, 0x00	; 0
    1bfc:	c8 53       	subi	r28, 0x38	; 56
    1bfe:	df 4f       	sbci	r29, 0xFF	; 255
    1c00:	f9 83       	std	Y+1, r31	; 0x01
    1c02:	e8 83       	st	Y, r30
    1c04:	c8 5c       	subi	r28, 0xC8	; 200
    1c06:	d0 40       	sbci	r29, 0x00	; 0
		//UCSR0C = ((1<<UCSZ00)|(1<<UCSZ01));
		UCSR0C = (3<<UCSZ00);
	}
	char checkForData()
	{
		if (UCSR0A & (1<<RXC0))
    1c08:	7c 90       	ld	r7, X
			ackDataIndex++;
			*/
			/********************************need to test************************/
			//check if there is data, if so, receive the data
			//-This avoid the program from endless loop in wait for data
			if (FingerPrintUart.checkForData())
    1c0a:	77 20       	and	r7, r7
    1c0c:	9c f0       	brlt	.+38     	; 0x1c34 <main+0xdce>
    1c0e:	c8 53       	subi	r28, 0x38	; 56
    1c10:	df 4f       	sbci	r29, 0xFF	; 255
    1c12:	e8 81       	ld	r30, Y
    1c14:	f9 81       	ldd	r31, Y+1	; 0x01
    1c16:	c8 5c       	subi	r28, 0xC8	; 200
    1c18:	d0 40       	sbci	r29, 0x00	; 0
		//UCSR0C = ((1<<UCSZ00)|(1<<UCSZ01));
		UCSR0C = (3<<UCSZ00);
	}
	char checkForData()
	{
		if (UCSR0A & (1<<RXC0))
    1c1a:	7c 90       	ld	r7, X
			ackDataIndex++;
			*/
			/********************************need to test************************/
			//check if there is data, if so, receive the data
			//-This avoid the program from endless loop in wait for data
			if (FingerPrintUart.checkForData())
    1c1c:	77 20       	and	r7, r7
    1c1e:	24 f0       	brlt	.+8      	; 0x1c28 <main+0xdc2>
	}
	void getAckPackage(char ackPackSize = 12)
	{
		int ackDataIndex = 0;
		char ackData = 0;
		while(ackDataIndex < ackPackSize)
    1c20:	4c 30       	cpi	r20, 0x0C	; 12
    1c22:	51 05       	cpc	r21, r1
    1c24:	d4 f3       	brlt	.-12     	; 0x1c1a <main+0xdb4>
    1c26:	70 c7       	rjmp	.+3808   	; 0x2b08 <main+0x1ca2>
    1c28:	c8 53       	subi	r28, 0x38	; 56
    1c2a:	df 4f       	sbci	r29, 0xFF	; 255
    1c2c:	f9 83       	std	Y+1, r31	; 0x01
    1c2e:	e8 83       	st	Y, r30
    1c30:	c8 5c       	subi	r28, 0xC8	; 200
    1c32:	d0 40       	sbci	r29, 0x00	; 0
		}
		return 0;
	}
	char getData()
	{
		return UDR0;
    1c34:	fc 01       	movw	r30, r24
    1c36:	70 80       	ld	r7, Z
			//check if there is data, if so, receive the data
			//-This avoid the program from endless loop in wait for data
			if (FingerPrintUart.checkForData())
			{
				ackData = FingerPrintUart.getData();
				_ackPacket[ackDataIndex] = ackData;
    1c38:	c8 53       	subi	r28, 0x38	; 56
    1c3a:	df 4f       	sbci	r29, 0xFF	; 255
    1c3c:	e8 81       	ld	r30, Y
    1c3e:	f9 81       	ldd	r31, Y+1	; 0x01
    1c40:	c8 5c       	subi	r28, 0xC8	; 200
    1c42:	d0 40       	sbci	r29, 0x00	; 0
    1c44:	71 92       	st	Z+, r7
    1c46:	c8 53       	subi	r28, 0x38	; 56
    1c48:	df 4f       	sbci	r29, 0xFF	; 255
    1c4a:	f9 83       	std	Y+1, r31	; 0x01
    1c4c:	e8 83       	st	Y, r30
    1c4e:	c8 5c       	subi	r28, 0xC8	; 200
    1c50:	d0 40       	sbci	r29, 0x00	; 0
				ackDataIndex++;
    1c52:	4f 5f       	subi	r20, 0xFF	; 255
    1c54:	5f 4f       	sbci	r21, 0xFF	; 255
	}
	void getAckPackage(char ackPackSize = 12)
	{
		int ackDataIndex = 0;
		char ackData = 0;
		while(ackDataIndex < ackPackSize)
    1c56:	4c 30       	cpi	r20, 0x0C	; 12
    1c58:	51 05       	cpc	r21, r1
    1c5a:	b1 f6       	brne	.-84     	; 0x1c08 <main+0xda2>
    1c5c:	55 c7       	rjmp	.+3754   	; 0x2b08 <main+0x1ca2>
				ackDataIndex++;
			}
		}
		for (int i = 0; i<ackPackSize;i++)
		{
			FingerPrintUart.UARTsend(_ackPacket[i]);
    1c5e:	c8 53       	subi	r28, 0x38	; 56
    1c60:	df 4f       	sbci	r29, 0xFF	; 255
    1c62:	e8 81       	ld	r30, Y
    1c64:	f9 81       	ldd	r31, Y+1	; 0x01
    1c66:	c8 5c       	subi	r28, 0xC8	; 200
    1c68:	d0 40       	sbci	r29, 0x00	; 0
    1c6a:	51 91       	ld	r21, Z+
    1c6c:	c8 53       	subi	r28, 0x38	; 56
    1c6e:	df 4f       	sbci	r29, 0xFF	; 255
    1c70:	f9 83       	std	Y+1, r31	; 0x01
    1c72:	e8 83       	st	Y, r30
    1c74:	c8 5c       	subi	r28, 0xC8	; 200
    1c76:	d0 40       	sbci	r29, 0x00	; 0
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
    1c78:	4c 91       	ld	r20, X
    1c7a:	45 ff       	sbrs	r20, 5
    1c7c:	fd cf       	rjmp	.-6      	; 0x1c78 <main+0xe12>
    1c7e:	c8 53       	subi	r28, 0x38	; 56
    1c80:	df 4f       	sbci	r29, 0xFF	; 255
    1c82:	f9 83       	std	Y+1, r31	; 0x01
    1c84:	e8 83       	st	Y, r30
    1c86:	c8 5c       	subi	r28, 0xC8	; 200
    1c88:	d0 40       	sbci	r29, 0x00	; 0
		UDR0 = data;
    1c8a:	fc 01       	movw	r30, r24
    1c8c:	50 83       	st	Z, r21
				ackData = FingerPrintUart.getData();
				_ackPacket[ackDataIndex] = ackData;
				ackDataIndex++;
			}
		}
		for (int i = 0; i<ackPackSize;i++)
    1c8e:	c8 53       	subi	r28, 0x38	; 56
    1c90:	df 4f       	sbci	r29, 0xFF	; 255
    1c92:	48 81       	ld	r20, Y
    1c94:	59 81       	ldd	r21, Y+1	; 0x01
    1c96:	c8 5c       	subi	r28, 0xC8	; 200
    1c98:	d0 40       	sbci	r29, 0x00	; 0
    1c9a:	44 15       	cp	r20, r4
    1c9c:	55 05       	cpc	r21, r5
    1c9e:	f9 f6       	brne	.-66     	; 0x1c5e <main+0xdf8>
	bool reSendPack(int confIndex, int cmd ,int reTryTimes = 1)
	{
		for (int i = 0; i < reTryTimes; i++)
		{
			sendAndGetAck(cmd);
			if (_ackPacket[confIndex] == 0)
    1ca0:	f8 01       	movw	r30, r16
    1ca2:	40 81       	ld	r20, Z
    1ca4:	44 23       	and	r20, r20
    1ca6:	29 f0       	breq	.+10     	; 0x1cb2 <main+0xe4c>
    1ca8:	61 50       	subi	r22, 0x01	; 1
    1caa:	71 09       	sbc	r23, r1
		}
		return confIndex;
	}
	bool reSendPack(int confIndex, int cmd ,int reTryTimes = 1)
	{
		for (int i = 0; i < reTryTimes; i++)
    1cac:	09 f0       	breq	.+2      	; 0x1cb0 <main+0xe4a>
    1cae:	79 cf       	rjmp	.-270    	; 0x1ba2 <main+0xd3c>
    1cb0:	4c cd       	rjmp	.-1384   	; 0x174a <main+0x8e4>
	void setPacketLength(char length = 0x07)
	{
		//Refers to the length of package content (command packets and data packets)
		//plus the length of Checksum( 2 bytes)   !!!MAX is 256 Byte!!!
		/**** {07H} = 4byte Password, 1Byte IndecationCode (command), 2Byte CheckSum ****/
		_dataPackage[7] = 0;
    1cb2:	19 86       	std	Y+9, r1	; 0x09
		_dataPackage[8] = length;
    1cb4:	f4 e0       	ldi	r31, 0x04	; 4
    1cb6:	fa 87       	std	Y+10, r31	; 0x0a
	}
	void setAcommand(commands commandValue)
	{
		_dataPackage[9] = commandValue;
    1cb8:	42 e0       	ldi	r20, 0x02	; 2
    1cba:	4b 87       	std	Y+11, r20	; 0x0b
		sendAndGetAck(GenImage);
		if (checkAckPackError(GenImage))
		{
			setPacketLength(0x04);						//index 7,8
			setAcommand(Img2Tz);						//index 9
			_dataPackage[10] = bufferID;				//buffer ID
    1cbc:	dc 86       	std	Y+12, r13	; 0x0c
		setup();
	}
	~FingerPrint(){}
	void setCheckSum(int sum, int index)
	{
		_dataPackage[index] = sum >> 8;
    1cbe:	1d 86       	std	Y+13, r1	; 0x0d
		_dataPackage[index + 1] = sum;	
    1cc0:	6e 86       	std	Y+14, r6	; 0x0e
    1cc2:	fe 01       	movw	r30, r28
    1cc4:	32 96       	adiw	r30, 0x02	; 2
    1cc6:	bf 01       	movw	r22, r30
	}
	void sendPackage(int size)
{
	for (int i = 0; i < size; i++)
	{
		FingerPrintUart.UARTsend(_dataPackage[i]);
    1cc8:	fb 01       	movw	r30, r22
    1cca:	51 91       	ld	r21, Z+
    1ccc:	bf 01       	movw	r22, r30
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
    1cce:	4c 91       	ld	r20, X
    1cd0:	45 ff       	sbrs	r20, 5
    1cd2:	fd cf       	rjmp	.-6      	; 0x1cce <main+0xe68>
		UDR0 = data;
    1cd4:	fc 01       	movw	r30, r24
    1cd6:	50 83       	st	Z, r21
		}
	return 0;
	}
	void sendPackage(int size)
{
	for (int i = 0; i < size; i++)
    1cd8:	a6 16       	cp	r10, r22
    1cda:	b7 06       	cpc	r11, r23
    1cdc:	a9 f7       	brne	.-22     	; 0x1cc8 <main+0xe62>
    1cde:	fe 01       	movw	r30, r28
    1ce0:	bf 96       	adiw	r30, 0x2f	; 47
    1ce2:	60 e0       	ldi	r22, 0x00	; 0
    1ce4:	70 e0       	ldi	r23, 0x00	; 0
    1ce6:	8f 01       	movw	r16, r30
		//UCSR0C = ((1<<UCSZ00)|(1<<UCSZ01));
		UCSR0C = (3<<UCSZ00);
	}
	char checkForData()
	{
		if (UCSR0A & (1<<RXC0))
    1ce8:	4c 91       	ld	r20, X
			ackDataIndex++;
			*/
			/********************************need to test************************/
			//check if there is data, if so, receive the data
			//-This avoid the program from endless loop in wait for data
			if (FingerPrintUart.checkForData())
    1cea:	44 23       	and	r20, r20
    1cec:	4c f0       	brlt	.+18     	; 0x1d00 <main+0xe9a>
    1cee:	f8 01       	movw	r30, r16
		//UCSR0C = ((1<<UCSZ00)|(1<<UCSZ01));
		UCSR0C = (3<<UCSZ00);
	}
	char checkForData()
	{
		if (UCSR0A & (1<<RXC0))
    1cf0:	4c 91       	ld	r20, X
			ackDataIndex++;
			*/
			/********************************need to test************************/
			//check if there is data, if so, receive the data
			//-This avoid the program from endless loop in wait for data
			if (FingerPrintUart.checkForData())
    1cf2:	44 23       	and	r20, r20
    1cf4:	24 f0       	brlt	.+8      	; 0x1cfe <main+0xe98>
	}
	void getAckPackage(char ackPackSize = 12)
	{
		int ackDataIndex = 0;
		char ackData = 0;
		while(ackDataIndex < ackPackSize)
    1cf6:	6c 30       	cpi	r22, 0x0C	; 12
    1cf8:	71 05       	cpc	r23, r1
    1cfa:	d4 f3       	brlt	.-12     	; 0x1cf0 <main+0xe8a>
    1cfc:	0e c7       	rjmp	.+3612   	; 0x2b1a <main+0x1cb4>
    1cfe:	8f 01       	movw	r16, r30
		}
		return 0;
	}
	char getData()
	{
		return UDR0;
    1d00:	fc 01       	movw	r30, r24
    1d02:	40 81       	ld	r20, Z
			//check if there is data, if so, receive the data
			//-This avoid the program from endless loop in wait for data
			if (FingerPrintUart.checkForData())
			{
				ackData = FingerPrintUart.getData();
				_ackPacket[ackDataIndex] = ackData;
    1d04:	f8 01       	movw	r30, r16
    1d06:	41 93       	st	Z+, r20
    1d08:	8f 01       	movw	r16, r30
				ackDataIndex++;
    1d0a:	6f 5f       	subi	r22, 0xFF	; 255
    1d0c:	7f 4f       	sbci	r23, 0xFF	; 255
	}
	void getAckPackage(char ackPackSize = 12)
	{
		int ackDataIndex = 0;
		char ackData = 0;
		while(ackDataIndex < ackPackSize)
    1d0e:	6c 30       	cpi	r22, 0x0C	; 12
    1d10:	71 05       	cpc	r23, r1
    1d12:	51 f7       	brne	.-44     	; 0x1ce8 <main+0xe82>
    1d14:	02 c7       	rjmp	.+3588   	; 0x2b1a <main+0x1cb4>
				ackDataIndex++;
			}
		}
		for (int i = 0; i<ackPackSize;i++)
		{
			FingerPrintUart.UARTsend(_ackPacket[i]);
    1d16:	fb 01       	movw	r30, r22
    1d18:	51 91       	ld	r21, Z+
    1d1a:	bf 01       	movw	r22, r30
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
    1d1c:	4c 91       	ld	r20, X
    1d1e:	45 ff       	sbrs	r20, 5
    1d20:	fd cf       	rjmp	.-6      	; 0x1d1c <main+0xeb6>
		UDR0 = data;
    1d22:	fc 01       	movw	r30, r24
    1d24:	50 83       	st	Z, r21
				ackData = FingerPrintUart.getData();
				_ackPacket[ackDataIndex] = ackData;
				ackDataIndex++;
			}
		}
		for (int i = 0; i<ackPackSize;i++)
    1d26:	64 15       	cp	r22, r4
    1d28:	75 05       	cpc	r23, r5
    1d2a:	a9 f7       	brne	.-22     	; 0x1d16 <main+0xeb0>
    1d2c:	fa c6       	rjmp	.+3572   	; 0x2b22 <main+0x1cbc>
		{
			confIndex = packSize - 2;
		}
		for (int i = 0; i < packSize;i++)
		{
			while(_ackPacket[i] != 0xEF && i < packSize)
    1d2e:	4c 30       	cpi	r20, 0x0C	; 12
    1d30:	51 05       	cpc	r21, r1
    1d32:	41 f0       	breq	.+16     	; 0x1d44 <main+0xede>
			{
				i++;
    1d34:	4f 5f       	subi	r20, 0xFF	; 255
    1d36:	5f 4f       	sbci	r21, 0xFF	; 255
		{
			confIndex = packSize - 2;
		}
		for (int i = 0; i < packSize;i++)
		{
			while(_ackPacket[i] != 0xEF && i < packSize)
    1d38:	61 91       	ld	r22, Z+
    1d3a:	6f 3e       	cpi	r22, 0xEF	; 239
    1d3c:	c1 f7       	brne	.-16     	; 0x1d2e <main+0xec8>
    1d3e:	02 c0       	rjmp	.+4      	; 0x1d44 <main+0xede>
    1d40:	40 e0       	ldi	r20, 0x00	; 0
    1d42:	50 e0       	ldi	r21, 0x00	; 0
		}
		return 0;
	}
	bool checkAckPackError(char cmd)
	{
		int confCodeIndex = (int)getAckPackConfirmCodeIndex(cmd);
    1d44:	0a e0       	ldi	r16, 0x0A	; 10
    1d46:	04 0f       	add	r16, r20
    1d48:	10 e0       	ldi	r17, 0x00	; 0
		char confCode = _ackPacket[confCodeIndex - 1];
    1d4a:	ee e2       	ldi	r30, 0x2E	; 46
    1d4c:	f0 e0       	ldi	r31, 0x00	; 0
    1d4e:	ec 0f       	add	r30, r28
    1d50:	fd 1f       	adc	r31, r29
    1d52:	e0 0f       	add	r30, r16
    1d54:	f1 1f       	adc	r31, r17
		switch(confCode)
    1d56:	40 81       	ld	r20, Z
    1d58:	50 e0       	ldi	r21, 0x00	; 0
    1d5a:	4a 31       	cpi	r20, 0x1A	; 26
    1d5c:	51 05       	cpc	r21, r1
    1d5e:	28 f4       	brcc	.+10     	; 0x1d6a <main+0xf04>
    1d60:	fa 01       	movw	r30, r20
    1d62:	ef 53       	subi	r30, 0x3F	; 63
    1d64:	fe 4f       	sbci	r31, 0xFE	; 254
    1d66:	0c 94 fb 15 	jmp	0x2bf6	; 0x2bf6 <__tablejump2__>
		{
			case 0x00: return 1;
			case 0x01: return reSendPack(confCodeIndex,cmd,5);
			case 0x02: return 0;
    1d6a:	40 e0       	ldi	r20, 0x00	; 0
    1d6c:	53 c2       	rjmp	.+1190   	; 0x2214 <main+0x13ae>
	}
	bool checkAckPackError(char cmd)
	{
		int confCodeIndex = (int)getAckPackConfirmCodeIndex(cmd);
		char confCode = _ackPacket[confCodeIndex - 1];
		switch(confCode)
    1d6e:	65 e0       	ldi	r22, 0x05	; 5
    1d70:	70 e0       	ldi	r23, 0x00	; 0
	bool reSendPack(int confIndex, int cmd ,int reTryTimes = 1)
	{
		for (int i = 0; i < reTryTimes; i++)
		{
			sendAndGetAck(cmd);
			if (_ackPacket[confIndex] == 0)
    1d72:	4f e2       	ldi	r20, 0x2F	; 47
    1d74:	50 e0       	ldi	r21, 0x00	; 0
    1d76:	4c 0f       	add	r20, r28
    1d78:	5d 1f       	adc	r21, r29
    1d7a:	04 0f       	add	r16, r20
    1d7c:	15 1f       	adc	r17, r21
	}
	bool checkAckPackError(char cmd)
	{
		int confCodeIndex = (int)getAckPackConfirmCodeIndex(cmd);
		char confCode = _ackPacket[confCodeIndex - 1];
		switch(confCode)
    1d7e:	fe 01       	movw	r30, r28
    1d80:	32 96       	adiw	r30, 0x02	; 2
    1d82:	c8 53       	subi	r28, 0x38	; 56
    1d84:	df 4f       	sbci	r29, 0xFF	; 255
    1d86:	f9 83       	std	Y+1, r31	; 0x01
    1d88:	e8 83       	st	Y, r30
    1d8a:	c8 5c       	subi	r28, 0xC8	; 200
    1d8c:	d0 40       	sbci	r29, 0x00	; 0
	}
	void sendPackage(int size)
{
	for (int i = 0; i < size; i++)
	{
		FingerPrintUart.UARTsend(_dataPackage[i]);
    1d8e:	c8 53       	subi	r28, 0x38	; 56
    1d90:	df 4f       	sbci	r29, 0xFF	; 255
    1d92:	e8 81       	ld	r30, Y
    1d94:	f9 81       	ldd	r31, Y+1	; 0x01
    1d96:	c8 5c       	subi	r28, 0xC8	; 200
    1d98:	d0 40       	sbci	r29, 0x00	; 0
    1d9a:	51 91       	ld	r21, Z+
    1d9c:	c8 53       	subi	r28, 0x38	; 56
    1d9e:	df 4f       	sbci	r29, 0xFF	; 255
    1da0:	f9 83       	std	Y+1, r31	; 0x01
    1da2:	e8 83       	st	Y, r30
    1da4:	c8 5c       	subi	r28, 0xC8	; 200
    1da6:	d0 40       	sbci	r29, 0x00	; 0
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
    1da8:	4c 91       	ld	r20, X
    1daa:	45 ff       	sbrs	r20, 5
    1dac:	fd cf       	rjmp	.-6      	; 0x1da8 <main+0xf42>
    1dae:	c8 53       	subi	r28, 0x38	; 56
    1db0:	df 4f       	sbci	r29, 0xFF	; 255
    1db2:	f9 83       	std	Y+1, r31	; 0x01
    1db4:	e8 83       	st	Y, r30
    1db6:	c8 5c       	subi	r28, 0xC8	; 200
    1db8:	d0 40       	sbci	r29, 0x00	; 0
		UDR0 = data;
    1dba:	fc 01       	movw	r30, r24
    1dbc:	50 83       	st	Z, r21
		}
	return 0;
	}
	void sendPackage(int size)
{
	for (int i = 0; i < size; i++)
    1dbe:	c8 53       	subi	r28, 0x38	; 56
    1dc0:	df 4f       	sbci	r29, 0xFF	; 255
    1dc2:	48 81       	ld	r20, Y
    1dc4:	59 81       	ldd	r21, Y+1	; 0x01
    1dc6:	c8 5c       	subi	r28, 0xC8	; 200
    1dc8:	d0 40       	sbci	r29, 0x00	; 0
    1dca:	a4 16       	cp	r10, r20
    1dcc:	b5 06       	cpc	r11, r21
    1dce:	f9 f6       	brne	.-66     	; 0x1d8e <main+0xf28>
    1dd0:	fe 01       	movw	r30, r28
    1dd2:	bf 96       	adiw	r30, 0x2f	; 47
    1dd4:	40 e0       	ldi	r20, 0x00	; 0
    1dd6:	50 e0       	ldi	r21, 0x00	; 0
    1dd8:	c8 53       	subi	r28, 0x38	; 56
    1dda:	df 4f       	sbci	r29, 0xFF	; 255
    1ddc:	f9 83       	std	Y+1, r31	; 0x01
    1dde:	e8 83       	st	Y, r30
    1de0:	c8 5c       	subi	r28, 0xC8	; 200
    1de2:	d0 40       	sbci	r29, 0x00	; 0
		//UCSR0C = ((1<<UCSZ00)|(1<<UCSZ01));
		UCSR0C = (3<<UCSZ00);
	}
	char checkForData()
	{
		if (UCSR0A & (1<<RXC0))
    1de4:	7c 90       	ld	r7, X
			ackDataIndex++;
			*/
			/********************************need to test************************/
			//check if there is data, if so, receive the data
			//-This avoid the program from endless loop in wait for data
			if (FingerPrintUart.checkForData())
    1de6:	77 20       	and	r7, r7
    1de8:	9c f0       	brlt	.+38     	; 0x1e10 <main+0xfaa>
    1dea:	c8 53       	subi	r28, 0x38	; 56
    1dec:	df 4f       	sbci	r29, 0xFF	; 255
    1dee:	e8 81       	ld	r30, Y
    1df0:	f9 81       	ldd	r31, Y+1	; 0x01
    1df2:	c8 5c       	subi	r28, 0xC8	; 200
    1df4:	d0 40       	sbci	r29, 0x00	; 0
		//UCSR0C = ((1<<UCSZ00)|(1<<UCSZ01));
		UCSR0C = (3<<UCSZ00);
	}
	char checkForData()
	{
		if (UCSR0A & (1<<RXC0))
    1df6:	7c 90       	ld	r7, X
			ackDataIndex++;
			*/
			/********************************need to test************************/
			//check if there is data, if so, receive the data
			//-This avoid the program from endless loop in wait for data
			if (FingerPrintUart.checkForData())
    1df8:	77 20       	and	r7, r7
    1dfa:	24 f0       	brlt	.+8      	; 0x1e04 <main+0xf9e>
	}
	void getAckPackage(char ackPackSize = 12)
	{
		int ackDataIndex = 0;
		char ackData = 0;
		while(ackDataIndex < ackPackSize)
    1dfc:	4c 30       	cpi	r20, 0x0C	; 12
    1dfe:	51 05       	cpc	r21, r1
    1e00:	d4 f3       	brlt	.-12     	; 0x1df6 <main+0xf90>
    1e02:	98 c6       	rjmp	.+3376   	; 0x2b34 <main+0x1cce>
    1e04:	c8 53       	subi	r28, 0x38	; 56
    1e06:	df 4f       	sbci	r29, 0xFF	; 255
    1e08:	f9 83       	std	Y+1, r31	; 0x01
    1e0a:	e8 83       	st	Y, r30
    1e0c:	c8 5c       	subi	r28, 0xC8	; 200
    1e0e:	d0 40       	sbci	r29, 0x00	; 0
		}
		return 0;
	}
	char getData()
	{
		return UDR0;
    1e10:	fc 01       	movw	r30, r24
    1e12:	70 80       	ld	r7, Z
			//check if there is data, if so, receive the data
			//-This avoid the program from endless loop in wait for data
			if (FingerPrintUart.checkForData())
			{
				ackData = FingerPrintUart.getData();
				_ackPacket[ackDataIndex] = ackData;
    1e14:	c8 53       	subi	r28, 0x38	; 56
    1e16:	df 4f       	sbci	r29, 0xFF	; 255
    1e18:	e8 81       	ld	r30, Y
    1e1a:	f9 81       	ldd	r31, Y+1	; 0x01
    1e1c:	c8 5c       	subi	r28, 0xC8	; 200
    1e1e:	d0 40       	sbci	r29, 0x00	; 0
    1e20:	71 92       	st	Z+, r7
    1e22:	c8 53       	subi	r28, 0x38	; 56
    1e24:	df 4f       	sbci	r29, 0xFF	; 255
    1e26:	f9 83       	std	Y+1, r31	; 0x01
    1e28:	e8 83       	st	Y, r30
    1e2a:	c8 5c       	subi	r28, 0xC8	; 200
    1e2c:	d0 40       	sbci	r29, 0x00	; 0
				ackDataIndex++;
    1e2e:	4f 5f       	subi	r20, 0xFF	; 255
    1e30:	5f 4f       	sbci	r21, 0xFF	; 255
	}
	void getAckPackage(char ackPackSize = 12)
	{
		int ackDataIndex = 0;
		char ackData = 0;
		while(ackDataIndex < ackPackSize)
    1e32:	4c 30       	cpi	r20, 0x0C	; 12
    1e34:	51 05       	cpc	r21, r1
    1e36:	b1 f6       	brne	.-84     	; 0x1de4 <main+0xf7e>
    1e38:	7d c6       	rjmp	.+3322   	; 0x2b34 <main+0x1cce>
				ackDataIndex++;
			}
		}
		for (int i = 0; i<ackPackSize;i++)
		{
			FingerPrintUart.UARTsend(_ackPacket[i]);
    1e3a:	c8 53       	subi	r28, 0x38	; 56
    1e3c:	df 4f       	sbci	r29, 0xFF	; 255
    1e3e:	e8 81       	ld	r30, Y
    1e40:	f9 81       	ldd	r31, Y+1	; 0x01
    1e42:	c8 5c       	subi	r28, 0xC8	; 200
    1e44:	d0 40       	sbci	r29, 0x00	; 0
    1e46:	51 91       	ld	r21, Z+
    1e48:	c8 53       	subi	r28, 0x38	; 56
    1e4a:	df 4f       	sbci	r29, 0xFF	; 255
    1e4c:	f9 83       	std	Y+1, r31	; 0x01
    1e4e:	e8 83       	st	Y, r30
    1e50:	c8 5c       	subi	r28, 0xC8	; 200
    1e52:	d0 40       	sbci	r29, 0x00	; 0
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
    1e54:	4c 91       	ld	r20, X
    1e56:	45 ff       	sbrs	r20, 5
    1e58:	fd cf       	rjmp	.-6      	; 0x1e54 <main+0xfee>
    1e5a:	c8 53       	subi	r28, 0x38	; 56
    1e5c:	df 4f       	sbci	r29, 0xFF	; 255
    1e5e:	f9 83       	std	Y+1, r31	; 0x01
    1e60:	e8 83       	st	Y, r30
    1e62:	c8 5c       	subi	r28, 0xC8	; 200
    1e64:	d0 40       	sbci	r29, 0x00	; 0
		UDR0 = data;
    1e66:	fc 01       	movw	r30, r24
    1e68:	50 83       	st	Z, r21
				ackData = FingerPrintUart.getData();
				_ackPacket[ackDataIndex] = ackData;
				ackDataIndex++;
			}
		}
		for (int i = 0; i<ackPackSize;i++)
    1e6a:	c8 53       	subi	r28, 0x38	; 56
    1e6c:	df 4f       	sbci	r29, 0xFF	; 255
    1e6e:	48 81       	ld	r20, Y
    1e70:	59 81       	ldd	r21, Y+1	; 0x01
    1e72:	c8 5c       	subi	r28, 0xC8	; 200
    1e74:	d0 40       	sbci	r29, 0x00	; 0
    1e76:	44 15       	cp	r20, r4
    1e78:	55 05       	cpc	r21, r5
    1e7a:	f9 f6       	brne	.-66     	; 0x1e3a <main+0xfd4>
	bool reSendPack(int confIndex, int cmd ,int reTryTimes = 1)
	{
		for (int i = 0; i < reTryTimes; i++)
		{
			sendAndGetAck(cmd);
			if (_ackPacket[confIndex] == 0)
    1e7c:	f8 01       	movw	r30, r16
    1e7e:	40 81       	ld	r20, Z
    1e80:	44 23       	and	r20, r20
    1e82:	09 f4       	brne	.+2      	; 0x1e86 <main+0x1020>
    1e84:	ba c1       	rjmp	.+884    	; 0x21fa <main+0x1394>
    1e86:	61 50       	subi	r22, 0x01	; 1
    1e88:	71 09       	sbc	r23, r1
		}
		return confIndex;
	}
	bool reSendPack(int confIndex, int cmd ,int reTryTimes = 1)
	{
		for (int i = 0; i < reTryTimes; i++)
    1e8a:	09 f0       	breq	.+2      	; 0x1e8e <main+0x1028>
    1e8c:	78 cf       	rjmp	.-272    	; 0x1d7e <main+0xf18>
    1e8e:	b7 c1       	rjmp	.+878    	; 0x21fe <main+0x1398>
	}
	bool checkAckPackError(char cmd)
	{
		int confCodeIndex = (int)getAckPackConfirmCodeIndex(cmd);
		char confCode = _ackPacket[confCodeIndex - 1];
		switch(confCode)
    1e90:	63 e0       	ldi	r22, 0x03	; 3
    1e92:	70 e0       	ldi	r23, 0x00	; 0
	bool reSendPack(int confIndex, int cmd ,int reTryTimes = 1)
	{
		for (int i = 0; i < reTryTimes; i++)
		{
			sendAndGetAck(cmd);
			if (_ackPacket[confIndex] == 0)
    1e94:	4f e2       	ldi	r20, 0x2F	; 47
    1e96:	50 e0       	ldi	r21, 0x00	; 0
    1e98:	4c 0f       	add	r20, r28
    1e9a:	5d 1f       	adc	r21, r29
    1e9c:	04 0f       	add	r16, r20
    1e9e:	15 1f       	adc	r17, r21
	}
	bool checkAckPackError(char cmd)
	{
		int confCodeIndex = (int)getAckPackConfirmCodeIndex(cmd);
		char confCode = _ackPacket[confCodeIndex - 1];
		switch(confCode)
    1ea0:	fe 01       	movw	r30, r28
    1ea2:	32 96       	adiw	r30, 0x02	; 2
    1ea4:	c8 53       	subi	r28, 0x38	; 56
    1ea6:	df 4f       	sbci	r29, 0xFF	; 255
    1ea8:	f9 83       	std	Y+1, r31	; 0x01
    1eaa:	e8 83       	st	Y, r30
    1eac:	c8 5c       	subi	r28, 0xC8	; 200
    1eae:	d0 40       	sbci	r29, 0x00	; 0
	}
	void sendPackage(int size)
{
	for (int i = 0; i < size; i++)
	{
		FingerPrintUart.UARTsend(_dataPackage[i]);
    1eb0:	c8 53       	subi	r28, 0x38	; 56
    1eb2:	df 4f       	sbci	r29, 0xFF	; 255
    1eb4:	e8 81       	ld	r30, Y
    1eb6:	f9 81       	ldd	r31, Y+1	; 0x01
    1eb8:	c8 5c       	subi	r28, 0xC8	; 200
    1eba:	d0 40       	sbci	r29, 0x00	; 0
    1ebc:	51 91       	ld	r21, Z+
    1ebe:	c8 53       	subi	r28, 0x38	; 56
    1ec0:	df 4f       	sbci	r29, 0xFF	; 255
    1ec2:	f9 83       	std	Y+1, r31	; 0x01
    1ec4:	e8 83       	st	Y, r30
    1ec6:	c8 5c       	subi	r28, 0xC8	; 200
    1ec8:	d0 40       	sbci	r29, 0x00	; 0
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
    1eca:	4c 91       	ld	r20, X
    1ecc:	45 ff       	sbrs	r20, 5
    1ece:	fd cf       	rjmp	.-6      	; 0x1eca <main+0x1064>
    1ed0:	c8 53       	subi	r28, 0x38	; 56
    1ed2:	df 4f       	sbci	r29, 0xFF	; 255
    1ed4:	f9 83       	std	Y+1, r31	; 0x01
    1ed6:	e8 83       	st	Y, r30
    1ed8:	c8 5c       	subi	r28, 0xC8	; 200
    1eda:	d0 40       	sbci	r29, 0x00	; 0
		UDR0 = data;
    1edc:	fc 01       	movw	r30, r24
    1ede:	50 83       	st	Z, r21
		}
	return 0;
	}
	void sendPackage(int size)
{
	for (int i = 0; i < size; i++)
    1ee0:	c8 53       	subi	r28, 0x38	; 56
    1ee2:	df 4f       	sbci	r29, 0xFF	; 255
    1ee4:	48 81       	ld	r20, Y
    1ee6:	59 81       	ldd	r21, Y+1	; 0x01
    1ee8:	c8 5c       	subi	r28, 0xC8	; 200
    1eea:	d0 40       	sbci	r29, 0x00	; 0
    1eec:	4a 15       	cp	r20, r10
    1eee:	5b 05       	cpc	r21, r11
    1ef0:	f9 f6       	brne	.-66     	; 0x1eb0 <main+0x104a>
    1ef2:	fe 01       	movw	r30, r28
    1ef4:	bf 96       	adiw	r30, 0x2f	; 47
    1ef6:	40 e0       	ldi	r20, 0x00	; 0
    1ef8:	50 e0       	ldi	r21, 0x00	; 0
    1efa:	c8 53       	subi	r28, 0x38	; 56
    1efc:	df 4f       	sbci	r29, 0xFF	; 255
    1efe:	f9 83       	std	Y+1, r31	; 0x01
    1f00:	e8 83       	st	Y, r30
    1f02:	c8 5c       	subi	r28, 0xC8	; 200
    1f04:	d0 40       	sbci	r29, 0x00	; 0
		//UCSR0C = ((1<<UCSZ00)|(1<<UCSZ01));
		UCSR0C = (3<<UCSZ00);
	}
	char checkForData()
	{
		if (UCSR0A & (1<<RXC0))
    1f06:	7c 90       	ld	r7, X
			ackDataIndex++;
			*/
			/********************************need to test************************/
			//check if there is data, if so, receive the data
			//-This avoid the program from endless loop in wait for data
			if (FingerPrintUart.checkForData())
    1f08:	77 20       	and	r7, r7
    1f0a:	9c f0       	brlt	.+38     	; 0x1f32 <main+0x10cc>
    1f0c:	c8 53       	subi	r28, 0x38	; 56
    1f0e:	df 4f       	sbci	r29, 0xFF	; 255
    1f10:	e8 81       	ld	r30, Y
    1f12:	f9 81       	ldd	r31, Y+1	; 0x01
    1f14:	c8 5c       	subi	r28, 0xC8	; 200
    1f16:	d0 40       	sbci	r29, 0x00	; 0
		//UCSR0C = ((1<<UCSZ00)|(1<<UCSZ01));
		UCSR0C = (3<<UCSZ00);
	}
	char checkForData()
	{
		if (UCSR0A & (1<<RXC0))
    1f18:	7c 90       	ld	r7, X
			ackDataIndex++;
			*/
			/********************************need to test************************/
			//check if there is data, if so, receive the data
			//-This avoid the program from endless loop in wait for data
			if (FingerPrintUart.checkForData())
    1f1a:	77 20       	and	r7, r7
    1f1c:	24 f0       	brlt	.+8      	; 0x1f26 <main+0x10c0>
	}
	void getAckPackage(char ackPackSize = 12)
	{
		int ackDataIndex = 0;
		char ackData = 0;
		while(ackDataIndex < ackPackSize)
    1f1e:	4c 30       	cpi	r20, 0x0C	; 12
    1f20:	51 05       	cpc	r21, r1
    1f22:	d4 f3       	brlt	.-12     	; 0x1f18 <main+0x10b2>
    1f24:	10 c6       	rjmp	.+3104   	; 0x2b46 <main+0x1ce0>
    1f26:	c8 53       	subi	r28, 0x38	; 56
    1f28:	df 4f       	sbci	r29, 0xFF	; 255
    1f2a:	f9 83       	std	Y+1, r31	; 0x01
    1f2c:	e8 83       	st	Y, r30
    1f2e:	c8 5c       	subi	r28, 0xC8	; 200
    1f30:	d0 40       	sbci	r29, 0x00	; 0
		}
		return 0;
	}
	char getData()
	{
		return UDR0;
    1f32:	fc 01       	movw	r30, r24
    1f34:	70 80       	ld	r7, Z
			//check if there is data, if so, receive the data
			//-This avoid the program from endless loop in wait for data
			if (FingerPrintUart.checkForData())
			{
				ackData = FingerPrintUart.getData();
				_ackPacket[ackDataIndex] = ackData;
    1f36:	c8 53       	subi	r28, 0x38	; 56
    1f38:	df 4f       	sbci	r29, 0xFF	; 255
    1f3a:	e8 81       	ld	r30, Y
    1f3c:	f9 81       	ldd	r31, Y+1	; 0x01
    1f3e:	c8 5c       	subi	r28, 0xC8	; 200
    1f40:	d0 40       	sbci	r29, 0x00	; 0
    1f42:	71 92       	st	Z+, r7
    1f44:	c8 53       	subi	r28, 0x38	; 56
    1f46:	df 4f       	sbci	r29, 0xFF	; 255
    1f48:	f9 83       	std	Y+1, r31	; 0x01
    1f4a:	e8 83       	st	Y, r30
    1f4c:	c8 5c       	subi	r28, 0xC8	; 200
    1f4e:	d0 40       	sbci	r29, 0x00	; 0
				ackDataIndex++;
    1f50:	4f 5f       	subi	r20, 0xFF	; 255
    1f52:	5f 4f       	sbci	r21, 0xFF	; 255
	}
	void getAckPackage(char ackPackSize = 12)
	{
		int ackDataIndex = 0;
		char ackData = 0;
		while(ackDataIndex < ackPackSize)
    1f54:	4c 30       	cpi	r20, 0x0C	; 12
    1f56:	51 05       	cpc	r21, r1
    1f58:	b1 f6       	brne	.-84     	; 0x1f06 <main+0x10a0>
    1f5a:	f5 c5       	rjmp	.+3050   	; 0x2b46 <main+0x1ce0>
				ackDataIndex++;
			}
		}
		for (int i = 0; i<ackPackSize;i++)
		{
			FingerPrintUart.UARTsend(_ackPacket[i]);
    1f5c:	c8 53       	subi	r28, 0x38	; 56
    1f5e:	df 4f       	sbci	r29, 0xFF	; 255
    1f60:	e8 81       	ld	r30, Y
    1f62:	f9 81       	ldd	r31, Y+1	; 0x01
    1f64:	c8 5c       	subi	r28, 0xC8	; 200
    1f66:	d0 40       	sbci	r29, 0x00	; 0
    1f68:	51 91       	ld	r21, Z+
    1f6a:	c8 53       	subi	r28, 0x38	; 56
    1f6c:	df 4f       	sbci	r29, 0xFF	; 255
    1f6e:	f9 83       	std	Y+1, r31	; 0x01
    1f70:	e8 83       	st	Y, r30
    1f72:	c8 5c       	subi	r28, 0xC8	; 200
    1f74:	d0 40       	sbci	r29, 0x00	; 0
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
    1f76:	4c 91       	ld	r20, X
    1f78:	45 ff       	sbrs	r20, 5
    1f7a:	fd cf       	rjmp	.-6      	; 0x1f76 <main+0x1110>
    1f7c:	c8 53       	subi	r28, 0x38	; 56
    1f7e:	df 4f       	sbci	r29, 0xFF	; 255
    1f80:	f9 83       	std	Y+1, r31	; 0x01
    1f82:	e8 83       	st	Y, r30
    1f84:	c8 5c       	subi	r28, 0xC8	; 200
    1f86:	d0 40       	sbci	r29, 0x00	; 0
		UDR0 = data;
    1f88:	fc 01       	movw	r30, r24
    1f8a:	50 83       	st	Z, r21
				ackData = FingerPrintUart.getData();
				_ackPacket[ackDataIndex] = ackData;
				ackDataIndex++;
			}
		}
		for (int i = 0; i<ackPackSize;i++)
    1f8c:	c8 53       	subi	r28, 0x38	; 56
    1f8e:	df 4f       	sbci	r29, 0xFF	; 255
    1f90:	48 81       	ld	r20, Y
    1f92:	59 81       	ldd	r21, Y+1	; 0x01
    1f94:	c8 5c       	subi	r28, 0xC8	; 200
    1f96:	d0 40       	sbci	r29, 0x00	; 0
    1f98:	44 15       	cp	r20, r4
    1f9a:	55 05       	cpc	r21, r5
    1f9c:	f9 f6       	brne	.-66     	; 0x1f5c <main+0x10f6>
	bool reSendPack(int confIndex, int cmd ,int reTryTimes = 1)
	{
		for (int i = 0; i < reTryTimes; i++)
		{
			sendAndGetAck(cmd);
			if (_ackPacket[confIndex] == 0)
    1f9e:	f8 01       	movw	r30, r16
    1fa0:	40 81       	ld	r20, Z
    1fa2:	44 23       	and	r20, r20
    1fa4:	09 f4       	brne	.+2      	; 0x1fa8 <main+0x1142>
    1fa6:	2d c1       	rjmp	.+602    	; 0x2202 <main+0x139c>
    1fa8:	61 50       	subi	r22, 0x01	; 1
    1faa:	71 09       	sbc	r23, r1
		}
		return confIndex;
	}
	bool reSendPack(int confIndex, int cmd ,int reTryTimes = 1)
	{
		for (int i = 0; i < reTryTimes; i++)
    1fac:	09 f0       	breq	.+2      	; 0x1fb0 <main+0x114a>
    1fae:	78 cf       	rjmp	.-272    	; 0x1ea0 <main+0x103a>
    1fb0:	2a c1       	rjmp	.+596    	; 0x2206 <main+0x13a0>
	}
	bool checkAckPackError(char cmd)
	{
		int confCodeIndex = (int)getAckPackConfirmCodeIndex(cmd);
		char confCode = _ackPacket[confCodeIndex - 1];
		switch(confCode)
    1fb2:	64 e0       	ldi	r22, 0x04	; 4
    1fb4:	70 e0       	ldi	r23, 0x00	; 0
	bool reSendPack(int confIndex, int cmd ,int reTryTimes = 1)
	{
		for (int i = 0; i < reTryTimes; i++)
		{
			sendAndGetAck(cmd);
			if (_ackPacket[confIndex] == 0)
    1fb6:	4f e2       	ldi	r20, 0x2F	; 47
    1fb8:	50 e0       	ldi	r21, 0x00	; 0
    1fba:	4c 0f       	add	r20, r28
    1fbc:	5d 1f       	adc	r21, r29
    1fbe:	04 0f       	add	r16, r20
    1fc0:	15 1f       	adc	r17, r21
	}
	bool checkAckPackError(char cmd)
	{
		int confCodeIndex = (int)getAckPackConfirmCodeIndex(cmd);
		char confCode = _ackPacket[confCodeIndex - 1];
		switch(confCode)
    1fc2:	fe 01       	movw	r30, r28
    1fc4:	32 96       	adiw	r30, 0x02	; 2
    1fc6:	c8 53       	subi	r28, 0x38	; 56
    1fc8:	df 4f       	sbci	r29, 0xFF	; 255
    1fca:	f9 83       	std	Y+1, r31	; 0x01
    1fcc:	e8 83       	st	Y, r30
    1fce:	c8 5c       	subi	r28, 0xC8	; 200
    1fd0:	d0 40       	sbci	r29, 0x00	; 0
	}
	void sendPackage(int size)
{
	for (int i = 0; i < size; i++)
	{
		FingerPrintUart.UARTsend(_dataPackage[i]);
    1fd2:	c8 53       	subi	r28, 0x38	; 56
    1fd4:	df 4f       	sbci	r29, 0xFF	; 255
    1fd6:	e8 81       	ld	r30, Y
    1fd8:	f9 81       	ldd	r31, Y+1	; 0x01
    1fda:	c8 5c       	subi	r28, 0xC8	; 200
    1fdc:	d0 40       	sbci	r29, 0x00	; 0
    1fde:	51 91       	ld	r21, Z+
    1fe0:	c8 53       	subi	r28, 0x38	; 56
    1fe2:	df 4f       	sbci	r29, 0xFF	; 255
    1fe4:	f9 83       	std	Y+1, r31	; 0x01
    1fe6:	e8 83       	st	Y, r30
    1fe8:	c8 5c       	subi	r28, 0xC8	; 200
    1fea:	d0 40       	sbci	r29, 0x00	; 0
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
    1fec:	4c 91       	ld	r20, X
    1fee:	45 ff       	sbrs	r20, 5
    1ff0:	fd cf       	rjmp	.-6      	; 0x1fec <main+0x1186>
    1ff2:	c8 53       	subi	r28, 0x38	; 56
    1ff4:	df 4f       	sbci	r29, 0xFF	; 255
    1ff6:	f9 83       	std	Y+1, r31	; 0x01
    1ff8:	e8 83       	st	Y, r30
    1ffa:	c8 5c       	subi	r28, 0xC8	; 200
    1ffc:	d0 40       	sbci	r29, 0x00	; 0
		UDR0 = data;
    1ffe:	fc 01       	movw	r30, r24
    2000:	50 83       	st	Z, r21
		}
	return 0;
	}
	void sendPackage(int size)
{
	for (int i = 0; i < size; i++)
    2002:	c8 53       	subi	r28, 0x38	; 56
    2004:	df 4f       	sbci	r29, 0xFF	; 255
    2006:	48 81       	ld	r20, Y
    2008:	59 81       	ldd	r21, Y+1	; 0x01
    200a:	c8 5c       	subi	r28, 0xC8	; 200
    200c:	d0 40       	sbci	r29, 0x00	; 0
    200e:	4a 15       	cp	r20, r10
    2010:	5b 05       	cpc	r21, r11
    2012:	f9 f6       	brne	.-66     	; 0x1fd2 <main+0x116c>
    2014:	fe 01       	movw	r30, r28
    2016:	bf 96       	adiw	r30, 0x2f	; 47
    2018:	40 e0       	ldi	r20, 0x00	; 0
    201a:	50 e0       	ldi	r21, 0x00	; 0
    201c:	c8 53       	subi	r28, 0x38	; 56
    201e:	df 4f       	sbci	r29, 0xFF	; 255
    2020:	f9 83       	std	Y+1, r31	; 0x01
    2022:	e8 83       	st	Y, r30
    2024:	c8 5c       	subi	r28, 0xC8	; 200
    2026:	d0 40       	sbci	r29, 0x00	; 0
		//UCSR0C = ((1<<UCSZ00)|(1<<UCSZ01));
		UCSR0C = (3<<UCSZ00);
	}
	char checkForData()
	{
		if (UCSR0A & (1<<RXC0))
    2028:	7c 90       	ld	r7, X
			ackDataIndex++;
			*/
			/********************************need to test************************/
			//check if there is data, if so, receive the data
			//-This avoid the program from endless loop in wait for data
			if (FingerPrintUart.checkForData())
    202a:	77 20       	and	r7, r7
    202c:	9c f0       	brlt	.+38     	; 0x2054 <main+0x11ee>
    202e:	c8 53       	subi	r28, 0x38	; 56
    2030:	df 4f       	sbci	r29, 0xFF	; 255
    2032:	e8 81       	ld	r30, Y
    2034:	f9 81       	ldd	r31, Y+1	; 0x01
    2036:	c8 5c       	subi	r28, 0xC8	; 200
    2038:	d0 40       	sbci	r29, 0x00	; 0
		//UCSR0C = ((1<<UCSZ00)|(1<<UCSZ01));
		UCSR0C = (3<<UCSZ00);
	}
	char checkForData()
	{
		if (UCSR0A & (1<<RXC0))
    203a:	7c 90       	ld	r7, X
			ackDataIndex++;
			*/
			/********************************need to test************************/
			//check if there is data, if so, receive the data
			//-This avoid the program from endless loop in wait for data
			if (FingerPrintUart.checkForData())
    203c:	77 20       	and	r7, r7
    203e:	24 f0       	brlt	.+8      	; 0x2048 <main+0x11e2>
	}
	void getAckPackage(char ackPackSize = 12)
	{
		int ackDataIndex = 0;
		char ackData = 0;
		while(ackDataIndex < ackPackSize)
    2040:	4c 30       	cpi	r20, 0x0C	; 12
    2042:	51 05       	cpc	r21, r1
    2044:	d4 f3       	brlt	.-12     	; 0x203a <main+0x11d4>
    2046:	88 c5       	rjmp	.+2832   	; 0x2b58 <main+0x1cf2>
    2048:	c8 53       	subi	r28, 0x38	; 56
    204a:	df 4f       	sbci	r29, 0xFF	; 255
    204c:	f9 83       	std	Y+1, r31	; 0x01
    204e:	e8 83       	st	Y, r30
    2050:	c8 5c       	subi	r28, 0xC8	; 200
    2052:	d0 40       	sbci	r29, 0x00	; 0
		}
		return 0;
	}
	char getData()
	{
		return UDR0;
    2054:	fc 01       	movw	r30, r24
    2056:	70 80       	ld	r7, Z
			//check if there is data, if so, receive the data
			//-This avoid the program from endless loop in wait for data
			if (FingerPrintUart.checkForData())
			{
				ackData = FingerPrintUart.getData();
				_ackPacket[ackDataIndex] = ackData;
    2058:	c8 53       	subi	r28, 0x38	; 56
    205a:	df 4f       	sbci	r29, 0xFF	; 255
    205c:	e8 81       	ld	r30, Y
    205e:	f9 81       	ldd	r31, Y+1	; 0x01
    2060:	c8 5c       	subi	r28, 0xC8	; 200
    2062:	d0 40       	sbci	r29, 0x00	; 0
    2064:	71 92       	st	Z+, r7
    2066:	c8 53       	subi	r28, 0x38	; 56
    2068:	df 4f       	sbci	r29, 0xFF	; 255
    206a:	f9 83       	std	Y+1, r31	; 0x01
    206c:	e8 83       	st	Y, r30
    206e:	c8 5c       	subi	r28, 0xC8	; 200
    2070:	d0 40       	sbci	r29, 0x00	; 0
				ackDataIndex++;
    2072:	4f 5f       	subi	r20, 0xFF	; 255
    2074:	5f 4f       	sbci	r21, 0xFF	; 255
	}
	void getAckPackage(char ackPackSize = 12)
	{
		int ackDataIndex = 0;
		char ackData = 0;
		while(ackDataIndex < ackPackSize)
    2076:	4c 30       	cpi	r20, 0x0C	; 12
    2078:	51 05       	cpc	r21, r1
    207a:	b1 f6       	brne	.-84     	; 0x2028 <main+0x11c2>
    207c:	6d c5       	rjmp	.+2778   	; 0x2b58 <main+0x1cf2>
				ackDataIndex++;
			}
		}
		for (int i = 0; i<ackPackSize;i++)
		{
			FingerPrintUart.UARTsend(_ackPacket[i]);
    207e:	c8 53       	subi	r28, 0x38	; 56
    2080:	df 4f       	sbci	r29, 0xFF	; 255
    2082:	e8 81       	ld	r30, Y
    2084:	f9 81       	ldd	r31, Y+1	; 0x01
    2086:	c8 5c       	subi	r28, 0xC8	; 200
    2088:	d0 40       	sbci	r29, 0x00	; 0
    208a:	51 91       	ld	r21, Z+
    208c:	c8 53       	subi	r28, 0x38	; 56
    208e:	df 4f       	sbci	r29, 0xFF	; 255
    2090:	f9 83       	std	Y+1, r31	; 0x01
    2092:	e8 83       	st	Y, r30
    2094:	c8 5c       	subi	r28, 0xC8	; 200
    2096:	d0 40       	sbci	r29, 0x00	; 0
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
    2098:	4c 91       	ld	r20, X
    209a:	45 ff       	sbrs	r20, 5
    209c:	fd cf       	rjmp	.-6      	; 0x2098 <main+0x1232>
    209e:	c8 53       	subi	r28, 0x38	; 56
    20a0:	df 4f       	sbci	r29, 0xFF	; 255
    20a2:	f9 83       	std	Y+1, r31	; 0x01
    20a4:	e8 83       	st	Y, r30
    20a6:	c8 5c       	subi	r28, 0xC8	; 200
    20a8:	d0 40       	sbci	r29, 0x00	; 0
		UDR0 = data;
    20aa:	fc 01       	movw	r30, r24
    20ac:	50 83       	st	Z, r21
				ackData = FingerPrintUart.getData();
				_ackPacket[ackDataIndex] = ackData;
				ackDataIndex++;
			}
		}
		for (int i = 0; i<ackPackSize;i++)
    20ae:	c8 53       	subi	r28, 0x38	; 56
    20b0:	df 4f       	sbci	r29, 0xFF	; 255
    20b2:	48 81       	ld	r20, Y
    20b4:	59 81       	ldd	r21, Y+1	; 0x01
    20b6:	c8 5c       	subi	r28, 0xC8	; 200
    20b8:	d0 40       	sbci	r29, 0x00	; 0
    20ba:	44 15       	cp	r20, r4
    20bc:	55 05       	cpc	r21, r5
    20be:	f9 f6       	brne	.-66     	; 0x207e <main+0x1218>
	bool reSendPack(int confIndex, int cmd ,int reTryTimes = 1)
	{
		for (int i = 0; i < reTryTimes; i++)
		{
			sendAndGetAck(cmd);
			if (_ackPacket[confIndex] == 0)
    20c0:	f8 01       	movw	r30, r16
    20c2:	40 81       	ld	r20, Z
    20c4:	44 23       	and	r20, r20
    20c6:	09 f4       	brne	.+2      	; 0x20ca <main+0x1264>
    20c8:	a0 c0       	rjmp	.+320    	; 0x220a <main+0x13a4>
    20ca:	61 50       	subi	r22, 0x01	; 1
    20cc:	71 09       	sbc	r23, r1
		}
		return confIndex;
	}
	bool reSendPack(int confIndex, int cmd ,int reTryTimes = 1)
	{
		for (int i = 0; i < reTryTimes; i++)
    20ce:	09 f0       	breq	.+2      	; 0x20d2 <main+0x126c>
    20d0:	78 cf       	rjmp	.-272    	; 0x1fc2 <main+0x115c>
    20d2:	9d c0       	rjmp	.+314    	; 0x220e <main+0x13a8>
	}
	bool checkAckPackError(char cmd)
	{
		int confCodeIndex = (int)getAckPackConfirmCodeIndex(cmd);
		char confCode = _ackPacket[confCodeIndex - 1];
		switch(confCode)
    20d4:	65 e0       	ldi	r22, 0x05	; 5
    20d6:	70 e0       	ldi	r23, 0x00	; 0
	bool reSendPack(int confIndex, int cmd ,int reTryTimes = 1)
	{
		for (int i = 0; i < reTryTimes; i++)
		{
			sendAndGetAck(cmd);
			if (_ackPacket[confIndex] == 0)
    20d8:	4f e2       	ldi	r20, 0x2F	; 47
    20da:	50 e0       	ldi	r21, 0x00	; 0
    20dc:	4c 0f       	add	r20, r28
    20de:	5d 1f       	adc	r21, r29
    20e0:	04 0f       	add	r16, r20
    20e2:	15 1f       	adc	r17, r21
	}
	bool checkAckPackError(char cmd)
	{
		int confCodeIndex = (int)getAckPackConfirmCodeIndex(cmd);
		char confCode = _ackPacket[confCodeIndex - 1];
		switch(confCode)
    20e4:	fe 01       	movw	r30, r28
    20e6:	32 96       	adiw	r30, 0x02	; 2
    20e8:	c8 53       	subi	r28, 0x38	; 56
    20ea:	df 4f       	sbci	r29, 0xFF	; 255
    20ec:	f9 83       	std	Y+1, r31	; 0x01
    20ee:	e8 83       	st	Y, r30
    20f0:	c8 5c       	subi	r28, 0xC8	; 200
    20f2:	d0 40       	sbci	r29, 0x00	; 0
	}
	void sendPackage(int size)
{
	for (int i = 0; i < size; i++)
	{
		FingerPrintUart.UARTsend(_dataPackage[i]);
    20f4:	c8 53       	subi	r28, 0x38	; 56
    20f6:	df 4f       	sbci	r29, 0xFF	; 255
    20f8:	e8 81       	ld	r30, Y
    20fa:	f9 81       	ldd	r31, Y+1	; 0x01
    20fc:	c8 5c       	subi	r28, 0xC8	; 200
    20fe:	d0 40       	sbci	r29, 0x00	; 0
    2100:	51 91       	ld	r21, Z+
    2102:	c8 53       	subi	r28, 0x38	; 56
    2104:	df 4f       	sbci	r29, 0xFF	; 255
    2106:	f9 83       	std	Y+1, r31	; 0x01
    2108:	e8 83       	st	Y, r30
    210a:	c8 5c       	subi	r28, 0xC8	; 200
    210c:	d0 40       	sbci	r29, 0x00	; 0
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
    210e:	4c 91       	ld	r20, X
    2110:	45 ff       	sbrs	r20, 5
    2112:	fd cf       	rjmp	.-6      	; 0x210e <main+0x12a8>
    2114:	c8 53       	subi	r28, 0x38	; 56
    2116:	df 4f       	sbci	r29, 0xFF	; 255
    2118:	f9 83       	std	Y+1, r31	; 0x01
    211a:	e8 83       	st	Y, r30
    211c:	c8 5c       	subi	r28, 0xC8	; 200
    211e:	d0 40       	sbci	r29, 0x00	; 0
		UDR0 = data;
    2120:	fc 01       	movw	r30, r24
    2122:	50 83       	st	Z, r21
		}
	return 0;
	}
	void sendPackage(int size)
{
	for (int i = 0; i < size; i++)
    2124:	c8 53       	subi	r28, 0x38	; 56
    2126:	df 4f       	sbci	r29, 0xFF	; 255
    2128:	48 81       	ld	r20, Y
    212a:	59 81       	ldd	r21, Y+1	; 0x01
    212c:	c8 5c       	subi	r28, 0xC8	; 200
    212e:	d0 40       	sbci	r29, 0x00	; 0
    2130:	a4 16       	cp	r10, r20
    2132:	b5 06       	cpc	r11, r21
    2134:	f9 f6       	brne	.-66     	; 0x20f4 <main+0x128e>
    2136:	fe 01       	movw	r30, r28
    2138:	bf 96       	adiw	r30, 0x2f	; 47
    213a:	40 e0       	ldi	r20, 0x00	; 0
    213c:	50 e0       	ldi	r21, 0x00	; 0
    213e:	c8 53       	subi	r28, 0x38	; 56
    2140:	df 4f       	sbci	r29, 0xFF	; 255
    2142:	f9 83       	std	Y+1, r31	; 0x01
    2144:	e8 83       	st	Y, r30
    2146:	c8 5c       	subi	r28, 0xC8	; 200
    2148:	d0 40       	sbci	r29, 0x00	; 0
		//UCSR0C = ((1<<UCSZ00)|(1<<UCSZ01));
		UCSR0C = (3<<UCSZ00);
	}
	char checkForData()
	{
		if (UCSR0A & (1<<RXC0))
    214a:	7c 90       	ld	r7, X
			ackDataIndex++;
			*/
			/********************************need to test************************/
			//check if there is data, if so, receive the data
			//-This avoid the program from endless loop in wait for data
			if (FingerPrintUart.checkForData())
    214c:	77 20       	and	r7, r7
    214e:	9c f0       	brlt	.+38     	; 0x2176 <main+0x1310>
    2150:	c8 53       	subi	r28, 0x38	; 56
    2152:	df 4f       	sbci	r29, 0xFF	; 255
    2154:	e8 81       	ld	r30, Y
    2156:	f9 81       	ldd	r31, Y+1	; 0x01
    2158:	c8 5c       	subi	r28, 0xC8	; 200
    215a:	d0 40       	sbci	r29, 0x00	; 0
		//UCSR0C = ((1<<UCSZ00)|(1<<UCSZ01));
		UCSR0C = (3<<UCSZ00);
	}
	char checkForData()
	{
		if (UCSR0A & (1<<RXC0))
    215c:	7c 90       	ld	r7, X
			ackDataIndex++;
			*/
			/********************************need to test************************/
			//check if there is data, if so, receive the data
			//-This avoid the program from endless loop in wait for data
			if (FingerPrintUart.checkForData())
    215e:	77 20       	and	r7, r7
    2160:	24 f0       	brlt	.+8      	; 0x216a <main+0x1304>
	}
	void getAckPackage(char ackPackSize = 12)
	{
		int ackDataIndex = 0;
		char ackData = 0;
		while(ackDataIndex < ackPackSize)
    2162:	4c 30       	cpi	r20, 0x0C	; 12
    2164:	51 05       	cpc	r21, r1
    2166:	d4 f3       	brlt	.-12     	; 0x215c <main+0x12f6>
    2168:	00 c5       	rjmp	.+2560   	; 0x2b6a <main+0x1d04>
    216a:	c8 53       	subi	r28, 0x38	; 56
    216c:	df 4f       	sbci	r29, 0xFF	; 255
    216e:	f9 83       	std	Y+1, r31	; 0x01
    2170:	e8 83       	st	Y, r30
    2172:	c8 5c       	subi	r28, 0xC8	; 200
    2174:	d0 40       	sbci	r29, 0x00	; 0
		}
		return 0;
	}
	char getData()
	{
		return UDR0;
    2176:	fc 01       	movw	r30, r24
    2178:	70 80       	ld	r7, Z
			//check if there is data, if so, receive the data
			//-This avoid the program from endless loop in wait for data
			if (FingerPrintUart.checkForData())
			{
				ackData = FingerPrintUart.getData();
				_ackPacket[ackDataIndex] = ackData;
    217a:	c8 53       	subi	r28, 0x38	; 56
    217c:	df 4f       	sbci	r29, 0xFF	; 255
    217e:	e8 81       	ld	r30, Y
    2180:	f9 81       	ldd	r31, Y+1	; 0x01
    2182:	c8 5c       	subi	r28, 0xC8	; 200
    2184:	d0 40       	sbci	r29, 0x00	; 0
    2186:	71 92       	st	Z+, r7
    2188:	c8 53       	subi	r28, 0x38	; 56
    218a:	df 4f       	sbci	r29, 0xFF	; 255
    218c:	f9 83       	std	Y+1, r31	; 0x01
    218e:	e8 83       	st	Y, r30
    2190:	c8 5c       	subi	r28, 0xC8	; 200
    2192:	d0 40       	sbci	r29, 0x00	; 0
				ackDataIndex++;
    2194:	4f 5f       	subi	r20, 0xFF	; 255
    2196:	5f 4f       	sbci	r21, 0xFF	; 255
	}
	void getAckPackage(char ackPackSize = 12)
	{
		int ackDataIndex = 0;
		char ackData = 0;
		while(ackDataIndex < ackPackSize)
    2198:	4c 30       	cpi	r20, 0x0C	; 12
    219a:	51 05       	cpc	r21, r1
    219c:	b1 f6       	brne	.-84     	; 0x214a <main+0x12e4>
    219e:	e5 c4       	rjmp	.+2506   	; 0x2b6a <main+0x1d04>
				ackDataIndex++;
			}
		}
		for (int i = 0; i<ackPackSize;i++)
		{
			FingerPrintUart.UARTsend(_ackPacket[i]);
    21a0:	c8 53       	subi	r28, 0x38	; 56
    21a2:	df 4f       	sbci	r29, 0xFF	; 255
    21a4:	e8 81       	ld	r30, Y
    21a6:	f9 81       	ldd	r31, Y+1	; 0x01
    21a8:	c8 5c       	subi	r28, 0xC8	; 200
    21aa:	d0 40       	sbci	r29, 0x00	; 0
    21ac:	51 91       	ld	r21, Z+
    21ae:	c8 53       	subi	r28, 0x38	; 56
    21b0:	df 4f       	sbci	r29, 0xFF	; 255
    21b2:	f9 83       	std	Y+1, r31	; 0x01
    21b4:	e8 83       	st	Y, r30
    21b6:	c8 5c       	subi	r28, 0xC8	; 200
    21b8:	d0 40       	sbci	r29, 0x00	; 0
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
    21ba:	4c 91       	ld	r20, X
    21bc:	45 ff       	sbrs	r20, 5
    21be:	fd cf       	rjmp	.-6      	; 0x21ba <main+0x1354>
    21c0:	c8 53       	subi	r28, 0x38	; 56
    21c2:	df 4f       	sbci	r29, 0xFF	; 255
    21c4:	f9 83       	std	Y+1, r31	; 0x01
    21c6:	e8 83       	st	Y, r30
    21c8:	c8 5c       	subi	r28, 0xC8	; 200
    21ca:	d0 40       	sbci	r29, 0x00	; 0
		UDR0 = data;
    21cc:	fc 01       	movw	r30, r24
    21ce:	50 83       	st	Z, r21
				ackData = FingerPrintUart.getData();
				_ackPacket[ackDataIndex] = ackData;
				ackDataIndex++;
			}
		}
		for (int i = 0; i<ackPackSize;i++)
    21d0:	c8 53       	subi	r28, 0x38	; 56
    21d2:	df 4f       	sbci	r29, 0xFF	; 255
    21d4:	48 81       	ld	r20, Y
    21d6:	59 81       	ldd	r21, Y+1	; 0x01
    21d8:	c8 5c       	subi	r28, 0xC8	; 200
    21da:	d0 40       	sbci	r29, 0x00	; 0
    21dc:	44 15       	cp	r20, r4
    21de:	55 05       	cpc	r21, r5
    21e0:	f9 f6       	brne	.-66     	; 0x21a0 <main+0x133a>
	bool reSendPack(int confIndex, int cmd ,int reTryTimes = 1)
	{
		for (int i = 0; i < reTryTimes; i++)
		{
			sendAndGetAck(cmd);
			if (_ackPacket[confIndex] == 0)
    21e2:	f8 01       	movw	r30, r16
    21e4:	40 81       	ld	r20, Z
    21e6:	44 23       	and	r20, r20
    21e8:	a1 f0       	breq	.+40     	; 0x2212 <main+0x13ac>
    21ea:	61 50       	subi	r22, 0x01	; 1
    21ec:	71 09       	sbc	r23, r1
		}
		return confIndex;
	}
	bool reSendPack(int confIndex, int cmd ,int reTryTimes = 1)
	{
		for (int i = 0; i < reTryTimes; i++)
    21ee:	09 f0       	breq	.+2      	; 0x21f2 <main+0x138c>
    21f0:	79 cf       	rjmp	.-270    	; 0x20e4 <main+0x127e>
			if (_ackPacket[confIndex] == 0)
			{
				return 1;
			}
		}
		return 0;
    21f2:	40 e0       	ldi	r20, 0x00	; 0
    21f4:	0f c0       	rjmp	.+30     	; 0x2214 <main+0x13ae>
	{
		int confCodeIndex = (int)getAckPackConfirmCodeIndex(cmd);
		char confCode = _ackPacket[confCodeIndex - 1];
		switch(confCode)
		{
			case 0x00: return 1;
    21f6:	48 2d       	mov	r20, r8
    21f8:	0d c0       	rjmp	.+26     	; 0x2214 <main+0x13ae>
		for (int i = 0; i < reTryTimes; i++)
		{
			sendAndGetAck(cmd);
			if (_ackPacket[confIndex] == 0)
			{
				return 1;
    21fa:	48 2d       	mov	r20, r8
    21fc:	0b c0       	rjmp	.+22     	; 0x2214 <main+0x13ae>
			}
		}
		return 0;
    21fe:	40 e0       	ldi	r20, 0x00	; 0
    2200:	09 c0       	rjmp	.+18     	; 0x2214 <main+0x13ae>
		for (int i = 0; i < reTryTimes; i++)
		{
			sendAndGetAck(cmd);
			if (_ackPacket[confIndex] == 0)
			{
				return 1;
    2202:	48 2d       	mov	r20, r8
    2204:	07 c0       	rjmp	.+14     	; 0x2214 <main+0x13ae>
			}
		}
		return 0;
    2206:	40 e0       	ldi	r20, 0x00	; 0
    2208:	05 c0       	rjmp	.+10     	; 0x2214 <main+0x13ae>
		for (int i = 0; i < reTryTimes; i++)
		{
			sendAndGetAck(cmd);
			if (_ackPacket[confIndex] == 0)
			{
				return 1;
    220a:	48 2d       	mov	r20, r8
    220c:	03 c0       	rjmp	.+6      	; 0x2214 <main+0x13ae>
			}
		}
		return 0;
    220e:	40 e0       	ldi	r20, 0x00	; 0
    2210:	01 c0       	rjmp	.+2      	; 0x2214 <main+0x13ae>
		for (int i = 0; i < reTryTimes; i++)
		{
			sendAndGetAck(cmd);
			if (_ackPacket[confIndex] == 0)
			{
				return 1;
    2212:	48 2d       	mov	r20, r8
		}
		return 0;
	}
	char searchFinger()
	{
		if (genFingerImg())
    2214:	44 23       	and	r20, r20
    2216:	09 f4       	brne	.+2      	; 0x221a <main+0x13b4>
    2218:	98 ca       	rjmp	.-2768   	; 0x174a <main+0x8e4>
	void setPacketLength(char length = 0x07)
	{
		//Refers to the length of package content (command packets and data packets)
		//plus the length of Checksum( 2 bytes)   !!!MAX is 256 Byte!!!
		/**** {07H} = 4byte Password, 1Byte IndecationCode (command), 2Byte CheckSum ****/
		_dataPackage[7] = 0;
    221a:	19 86       	std	Y+9, r1	; 0x09
		_dataPackage[8] = length;
    221c:	6a 86       	std	Y+10, r6	; 0x0a
	}
	void setAcommand(commands commandValue)
	{
		_dataPackage[9] = commandValue;
    221e:	f4 e0       	ldi	r31, 0x04	; 4
    2220:	fb 87       	std	Y+11, r31	; 0x0b
	{
		if (genFingerImg())
		{
			setPacketLength(0x08);							//index 7,8
			setAcommand(Serach);							//index 9
			_dataPackage[10] = 0x01;						//buffer ID
    2222:	dc 86       	std	Y+12, r13	; 0x0c
			_dataPackage[11] = 0x00;						//page ID msByte
    2224:	1d 86       	std	Y+13, r1	; 0x0d
			_dataPackage[12] = 0x00;						//page ID lsByte
    2226:	1e 86       	std	Y+14, r1	; 0x0e
			_dataPackage[13] = 0x00;						//page ID msByte
    2228:	1f 86       	std	Y+15, r1	; 0x0f
			_dataPackage[14] = 0xFF;						//page ID lsByte
    222a:	4f ef       	ldi	r20, 0xFF	; 255
    222c:	48 8b       	std	Y+16, r20	; 0x10
		setup();
	}
	~FingerPrint(){}
	void setCheckSum(int sum, int index)
	{
		_dataPackage[index] = sum >> 8;
    222e:	d9 8a       	std	Y+17, r13	; 0x11
		_dataPackage[index + 1] = sum;	
    2230:	5d e0       	ldi	r21, 0x0D	; 13
    2232:	5a 8b       	std	Y+18, r21	; 0x12
    2234:	fe 01       	movw	r30, r28
    2236:	32 96       	adiw	r30, 0x02	; 2
    2238:	bf 01       	movw	r22, r30
	}
	void sendPackage(int size)
{
	for (int i = 0; i < size; i++)
	{
		FingerPrintUart.UARTsend(_dataPackage[i]);
    223a:	fb 01       	movw	r30, r22
    223c:	51 91       	ld	r21, Z+
    223e:	bf 01       	movw	r22, r30
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
    2240:	4c 91       	ld	r20, X
    2242:	45 ff       	sbrs	r20, 5
    2244:	fd cf       	rjmp	.-6      	; 0x2240 <main+0x13da>
		UDR0 = data;
    2246:	fc 01       	movw	r30, r24
    2248:	50 83       	st	Z, r21
		}
	return 0;
	}
	void sendPackage(int size)
{
	for (int i = 0; i < size; i++)
    224a:	e6 16       	cp	r14, r22
    224c:	f7 06       	cpc	r15, r23
    224e:	a9 f7       	brne	.-22     	; 0x223a <main+0x13d4>
    2250:	fe 01       	movw	r30, r28
    2252:	bf 96       	adiw	r30, 0x2f	; 47
    2254:	60 e0       	ldi	r22, 0x00	; 0
    2256:	70 e0       	ldi	r23, 0x00	; 0
    2258:	8f 01       	movw	r16, r30
		//UCSR0C = ((1<<UCSZ00)|(1<<UCSZ01));
		UCSR0C = (3<<UCSZ00);
	}
	char checkForData()
	{
		if (UCSR0A & (1<<RXC0))
    225a:	4c 91       	ld	r20, X
			ackDataIndex++;
			*/
			/********************************need to test************************/
			//check if there is data, if so, receive the data
			//-This avoid the program from endless loop in wait for data
			if (FingerPrintUart.checkForData())
    225c:	44 23       	and	r20, r20
    225e:	4c f0       	brlt	.+18     	; 0x2272 <main+0x140c>
    2260:	f8 01       	movw	r30, r16
		//UCSR0C = ((1<<UCSZ00)|(1<<UCSZ01));
		UCSR0C = (3<<UCSZ00);
	}
	char checkForData()
	{
		if (UCSR0A & (1<<RXC0))
    2262:	4c 91       	ld	r20, X
			ackDataIndex++;
			*/
			/********************************need to test************************/
			//check if there is data, if so, receive the data
			//-This avoid the program from endless loop in wait for data
			if (FingerPrintUart.checkForData())
    2264:	44 23       	and	r20, r20
    2266:	24 f0       	brlt	.+8      	; 0x2270 <main+0x140a>
	}
	void getAckPackage(char ackPackSize = 12)
	{
		int ackDataIndex = 0;
		char ackData = 0;
		while(ackDataIndex < ackPackSize)
    2268:	60 31       	cpi	r22, 0x10	; 16
    226a:	71 05       	cpc	r23, r1
    226c:	d4 f3       	brlt	.-12     	; 0x2262 <main+0x13fc>
    226e:	86 c4       	rjmp	.+2316   	; 0x2b7c <main+0x1d16>
    2270:	8f 01       	movw	r16, r30
		}
		return 0;
	}
	char getData()
	{
		return UDR0;
    2272:	fc 01       	movw	r30, r24
    2274:	40 81       	ld	r20, Z
			//check if there is data, if so, receive the data
			//-This avoid the program from endless loop in wait for data
			if (FingerPrintUart.checkForData())
			{
				ackData = FingerPrintUart.getData();
				_ackPacket[ackDataIndex] = ackData;
    2276:	f8 01       	movw	r30, r16
    2278:	41 93       	st	Z+, r20
    227a:	8f 01       	movw	r16, r30
				ackDataIndex++;
    227c:	6f 5f       	subi	r22, 0xFF	; 255
    227e:	7f 4f       	sbci	r23, 0xFF	; 255
	}
	void getAckPackage(char ackPackSize = 12)
	{
		int ackDataIndex = 0;
		char ackData = 0;
		while(ackDataIndex < ackPackSize)
    2280:	60 31       	cpi	r22, 0x10	; 16
    2282:	71 05       	cpc	r23, r1
    2284:	51 f7       	brne	.-44     	; 0x225a <main+0x13f4>
    2286:	7a c4       	rjmp	.+2292   	; 0x2b7c <main+0x1d16>
				ackDataIndex++;
			}
		}
		for (int i = 0; i<ackPackSize;i++)
		{
			FingerPrintUart.UARTsend(_ackPacket[i]);
    2288:	fb 01       	movw	r30, r22
    228a:	51 91       	ld	r21, Z+
    228c:	bf 01       	movw	r22, r30
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
    228e:	4c 91       	ld	r20, X
    2290:	45 ff       	sbrs	r20, 5
    2292:	fd cf       	rjmp	.-6      	; 0x228e <main+0x1428>
		UDR0 = data;
    2294:	fc 01       	movw	r30, r24
    2296:	50 83       	st	Z, r21
				ackData = FingerPrintUart.getData();
				_ackPacket[ackDataIndex] = ackData;
				ackDataIndex++;
			}
		}
		for (int i = 0; i<ackPackSize;i++)
    2298:	62 17       	cp	r22, r18
    229a:	73 07       	cpc	r23, r19
    229c:	a9 f7       	brne	.-22     	; 0x2288 <main+0x1422>
    229e:	72 c4       	rjmp	.+2276   	; 0x2b84 <main+0x1d1e>
		{
			confIndex = packSize - 2;
		}
		for (int i = 0; i < packSize;i++)
		{
			while(_ackPacket[i] != 0xEF && i < packSize)
    22a0:	40 31       	cpi	r20, 0x10	; 16
    22a2:	51 05       	cpc	r21, r1
    22a4:	09 f4       	brne	.+2      	; 0x22a8 <main+0x1442>
    22a6:	77 c4       	rjmp	.+2286   	; 0x2b96 <main+0x1d30>
			{
				i++;
    22a8:	4f 5f       	subi	r20, 0xFF	; 255
    22aa:	5f 4f       	sbci	r21, 0xFF	; 255
		{
			confIndex = packSize - 2;
		}
		for (int i = 0; i < packSize;i++)
		{
			while(_ackPacket[i] != 0xEF && i < packSize)
    22ac:	61 91       	ld	r22, Z+
    22ae:	6f 3e       	cpi	r22, 0xEF	; 239
    22b0:	b9 f7       	brne	.-18     	; 0x22a0 <main+0x143a>
    22b2:	71 c4       	rjmp	.+2274   	; 0x2b96 <main+0x1d30>
	}
	bool checkAckPackError(char cmd)
	{
		int confCodeIndex = (int)getAckPackConfirmCodeIndex(cmd);
		char confCode = _ackPacket[confCodeIndex - 1];
		switch(confCode)
    22b4:	48 ad       	ldd	r20, Y+56	; 0x38
    22b6:	50 e0       	ldi	r21, 0x00	; 0
    22b8:	4a 31       	cpi	r20, 0x1A	; 26
    22ba:	51 05       	cpc	r21, r1
    22bc:	08 f0       	brcs	.+2      	; 0x22c0 <main+0x145a>
    22be:	45 ca       	rjmp	.-2934   	; 0x174a <main+0x8e4>
    22c0:	fa 01       	movw	r30, r20
    22c2:	e5 52       	subi	r30, 0x25	; 37
    22c4:	fe 4f       	sbci	r31, 0xFE	; 254
    22c6:	0c 94 fb 15 	jmp	0x2bf6	; 0x2bf6 <__tablejump2__>
		}
		return 0;
	}
	bool checkAckPackError(char cmd)
	{
		int confCodeIndex = (int)getAckPackConfirmCodeIndex(cmd);
    22ca:	0c 2d       	mov	r16, r12
    22cc:	19 2d       	mov	r17, r9
		}
	return 0;
	}
	void sendPackage(int size)
{
	for (int i = 0; i < size; i++)
    22ce:	65 e0       	ldi	r22, 0x05	; 5
    22d0:	70 e0       	ldi	r23, 0x00	; 0
	bool reSendPack(int confIndex, int cmd ,int reTryTimes = 1)
	{
		for (int i = 0; i < reTryTimes; i++)
		{
			sendAndGetAck(cmd);
			if (_ackPacket[confIndex] == 0)
    22d2:	4f e2       	ldi	r20, 0x2F	; 47
    22d4:	50 e0       	ldi	r21, 0x00	; 0
    22d6:	4c 0f       	add	r20, r28
    22d8:	5d 1f       	adc	r21, r29
    22da:	04 0f       	add	r16, r20
    22dc:	15 1f       	adc	r17, r21
    22de:	ba c1       	rjmp	.+884    	; 0x2654 <main+0x17ee>
		}
		return 0;
	}
	bool checkAckPackError(char cmd)
	{
		int confCodeIndex = (int)getAckPackConfirmCodeIndex(cmd);
    22e0:	0c 2d       	mov	r16, r12
    22e2:	19 2d       	mov	r17, r9
		}
	return 0;
	}
	void sendPackage(int size)
{
	for (int i = 0; i < size; i++)
    22e4:	64 e0       	ldi	r22, 0x04	; 4
    22e6:	70 e0       	ldi	r23, 0x00	; 0
	bool reSendPack(int confIndex, int cmd ,int reTryTimes = 1)
	{
		for (int i = 0; i < reTryTimes; i++)
		{
			sendAndGetAck(cmd);
			if (_ackPacket[confIndex] == 0)
    22e8:	ef e2       	ldi	r30, 0x2F	; 47
    22ea:	f0 e0       	ldi	r31, 0x00	; 0
    22ec:	ec 0f       	add	r30, r28
    22ee:	fd 1f       	adc	r31, r29
    22f0:	0e 0f       	add	r16, r30
    22f2:	1f 1f       	adc	r17, r31
    22f4:	26 c1       	rjmp	.+588    	; 0x2542 <main+0x16dc>
		}
		return 0;
	}
	bool checkAckPackError(char cmd)
	{
		int confCodeIndex = (int)getAckPackConfirmCodeIndex(cmd);
    22f6:	0c 2d       	mov	r16, r12
    22f8:	19 2d       	mov	r17, r9
	}
	void getAckPackage(char ackPackSize = 12)
	{
		int ackDataIndex = 0;
		char ackData = 0;
		while(ackDataIndex < ackPackSize)
    22fa:	63 e0       	ldi	r22, 0x03	; 3
    22fc:	70 e0       	ldi	r23, 0x00	; 0
	bool reSendPack(int confIndex, int cmd ,int reTryTimes = 1)
	{
		for (int i = 0; i < reTryTimes; i++)
		{
			sendAndGetAck(cmd);
			if (_ackPacket[confIndex] == 0)
    22fe:	4f e2       	ldi	r20, 0x2F	; 47
    2300:	50 e0       	ldi	r21, 0x00	; 0
    2302:	4c 0f       	add	r20, r28
    2304:	5d 1f       	adc	r21, r29
    2306:	04 0f       	add	r16, r20
    2308:	15 1f       	adc	r17, r21
    230a:	92 c0       	rjmp	.+292    	; 0x2430 <main+0x15ca>
		}
		return 0;
	}
	bool checkAckPackError(char cmd)
	{
		int confCodeIndex = (int)getAckPackConfirmCodeIndex(cmd);
    230c:	0c 2d       	mov	r16, r12
    230e:	19 2d       	mov	r17, r9
    2310:	45 e0       	ldi	r20, 0x05	; 5
    2312:	50 e0       	ldi	r21, 0x00	; 0
	bool reSendPack(int confIndex, int cmd ,int reTryTimes = 1)
	{
		for (int i = 0; i < reTryTimes; i++)
		{
			sendAndGetAck(cmd);
			if (_ackPacket[confIndex] == 0)
    2314:	6f e2       	ldi	r22, 0x2F	; 47
    2316:	70 e0       	ldi	r23, 0x00	; 0
    2318:	6c 0f       	add	r22, r28
    231a:	7d 1f       	adc	r23, r29
    231c:	06 0f       	add	r16, r22
    231e:	17 1f       	adc	r17, r23
		}
		return 0;
	}
	bool checkAckPackError(char cmd)
	{
		int confCodeIndex = (int)getAckPackConfirmCodeIndex(cmd);
    2320:	fe 01       	movw	r30, r28
    2322:	32 96       	adiw	r30, 0x02	; 2
    2324:	c8 53       	subi	r28, 0x38	; 56
    2326:	df 4f       	sbci	r29, 0xFF	; 255
    2328:	f9 83       	std	Y+1, r31	; 0x01
    232a:	e8 83       	st	Y, r30
    232c:	c8 5c       	subi	r28, 0xC8	; 200
    232e:	d0 40       	sbci	r29, 0x00	; 0
	}
	void sendPackage(int size)
{
	for (int i = 0; i < size; i++)
	{
		FingerPrintUart.UARTsend(_dataPackage[i]);
    2330:	c8 53       	subi	r28, 0x38	; 56
    2332:	df 4f       	sbci	r29, 0xFF	; 255
    2334:	e8 81       	ld	r30, Y
    2336:	f9 81       	ldd	r31, Y+1	; 0x01
    2338:	c8 5c       	subi	r28, 0xC8	; 200
    233a:	d0 40       	sbci	r29, 0x00	; 0
    233c:	71 91       	ld	r23, Z+
    233e:	c8 53       	subi	r28, 0x38	; 56
    2340:	df 4f       	sbci	r29, 0xFF	; 255
    2342:	f9 83       	std	Y+1, r31	; 0x01
    2344:	e8 83       	st	Y, r30
    2346:	c8 5c       	subi	r28, 0xC8	; 200
    2348:	d0 40       	sbci	r29, 0x00	; 0
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
    234a:	6c 91       	ld	r22, X
    234c:	65 ff       	sbrs	r22, 5
    234e:	fd cf       	rjmp	.-6      	; 0x234a <main+0x14e4>
    2350:	c8 53       	subi	r28, 0x38	; 56
    2352:	df 4f       	sbci	r29, 0xFF	; 255
    2354:	f9 83       	std	Y+1, r31	; 0x01
    2356:	e8 83       	st	Y, r30
    2358:	c8 5c       	subi	r28, 0xC8	; 200
    235a:	d0 40       	sbci	r29, 0x00	; 0
		UDR0 = data;
    235c:	fc 01       	movw	r30, r24
    235e:	70 83       	st	Z, r23
		}
	return 0;
	}
	void sendPackage(int size)
{
	for (int i = 0; i < size; i++)
    2360:	c8 53       	subi	r28, 0x38	; 56
    2362:	df 4f       	sbci	r29, 0xFF	; 255
    2364:	68 81       	ld	r22, Y
    2366:	79 81       	ldd	r23, Y+1	; 0x01
    2368:	c8 5c       	subi	r28, 0xC8	; 200
    236a:	d0 40       	sbci	r29, 0x00	; 0
    236c:	e6 16       	cp	r14, r22
    236e:	f7 06       	cpc	r15, r23
    2370:	f9 f6       	brne	.-66     	; 0x2330 <main+0x14ca>
    2372:	fe 01       	movw	r30, r28
    2374:	bf 96       	adiw	r30, 0x2f	; 47
    2376:	c8 53       	subi	r28, 0x38	; 56
    2378:	df 4f       	sbci	r29, 0xFF	; 255
    237a:	f9 83       	std	Y+1, r31	; 0x01
    237c:	e8 83       	st	Y, r30
    237e:	c8 5c       	subi	r28, 0xC8	; 200
    2380:	d0 40       	sbci	r29, 0x00	; 0
		//UCSR0C = ((1<<UCSZ00)|(1<<UCSZ01));
		UCSR0C = (3<<UCSZ00);
	}
	char checkForData()
	{
		if (UCSR0A & (1<<RXC0))
    2382:	6c 91       	ld	r22, X
			ackDataIndex++;
			*/
			/********************************need to test************************/
			//check if there is data, if so, receive the data
			//-This avoid the program from endless loop in wait for data
			if (FingerPrintUart.checkForData())
    2384:	66 23       	and	r22, r22
    2386:	7c f0       	brlt	.+30     	; 0x23a6 <main+0x1540>
    2388:	c8 53       	subi	r28, 0x38	; 56
    238a:	df 4f       	sbci	r29, 0xFF	; 255
    238c:	e8 81       	ld	r30, Y
    238e:	f9 81       	ldd	r31, Y+1	; 0x01
    2390:	c8 5c       	subi	r28, 0xC8	; 200
    2392:	d0 40       	sbci	r29, 0x00	; 0
		//UCSR0C = ((1<<UCSZ00)|(1<<UCSZ01));
		UCSR0C = (3<<UCSZ00);
	}
	char checkForData()
	{
		if (UCSR0A & (1<<RXC0))
    2394:	6c 91       	ld	r22, X
			ackDataIndex++;
			*/
			/********************************need to test************************/
			//check if there is data, if so, receive the data
			//-This avoid the program from endless loop in wait for data
			if (FingerPrintUart.checkForData())
    2396:	66 23       	and	r22, r22
    2398:	ec f7       	brge	.-6      	; 0x2394 <main+0x152e>
    239a:	c8 53       	subi	r28, 0x38	; 56
    239c:	df 4f       	sbci	r29, 0xFF	; 255
    239e:	f9 83       	std	Y+1, r31	; 0x01
    23a0:	e8 83       	st	Y, r30
    23a2:	c8 5c       	subi	r28, 0xC8	; 200
    23a4:	d0 40       	sbci	r29, 0x00	; 0
		}
		return 0;
	}
	char getData()
	{
		return UDR0;
    23a6:	fc 01       	movw	r30, r24
    23a8:	60 81       	ld	r22, Z
			//check if there is data, if so, receive the data
			//-This avoid the program from endless loop in wait for data
			if (FingerPrintUart.checkForData())
			{
				ackData = FingerPrintUart.getData();
				_ackPacket[ackDataIndex] = ackData;
    23aa:	c8 53       	subi	r28, 0x38	; 56
    23ac:	df 4f       	sbci	r29, 0xFF	; 255
    23ae:	e8 81       	ld	r30, Y
    23b0:	f9 81       	ldd	r31, Y+1	; 0x01
    23b2:	c8 5c       	subi	r28, 0xC8	; 200
    23b4:	d0 40       	sbci	r29, 0x00	; 0
    23b6:	61 93       	st	Z+, r22
    23b8:	c8 53       	subi	r28, 0x38	; 56
    23ba:	df 4f       	sbci	r29, 0xFF	; 255
    23bc:	f9 83       	std	Y+1, r31	; 0x01
    23be:	e8 83       	st	Y, r30
    23c0:	c8 5c       	subi	r28, 0xC8	; 200
    23c2:	d0 40       	sbci	r29, 0x00	; 0
	}
	void getAckPackage(char ackPackSize = 12)
	{
		int ackDataIndex = 0;
		char ackData = 0;
		while(ackDataIndex < ackPackSize)
    23c4:	e2 17       	cp	r30, r18
    23c6:	f3 07       	cpc	r31, r19
    23c8:	e1 f6       	brne	.-72     	; 0x2382 <main+0x151c>
    23ca:	fe 01       	movw	r30, r28
    23cc:	bf 96       	adiw	r30, 0x2f	; 47
    23ce:	c8 53       	subi	r28, 0x38	; 56
    23d0:	df 4f       	sbci	r29, 0xFF	; 255
    23d2:	f9 83       	std	Y+1, r31	; 0x01
    23d4:	e8 83       	st	Y, r30
    23d6:	c8 5c       	subi	r28, 0xC8	; 200
    23d8:	d0 40       	sbci	r29, 0x00	; 0
				ackDataIndex++;
			}
		}
		for (int i = 0; i<ackPackSize;i++)
		{
			FingerPrintUart.UARTsend(_ackPacket[i]);
    23da:	c8 53       	subi	r28, 0x38	; 56
    23dc:	df 4f       	sbci	r29, 0xFF	; 255
    23de:	e8 81       	ld	r30, Y
    23e0:	f9 81       	ldd	r31, Y+1	; 0x01
    23e2:	c8 5c       	subi	r28, 0xC8	; 200
    23e4:	d0 40       	sbci	r29, 0x00	; 0
    23e6:	71 91       	ld	r23, Z+
    23e8:	c8 53       	subi	r28, 0x38	; 56
    23ea:	df 4f       	sbci	r29, 0xFF	; 255
    23ec:	f9 83       	std	Y+1, r31	; 0x01
    23ee:	e8 83       	st	Y, r30
    23f0:	c8 5c       	subi	r28, 0xC8	; 200
    23f2:	d0 40       	sbci	r29, 0x00	; 0
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
    23f4:	6c 91       	ld	r22, X
    23f6:	65 ff       	sbrs	r22, 5
    23f8:	fd cf       	rjmp	.-6      	; 0x23f4 <main+0x158e>
    23fa:	c8 53       	subi	r28, 0x38	; 56
    23fc:	df 4f       	sbci	r29, 0xFF	; 255
    23fe:	f9 83       	std	Y+1, r31	; 0x01
    2400:	e8 83       	st	Y, r30
    2402:	c8 5c       	subi	r28, 0xC8	; 200
    2404:	d0 40       	sbci	r29, 0x00	; 0
		UDR0 = data;
    2406:	fc 01       	movw	r30, r24
    2408:	70 83       	st	Z, r23
				ackData = FingerPrintUart.getData();
				_ackPacket[ackDataIndex] = ackData;
				ackDataIndex++;
			}
		}
		for (int i = 0; i<ackPackSize;i++)
    240a:	c8 53       	subi	r28, 0x38	; 56
    240c:	df 4f       	sbci	r29, 0xFF	; 255
    240e:	68 81       	ld	r22, Y
    2410:	79 81       	ldd	r23, Y+1	; 0x01
    2412:	c8 5c       	subi	r28, 0xC8	; 200
    2414:	d0 40       	sbci	r29, 0x00	; 0
    2416:	62 17       	cp	r22, r18
    2418:	73 07       	cpc	r23, r19
    241a:	f9 f6       	brne	.-66     	; 0x23da <main+0x1574>
	bool reSendPack(int confIndex, int cmd ,int reTryTimes = 1)
	{
		for (int i = 0; i < reTryTimes; i++)
		{
			sendAndGetAck(cmd);
			if (_ackPacket[confIndex] == 0)
    241c:	f8 01       	movw	r30, r16
    241e:	60 81       	ld	r22, Z
    2420:	66 23       	and	r22, r22
    2422:	09 f4       	brne	.+2      	; 0x2426 <main+0x15c0>
    2424:	a0 c1       	rjmp	.+832    	; 0x2766 <main+0x1900>
    2426:	41 50       	subi	r20, 0x01	; 1
    2428:	51 09       	sbc	r21, r1
		}
		return confIndex;
	}
	bool reSendPack(int confIndex, int cmd ,int reTryTimes = 1)
	{
		for (int i = 0; i < reTryTimes; i++)
    242a:	09 f0       	breq	.+2      	; 0x242e <main+0x15c8>
    242c:	79 cf       	rjmp	.-270    	; 0x2320 <main+0x14ba>
    242e:	8d c9       	rjmp	.-3302   	; 0x174a <main+0x8e4>
	}
	void getAckPackage(char ackPackSize = 12)
	{
		int ackDataIndex = 0;
		char ackData = 0;
		while(ackDataIndex < ackPackSize)
    2430:	fe 01       	movw	r30, r28
    2432:	32 96       	adiw	r30, 0x02	; 2
    2434:	c8 53       	subi	r28, 0x38	; 56
    2436:	df 4f       	sbci	r29, 0xFF	; 255
    2438:	f9 83       	std	Y+1, r31	; 0x01
    243a:	e8 83       	st	Y, r30
    243c:	c8 5c       	subi	r28, 0xC8	; 200
    243e:	d0 40       	sbci	r29, 0x00	; 0
	}
	void sendPackage(int size)
{
	for (int i = 0; i < size; i++)
	{
		FingerPrintUart.UARTsend(_dataPackage[i]);
    2440:	c8 53       	subi	r28, 0x38	; 56
    2442:	df 4f       	sbci	r29, 0xFF	; 255
    2444:	e8 81       	ld	r30, Y
    2446:	f9 81       	ldd	r31, Y+1	; 0x01
    2448:	c8 5c       	subi	r28, 0xC8	; 200
    244a:	d0 40       	sbci	r29, 0x00	; 0
    244c:	51 91       	ld	r21, Z+
    244e:	c8 53       	subi	r28, 0x38	; 56
    2450:	df 4f       	sbci	r29, 0xFF	; 255
    2452:	f9 83       	std	Y+1, r31	; 0x01
    2454:	e8 83       	st	Y, r30
    2456:	c8 5c       	subi	r28, 0xC8	; 200
    2458:	d0 40       	sbci	r29, 0x00	; 0
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
    245a:	4c 91       	ld	r20, X
    245c:	45 ff       	sbrs	r20, 5
    245e:	fd cf       	rjmp	.-6      	; 0x245a <main+0x15f4>
    2460:	c8 53       	subi	r28, 0x38	; 56
    2462:	df 4f       	sbci	r29, 0xFF	; 255
    2464:	f9 83       	std	Y+1, r31	; 0x01
    2466:	e8 83       	st	Y, r30
    2468:	c8 5c       	subi	r28, 0xC8	; 200
    246a:	d0 40       	sbci	r29, 0x00	; 0
		UDR0 = data;
    246c:	fc 01       	movw	r30, r24
    246e:	50 83       	st	Z, r21
		}
	return 0;
	}
	void sendPackage(int size)
{
	for (int i = 0; i < size; i++)
    2470:	c8 53       	subi	r28, 0x38	; 56
    2472:	df 4f       	sbci	r29, 0xFF	; 255
    2474:	48 81       	ld	r20, Y
    2476:	59 81       	ldd	r21, Y+1	; 0x01
    2478:	c8 5c       	subi	r28, 0xC8	; 200
    247a:	d0 40       	sbci	r29, 0x00	; 0
    247c:	e4 16       	cp	r14, r20
    247e:	f5 06       	cpc	r15, r21
    2480:	f9 f6       	brne	.-66     	; 0x2440 <main+0x15da>
    2482:	fe 01       	movw	r30, r28
    2484:	bf 96       	adiw	r30, 0x2f	; 47
    2486:	40 e0       	ldi	r20, 0x00	; 0
    2488:	50 e0       	ldi	r21, 0x00	; 0
    248a:	c8 53       	subi	r28, 0x38	; 56
    248c:	df 4f       	sbci	r29, 0xFF	; 255
    248e:	f9 83       	std	Y+1, r31	; 0x01
    2490:	e8 83       	st	Y, r30
    2492:	c8 5c       	subi	r28, 0xC8	; 200
    2494:	d0 40       	sbci	r29, 0x00	; 0
		//UCSR0C = ((1<<UCSZ00)|(1<<UCSZ01));
		UCSR0C = (3<<UCSZ00);
	}
	char checkForData()
	{
		if (UCSR0A & (1<<RXC0))
    2496:	7c 90       	ld	r7, X
			ackDataIndex++;
			*/
			/********************************need to test************************/
			//check if there is data, if so, receive the data
			//-This avoid the program from endless loop in wait for data
			if (FingerPrintUart.checkForData())
    2498:	77 20       	and	r7, r7
    249a:	9c f0       	brlt	.+38     	; 0x24c2 <main+0x165c>
    249c:	c8 53       	subi	r28, 0x38	; 56
    249e:	df 4f       	sbci	r29, 0xFF	; 255
    24a0:	e8 81       	ld	r30, Y
    24a2:	f9 81       	ldd	r31, Y+1	; 0x01
    24a4:	c8 5c       	subi	r28, 0xC8	; 200
    24a6:	d0 40       	sbci	r29, 0x00	; 0
		//UCSR0C = ((1<<UCSZ00)|(1<<UCSZ01));
		UCSR0C = (3<<UCSZ00);
	}
	char checkForData()
	{
		if (UCSR0A & (1<<RXC0))
    24a8:	7c 90       	ld	r7, X
			ackDataIndex++;
			*/
			/********************************need to test************************/
			//check if there is data, if so, receive the data
			//-This avoid the program from endless loop in wait for data
			if (FingerPrintUart.checkForData())
    24aa:	77 20       	and	r7, r7
    24ac:	24 f0       	brlt	.+8      	; 0x24b6 <main+0x1650>
	}
	void getAckPackage(char ackPackSize = 12)
	{
		int ackDataIndex = 0;
		char ackData = 0;
		while(ackDataIndex < ackPackSize)
    24ae:	40 31       	cpi	r20, 0x10	; 16
    24b0:	51 05       	cpc	r21, r1
    24b2:	d4 f3       	brlt	.-12     	; 0x24a8 <main+0x1642>
    24b4:	85 c3       	rjmp	.+1802   	; 0x2bc0 <main+0x1d5a>
    24b6:	c8 53       	subi	r28, 0x38	; 56
    24b8:	df 4f       	sbci	r29, 0xFF	; 255
    24ba:	f9 83       	std	Y+1, r31	; 0x01
    24bc:	e8 83       	st	Y, r30
    24be:	c8 5c       	subi	r28, 0xC8	; 200
    24c0:	d0 40       	sbci	r29, 0x00	; 0
		}
		return 0;
	}
	char getData()
	{
		return UDR0;
    24c2:	fc 01       	movw	r30, r24
    24c4:	70 80       	ld	r7, Z
			//check if there is data, if so, receive the data
			//-This avoid the program from endless loop in wait for data
			if (FingerPrintUart.checkForData())
			{
				ackData = FingerPrintUart.getData();
				_ackPacket[ackDataIndex] = ackData;
    24c6:	c8 53       	subi	r28, 0x38	; 56
    24c8:	df 4f       	sbci	r29, 0xFF	; 255
    24ca:	e8 81       	ld	r30, Y
    24cc:	f9 81       	ldd	r31, Y+1	; 0x01
    24ce:	c8 5c       	subi	r28, 0xC8	; 200
    24d0:	d0 40       	sbci	r29, 0x00	; 0
    24d2:	71 92       	st	Z+, r7
    24d4:	c8 53       	subi	r28, 0x38	; 56
    24d6:	df 4f       	sbci	r29, 0xFF	; 255
    24d8:	f9 83       	std	Y+1, r31	; 0x01
    24da:	e8 83       	st	Y, r30
    24dc:	c8 5c       	subi	r28, 0xC8	; 200
    24de:	d0 40       	sbci	r29, 0x00	; 0
				ackDataIndex++;
    24e0:	4f 5f       	subi	r20, 0xFF	; 255
    24e2:	5f 4f       	sbci	r21, 0xFF	; 255
	}
	void getAckPackage(char ackPackSize = 12)
	{
		int ackDataIndex = 0;
		char ackData = 0;
		while(ackDataIndex < ackPackSize)
    24e4:	40 31       	cpi	r20, 0x10	; 16
    24e6:	51 05       	cpc	r21, r1
    24e8:	b1 f6       	brne	.-84     	; 0x2496 <main+0x1630>
    24ea:	6a c3       	rjmp	.+1748   	; 0x2bc0 <main+0x1d5a>
				ackDataIndex++;
			}
		}
		for (int i = 0; i<ackPackSize;i++)
		{
			FingerPrintUart.UARTsend(_ackPacket[i]);
    24ec:	c8 53       	subi	r28, 0x38	; 56
    24ee:	df 4f       	sbci	r29, 0xFF	; 255
    24f0:	e8 81       	ld	r30, Y
    24f2:	f9 81       	ldd	r31, Y+1	; 0x01
    24f4:	c8 5c       	subi	r28, 0xC8	; 200
    24f6:	d0 40       	sbci	r29, 0x00	; 0
    24f8:	51 91       	ld	r21, Z+
    24fa:	c8 53       	subi	r28, 0x38	; 56
    24fc:	df 4f       	sbci	r29, 0xFF	; 255
    24fe:	f9 83       	std	Y+1, r31	; 0x01
    2500:	e8 83       	st	Y, r30
    2502:	c8 5c       	subi	r28, 0xC8	; 200
    2504:	d0 40       	sbci	r29, 0x00	; 0
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
    2506:	4c 91       	ld	r20, X
    2508:	45 ff       	sbrs	r20, 5
    250a:	fd cf       	rjmp	.-6      	; 0x2506 <main+0x16a0>
    250c:	c8 53       	subi	r28, 0x38	; 56
    250e:	df 4f       	sbci	r29, 0xFF	; 255
    2510:	f9 83       	std	Y+1, r31	; 0x01
    2512:	e8 83       	st	Y, r30
    2514:	c8 5c       	subi	r28, 0xC8	; 200
    2516:	d0 40       	sbci	r29, 0x00	; 0
		UDR0 = data;
    2518:	fc 01       	movw	r30, r24
    251a:	50 83       	st	Z, r21
				ackData = FingerPrintUart.getData();
				_ackPacket[ackDataIndex] = ackData;
				ackDataIndex++;
			}
		}
		for (int i = 0; i<ackPackSize;i++)
    251c:	c8 53       	subi	r28, 0x38	; 56
    251e:	df 4f       	sbci	r29, 0xFF	; 255
    2520:	48 81       	ld	r20, Y
    2522:	59 81       	ldd	r21, Y+1	; 0x01
    2524:	c8 5c       	subi	r28, 0xC8	; 200
    2526:	d0 40       	sbci	r29, 0x00	; 0
    2528:	42 17       	cp	r20, r18
    252a:	53 07       	cpc	r21, r19
    252c:	f9 f6       	brne	.-66     	; 0x24ec <main+0x1686>
	bool reSendPack(int confIndex, int cmd ,int reTryTimes = 1)
	{
		for (int i = 0; i < reTryTimes; i++)
		{
			sendAndGetAck(cmd);
			if (_ackPacket[confIndex] == 0)
    252e:	f8 01       	movw	r30, r16
    2530:	40 81       	ld	r20, Z
    2532:	44 23       	and	r20, r20
    2534:	09 f4       	brne	.+2      	; 0x2538 <main+0x16d2>
    2536:	17 c1       	rjmp	.+558    	; 0x2766 <main+0x1900>
    2538:	61 50       	subi	r22, 0x01	; 1
    253a:	71 09       	sbc	r23, r1
		}
		return confIndex;
	}
	bool reSendPack(int confIndex, int cmd ,int reTryTimes = 1)
	{
		for (int i = 0; i < reTryTimes; i++)
    253c:	09 f0       	breq	.+2      	; 0x2540 <main+0x16da>
    253e:	78 cf       	rjmp	.-272    	; 0x2430 <main+0x15ca>
    2540:	04 c9       	rjmp	.-3576   	; 0x174a <main+0x8e4>
		}
	return 0;
	}
	void sendPackage(int size)
{
	for (int i = 0; i < size; i++)
    2542:	fe 01       	movw	r30, r28
    2544:	32 96       	adiw	r30, 0x02	; 2
    2546:	c8 53       	subi	r28, 0x38	; 56
    2548:	df 4f       	sbci	r29, 0xFF	; 255
    254a:	f9 83       	std	Y+1, r31	; 0x01
    254c:	e8 83       	st	Y, r30
    254e:	c8 5c       	subi	r28, 0xC8	; 200
    2550:	d0 40       	sbci	r29, 0x00	; 0
	{
		FingerPrintUart.UARTsend(_dataPackage[i]);
    2552:	c8 53       	subi	r28, 0x38	; 56
    2554:	df 4f       	sbci	r29, 0xFF	; 255
    2556:	e8 81       	ld	r30, Y
    2558:	f9 81       	ldd	r31, Y+1	; 0x01
    255a:	c8 5c       	subi	r28, 0xC8	; 200
    255c:	d0 40       	sbci	r29, 0x00	; 0
    255e:	51 91       	ld	r21, Z+
    2560:	c8 53       	subi	r28, 0x38	; 56
    2562:	df 4f       	sbci	r29, 0xFF	; 255
    2564:	f9 83       	std	Y+1, r31	; 0x01
    2566:	e8 83       	st	Y, r30
    2568:	c8 5c       	subi	r28, 0xC8	; 200
    256a:	d0 40       	sbci	r29, 0x00	; 0
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
    256c:	4c 91       	ld	r20, X
    256e:	45 ff       	sbrs	r20, 5
    2570:	fd cf       	rjmp	.-6      	; 0x256c <main+0x1706>
    2572:	c8 53       	subi	r28, 0x38	; 56
    2574:	df 4f       	sbci	r29, 0xFF	; 255
    2576:	f9 83       	std	Y+1, r31	; 0x01
    2578:	e8 83       	st	Y, r30
    257a:	c8 5c       	subi	r28, 0xC8	; 200
    257c:	d0 40       	sbci	r29, 0x00	; 0
		UDR0 = data;
    257e:	fc 01       	movw	r30, r24
    2580:	50 83       	st	Z, r21
		}
	return 0;
	}
	void sendPackage(int size)
{
	for (int i = 0; i < size; i++)
    2582:	c8 53       	subi	r28, 0x38	; 56
    2584:	df 4f       	sbci	r29, 0xFF	; 255
    2586:	48 81       	ld	r20, Y
    2588:	59 81       	ldd	r21, Y+1	; 0x01
    258a:	c8 5c       	subi	r28, 0xC8	; 200
    258c:	d0 40       	sbci	r29, 0x00	; 0
    258e:	e4 16       	cp	r14, r20
    2590:	f5 06       	cpc	r15, r21
    2592:	f9 f6       	brne	.-66     	; 0x2552 <main+0x16ec>
    2594:	fe 01       	movw	r30, r28
    2596:	bf 96       	adiw	r30, 0x2f	; 47
    2598:	40 e0       	ldi	r20, 0x00	; 0
    259a:	50 e0       	ldi	r21, 0x00	; 0
    259c:	c8 53       	subi	r28, 0x38	; 56
    259e:	df 4f       	sbci	r29, 0xFF	; 255
    25a0:	f9 83       	std	Y+1, r31	; 0x01
    25a2:	e8 83       	st	Y, r30
    25a4:	c8 5c       	subi	r28, 0xC8	; 200
    25a6:	d0 40       	sbci	r29, 0x00	; 0
		//UCSR0C = ((1<<UCSZ00)|(1<<UCSZ01));
		UCSR0C = (3<<UCSZ00);
	}
	char checkForData()
	{
		if (UCSR0A & (1<<RXC0))
    25a8:	7c 90       	ld	r7, X
			ackDataIndex++;
			*/
			/********************************need to test************************/
			//check if there is data, if so, receive the data
			//-This avoid the program from endless loop in wait for data
			if (FingerPrintUart.checkForData())
    25aa:	77 20       	and	r7, r7
    25ac:	9c f0       	brlt	.+38     	; 0x25d4 <main+0x176e>
    25ae:	c8 53       	subi	r28, 0x38	; 56
    25b0:	df 4f       	sbci	r29, 0xFF	; 255
    25b2:	e8 81       	ld	r30, Y
    25b4:	f9 81       	ldd	r31, Y+1	; 0x01
    25b6:	c8 5c       	subi	r28, 0xC8	; 200
    25b8:	d0 40       	sbci	r29, 0x00	; 0
		//UCSR0C = ((1<<UCSZ00)|(1<<UCSZ01));
		UCSR0C = (3<<UCSZ00);
	}
	char checkForData()
	{
		if (UCSR0A & (1<<RXC0))
    25ba:	7c 90       	ld	r7, X
			ackDataIndex++;
			*/
			/********************************need to test************************/
			//check if there is data, if so, receive the data
			//-This avoid the program from endless loop in wait for data
			if (FingerPrintUart.checkForData())
    25bc:	77 20       	and	r7, r7
    25be:	24 f0       	brlt	.+8      	; 0x25c8 <main+0x1762>
	}
	void getAckPackage(char ackPackSize = 12)
	{
		int ackDataIndex = 0;
		char ackData = 0;
		while(ackDataIndex < ackPackSize)
    25c0:	40 31       	cpi	r20, 0x10	; 16
    25c2:	51 05       	cpc	r21, r1
    25c4:	d4 f3       	brlt	.-12     	; 0x25ba <main+0x1754>
    25c6:	05 c3       	rjmp	.+1546   	; 0x2bd2 <main+0x1d6c>
    25c8:	c8 53       	subi	r28, 0x38	; 56
    25ca:	df 4f       	sbci	r29, 0xFF	; 255
    25cc:	f9 83       	std	Y+1, r31	; 0x01
    25ce:	e8 83       	st	Y, r30
    25d0:	c8 5c       	subi	r28, 0xC8	; 200
    25d2:	d0 40       	sbci	r29, 0x00	; 0
		}
		return 0;
	}
	char getData()
	{
		return UDR0;
    25d4:	fc 01       	movw	r30, r24
    25d6:	70 80       	ld	r7, Z
			//check if there is data, if so, receive the data
			//-This avoid the program from endless loop in wait for data
			if (FingerPrintUart.checkForData())
			{
				ackData = FingerPrintUart.getData();
				_ackPacket[ackDataIndex] = ackData;
    25d8:	c8 53       	subi	r28, 0x38	; 56
    25da:	df 4f       	sbci	r29, 0xFF	; 255
    25dc:	e8 81       	ld	r30, Y
    25de:	f9 81       	ldd	r31, Y+1	; 0x01
    25e0:	c8 5c       	subi	r28, 0xC8	; 200
    25e2:	d0 40       	sbci	r29, 0x00	; 0
    25e4:	71 92       	st	Z+, r7
    25e6:	c8 53       	subi	r28, 0x38	; 56
    25e8:	df 4f       	sbci	r29, 0xFF	; 255
    25ea:	f9 83       	std	Y+1, r31	; 0x01
    25ec:	e8 83       	st	Y, r30
    25ee:	c8 5c       	subi	r28, 0xC8	; 200
    25f0:	d0 40       	sbci	r29, 0x00	; 0
				ackDataIndex++;
    25f2:	4f 5f       	subi	r20, 0xFF	; 255
    25f4:	5f 4f       	sbci	r21, 0xFF	; 255
	}
	void getAckPackage(char ackPackSize = 12)
	{
		int ackDataIndex = 0;
		char ackData = 0;
		while(ackDataIndex < ackPackSize)
    25f6:	40 31       	cpi	r20, 0x10	; 16
    25f8:	51 05       	cpc	r21, r1
    25fa:	b1 f6       	brne	.-84     	; 0x25a8 <main+0x1742>
    25fc:	ea c2       	rjmp	.+1492   	; 0x2bd2 <main+0x1d6c>
				ackDataIndex++;
			}
		}
		for (int i = 0; i<ackPackSize;i++)
		{
			FingerPrintUart.UARTsend(_ackPacket[i]);
    25fe:	c8 53       	subi	r28, 0x38	; 56
    2600:	df 4f       	sbci	r29, 0xFF	; 255
    2602:	e8 81       	ld	r30, Y
    2604:	f9 81       	ldd	r31, Y+1	; 0x01
    2606:	c8 5c       	subi	r28, 0xC8	; 200
    2608:	d0 40       	sbci	r29, 0x00	; 0
    260a:	51 91       	ld	r21, Z+
    260c:	c8 53       	subi	r28, 0x38	; 56
    260e:	df 4f       	sbci	r29, 0xFF	; 255
    2610:	f9 83       	std	Y+1, r31	; 0x01
    2612:	e8 83       	st	Y, r30
    2614:	c8 5c       	subi	r28, 0xC8	; 200
    2616:	d0 40       	sbci	r29, 0x00	; 0
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
    2618:	4c 91       	ld	r20, X
    261a:	45 ff       	sbrs	r20, 5
    261c:	fd cf       	rjmp	.-6      	; 0x2618 <main+0x17b2>
    261e:	c8 53       	subi	r28, 0x38	; 56
    2620:	df 4f       	sbci	r29, 0xFF	; 255
    2622:	f9 83       	std	Y+1, r31	; 0x01
    2624:	e8 83       	st	Y, r30
    2626:	c8 5c       	subi	r28, 0xC8	; 200
    2628:	d0 40       	sbci	r29, 0x00	; 0
		UDR0 = data;
    262a:	fc 01       	movw	r30, r24
    262c:	50 83       	st	Z, r21
				ackData = FingerPrintUart.getData();
				_ackPacket[ackDataIndex] = ackData;
				ackDataIndex++;
			}
		}
		for (int i = 0; i<ackPackSize;i++)
    262e:	c8 53       	subi	r28, 0x38	; 56
    2630:	df 4f       	sbci	r29, 0xFF	; 255
    2632:	48 81       	ld	r20, Y
    2634:	59 81       	ldd	r21, Y+1	; 0x01
    2636:	c8 5c       	subi	r28, 0xC8	; 200
    2638:	d0 40       	sbci	r29, 0x00	; 0
    263a:	42 17       	cp	r20, r18
    263c:	53 07       	cpc	r21, r19
    263e:	f9 f6       	brne	.-66     	; 0x25fe <main+0x1798>
	bool reSendPack(int confIndex, int cmd ,int reTryTimes = 1)
	{
		for (int i = 0; i < reTryTimes; i++)
		{
			sendAndGetAck(cmd);
			if (_ackPacket[confIndex] == 0)
    2640:	f8 01       	movw	r30, r16
    2642:	40 81       	ld	r20, Z
    2644:	44 23       	and	r20, r20
    2646:	09 f4       	brne	.+2      	; 0x264a <main+0x17e4>
    2648:	8e c0       	rjmp	.+284    	; 0x2766 <main+0x1900>
    264a:	61 50       	subi	r22, 0x01	; 1
    264c:	71 09       	sbc	r23, r1
		}
		return confIndex;
	}
	bool reSendPack(int confIndex, int cmd ,int reTryTimes = 1)
	{
		for (int i = 0; i < reTryTimes; i++)
    264e:	09 f0       	breq	.+2      	; 0x2652 <main+0x17ec>
    2650:	78 cf       	rjmp	.-272    	; 0x2542 <main+0x16dc>
    2652:	7b c8       	rjmp	.-3850   	; 0x174a <main+0x8e4>
		}
	return 0;
	}
	void sendPackage(int size)
{
	for (int i = 0; i < size; i++)
    2654:	fe 01       	movw	r30, r28
    2656:	32 96       	adiw	r30, 0x02	; 2
    2658:	c8 53       	subi	r28, 0x38	; 56
    265a:	df 4f       	sbci	r29, 0xFF	; 255
    265c:	f9 83       	std	Y+1, r31	; 0x01
    265e:	e8 83       	st	Y, r30
    2660:	c8 5c       	subi	r28, 0xC8	; 200
    2662:	d0 40       	sbci	r29, 0x00	; 0
	{
		FingerPrintUart.UARTsend(_dataPackage[i]);
    2664:	c8 53       	subi	r28, 0x38	; 56
    2666:	df 4f       	sbci	r29, 0xFF	; 255
    2668:	e8 81       	ld	r30, Y
    266a:	f9 81       	ldd	r31, Y+1	; 0x01
    266c:	c8 5c       	subi	r28, 0xC8	; 200
    266e:	d0 40       	sbci	r29, 0x00	; 0
    2670:	51 91       	ld	r21, Z+
    2672:	c8 53       	subi	r28, 0x38	; 56
    2674:	df 4f       	sbci	r29, 0xFF	; 255
    2676:	f9 83       	std	Y+1, r31	; 0x01
    2678:	e8 83       	st	Y, r30
    267a:	c8 5c       	subi	r28, 0xC8	; 200
    267c:	d0 40       	sbci	r29, 0x00	; 0
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
    267e:	4c 91       	ld	r20, X
    2680:	45 ff       	sbrs	r20, 5
    2682:	fd cf       	rjmp	.-6      	; 0x267e <main+0x1818>
    2684:	c8 53       	subi	r28, 0x38	; 56
    2686:	df 4f       	sbci	r29, 0xFF	; 255
    2688:	f9 83       	std	Y+1, r31	; 0x01
    268a:	e8 83       	st	Y, r30
    268c:	c8 5c       	subi	r28, 0xC8	; 200
    268e:	d0 40       	sbci	r29, 0x00	; 0
		UDR0 = data;
    2690:	fc 01       	movw	r30, r24
    2692:	50 83       	st	Z, r21
		}
	return 0;
	}
	void sendPackage(int size)
{
	for (int i = 0; i < size; i++)
    2694:	c8 53       	subi	r28, 0x38	; 56
    2696:	df 4f       	sbci	r29, 0xFF	; 255
    2698:	48 81       	ld	r20, Y
    269a:	59 81       	ldd	r21, Y+1	; 0x01
    269c:	c8 5c       	subi	r28, 0xC8	; 200
    269e:	d0 40       	sbci	r29, 0x00	; 0
    26a0:	4e 15       	cp	r20, r14
    26a2:	5f 05       	cpc	r21, r15
    26a4:	f9 f6       	brne	.-66     	; 0x2664 <main+0x17fe>
    26a6:	fe 01       	movw	r30, r28
    26a8:	bf 96       	adiw	r30, 0x2f	; 47
    26aa:	40 e0       	ldi	r20, 0x00	; 0
    26ac:	50 e0       	ldi	r21, 0x00	; 0
    26ae:	c8 53       	subi	r28, 0x38	; 56
    26b0:	df 4f       	sbci	r29, 0xFF	; 255
    26b2:	f9 83       	std	Y+1, r31	; 0x01
    26b4:	e8 83       	st	Y, r30
    26b6:	c8 5c       	subi	r28, 0xC8	; 200
    26b8:	d0 40       	sbci	r29, 0x00	; 0
		//UCSR0C = ((1<<UCSZ00)|(1<<UCSZ01));
		UCSR0C = (3<<UCSZ00);
	}
	char checkForData()
	{
		if (UCSR0A & (1<<RXC0))
    26ba:	7c 90       	ld	r7, X
			ackDataIndex++;
			*/
			/********************************need to test************************/
			//check if there is data, if so, receive the data
			//-This avoid the program from endless loop in wait for data
			if (FingerPrintUart.checkForData())
    26bc:	77 20       	and	r7, r7
    26be:	9c f0       	brlt	.+38     	; 0x26e6 <main+0x1880>
    26c0:	c8 53       	subi	r28, 0x38	; 56
    26c2:	df 4f       	sbci	r29, 0xFF	; 255
    26c4:	e8 81       	ld	r30, Y
    26c6:	f9 81       	ldd	r31, Y+1	; 0x01
    26c8:	c8 5c       	subi	r28, 0xC8	; 200
    26ca:	d0 40       	sbci	r29, 0x00	; 0
		//UCSR0C = ((1<<UCSZ00)|(1<<UCSZ01));
		UCSR0C = (3<<UCSZ00);
	}
	char checkForData()
	{
		if (UCSR0A & (1<<RXC0))
    26cc:	7c 90       	ld	r7, X
			ackDataIndex++;
			*/
			/********************************need to test************************/
			//check if there is data, if so, receive the data
			//-This avoid the program from endless loop in wait for data
			if (FingerPrintUart.checkForData())
    26ce:	77 20       	and	r7, r7
    26d0:	24 f0       	brlt	.+8      	; 0x26da <main+0x1874>
	}
	void getAckPackage(char ackPackSize = 12)
	{
		int ackDataIndex = 0;
		char ackData = 0;
		while(ackDataIndex < ackPackSize)
    26d2:	40 31       	cpi	r20, 0x10	; 16
    26d4:	51 05       	cpc	r21, r1
    26d6:	d4 f3       	brlt	.-12     	; 0x26cc <main+0x1866>
    26d8:	85 c2       	rjmp	.+1290   	; 0x2be4 <main+0x1d7e>
    26da:	c8 53       	subi	r28, 0x38	; 56
    26dc:	df 4f       	sbci	r29, 0xFF	; 255
    26de:	f9 83       	std	Y+1, r31	; 0x01
    26e0:	e8 83       	st	Y, r30
    26e2:	c8 5c       	subi	r28, 0xC8	; 200
    26e4:	d0 40       	sbci	r29, 0x00	; 0
		}
		return 0;
	}
	char getData()
	{
		return UDR0;
    26e6:	fc 01       	movw	r30, r24
    26e8:	70 80       	ld	r7, Z
			//check if there is data, if so, receive the data
			//-This avoid the program from endless loop in wait for data
			if (FingerPrintUart.checkForData())
			{
				ackData = FingerPrintUart.getData();
				_ackPacket[ackDataIndex] = ackData;
    26ea:	c8 53       	subi	r28, 0x38	; 56
    26ec:	df 4f       	sbci	r29, 0xFF	; 255
    26ee:	e8 81       	ld	r30, Y
    26f0:	f9 81       	ldd	r31, Y+1	; 0x01
    26f2:	c8 5c       	subi	r28, 0xC8	; 200
    26f4:	d0 40       	sbci	r29, 0x00	; 0
    26f6:	71 92       	st	Z+, r7
    26f8:	c8 53       	subi	r28, 0x38	; 56
    26fa:	df 4f       	sbci	r29, 0xFF	; 255
    26fc:	f9 83       	std	Y+1, r31	; 0x01
    26fe:	e8 83       	st	Y, r30
    2700:	c8 5c       	subi	r28, 0xC8	; 200
    2702:	d0 40       	sbci	r29, 0x00	; 0
				ackDataIndex++;
    2704:	4f 5f       	subi	r20, 0xFF	; 255
    2706:	5f 4f       	sbci	r21, 0xFF	; 255
	}
	void getAckPackage(char ackPackSize = 12)
	{
		int ackDataIndex = 0;
		char ackData = 0;
		while(ackDataIndex < ackPackSize)
    2708:	40 31       	cpi	r20, 0x10	; 16
    270a:	51 05       	cpc	r21, r1
    270c:	b1 f6       	brne	.-84     	; 0x26ba <main+0x1854>
    270e:	6a c2       	rjmp	.+1236   	; 0x2be4 <main+0x1d7e>
				ackDataIndex++;
			}
		}
		for (int i = 0; i<ackPackSize;i++)
		{
			FingerPrintUart.UARTsend(_ackPacket[i]);
    2710:	c8 53       	subi	r28, 0x38	; 56
    2712:	df 4f       	sbci	r29, 0xFF	; 255
    2714:	e8 81       	ld	r30, Y
    2716:	f9 81       	ldd	r31, Y+1	; 0x01
    2718:	c8 5c       	subi	r28, 0xC8	; 200
    271a:	d0 40       	sbci	r29, 0x00	; 0
    271c:	51 91       	ld	r21, Z+
    271e:	c8 53       	subi	r28, 0x38	; 56
    2720:	df 4f       	sbci	r29, 0xFF	; 255
    2722:	f9 83       	std	Y+1, r31	; 0x01
    2724:	e8 83       	st	Y, r30
    2726:	c8 5c       	subi	r28, 0xC8	; 200
    2728:	d0 40       	sbci	r29, 0x00	; 0
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
    272a:	4c 91       	ld	r20, X
    272c:	45 ff       	sbrs	r20, 5
    272e:	fd cf       	rjmp	.-6      	; 0x272a <main+0x18c4>
    2730:	c8 53       	subi	r28, 0x38	; 56
    2732:	df 4f       	sbci	r29, 0xFF	; 255
    2734:	f9 83       	std	Y+1, r31	; 0x01
    2736:	e8 83       	st	Y, r30
    2738:	c8 5c       	subi	r28, 0xC8	; 200
    273a:	d0 40       	sbci	r29, 0x00	; 0
		UDR0 = data;
    273c:	fc 01       	movw	r30, r24
    273e:	50 83       	st	Z, r21
				ackData = FingerPrintUart.getData();
				_ackPacket[ackDataIndex] = ackData;
				ackDataIndex++;
			}
		}
		for (int i = 0; i<ackPackSize;i++)
    2740:	c8 53       	subi	r28, 0x38	; 56
    2742:	df 4f       	sbci	r29, 0xFF	; 255
    2744:	48 81       	ld	r20, Y
    2746:	59 81       	ldd	r21, Y+1	; 0x01
    2748:	c8 5c       	subi	r28, 0xC8	; 200
    274a:	d0 40       	sbci	r29, 0x00	; 0
    274c:	42 17       	cp	r20, r18
    274e:	53 07       	cpc	r21, r19
    2750:	f9 f6       	brne	.-66     	; 0x2710 <main+0x18aa>
	bool reSendPack(int confIndex, int cmd ,int reTryTimes = 1)
	{
		for (int i = 0; i < reTryTimes; i++)
		{
			sendAndGetAck(cmd);
			if (_ackPacket[confIndex] == 0)
    2752:	f8 01       	movw	r30, r16
    2754:	40 81       	ld	r20, Z
    2756:	44 23       	and	r20, r20
    2758:	31 f0       	breq	.+12     	; 0x2766 <main+0x1900>
    275a:	61 50       	subi	r22, 0x01	; 1
    275c:	71 09       	sbc	r23, r1
		}
		return confIndex;
	}
	bool reSendPack(int confIndex, int cmd ,int reTryTimes = 1)
	{
		for (int i = 0; i < reTryTimes; i++)
    275e:	09 f0       	breq	.+2      	; 0x2762 <main+0x18fc>
    2760:	79 cf       	rjmp	.-270    	; 0x2654 <main+0x17ee>
    2762:	0c 94 a5 0b 	jmp	0x174a	; 0x174a <main+0x8e4>
			_dataPackage[14] = 0xFF;						//page ID lsByte
			setCheckSum(command+0x08+Serach+0x01+0xFF,15);	//index 10, 11
			sendAndGetAck(Serach);
			if (checkAckPackError(Serach))
			{
				return _ackPacket[11];
    2766:	1a ad       	ldd	r17, Y+58	; 0x3a
    while (1) 
    {
		_delay_ms(100);
		//Test.setNewFinger();
		id = Test.searchFinger();
		if (id)
    2768:	11 23       	and	r17, r17
    276a:	11 f4       	brne	.+4      	; 0x2770 <main+0x190a>
    276c:	0c 94 a5 0b 	jmp	0x174a	; 0x174a <main+0x8e4>
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
    2770:	4c 91       	ld	r20, X
    2772:	45 ff       	sbrs	r20, 5
    2774:	fd cf       	rjmp	.-6      	; 0x2770 <main+0x190a>
		UDR0 = data;
    2776:	50 e2       	ldi	r21, 0x20	; 32
    2778:	fc 01       	movw	r30, r24
    277a:	50 83       	st	Z, r21
    277c:	e1 e0       	ldi	r30, 0x01	; 1
    277e:	f1 e0       	ldi	r31, 0x01	; 1
    2780:	64 e5       	ldi	r22, 0x54	; 84
    2782:	3f 01       	movw	r6, r30
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
    2784:	4c 91       	ld	r20, X
    2786:	45 ff       	sbrs	r20, 5
    2788:	fd cf       	rjmp	.-6      	; 0x2784 <main+0x191e>
		UDR0 = data;
    278a:	fc 01       	movw	r30, r24
    278c:	60 83       	st	Z, r22
	{
		if (space)
		{
			UARTsend((const char)*" ");
		}
		while(*StringPtr != 0)
    278e:	f3 01       	movw	r30, r6
    2790:	61 91       	ld	r22, Z+
    2792:	3f 01       	movw	r6, r30
    2794:	61 11       	cpse	r22, r1
    2796:	f6 cf       	rjmp	.-20     	; 0x2784 <main+0x191e>
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
    2798:	4c 91       	ld	r20, X
    279a:	45 ff       	sbrs	r20, 5
    279c:	fd cf       	rjmp	.-6      	; 0x2798 <main+0x1932>
		UDR0 = data;
    279e:	50 e2       	ldi	r21, 0x20	; 32
    27a0:	fc 01       	movw	r30, r24
    27a2:	50 83       	st	Z, r21
		data=UARTreceive();
		UARTsend(data);
	}
	void verafyNum(unsigned char value)
	{
		switch (value)
    27a4:	51 2f       	mov	r21, r17
    27a6:	52 95       	swap	r21
    27a8:	5f 70       	andi	r21, 0x0F	; 15
    27aa:	45 2f       	mov	r20, r21
    27ac:	50 e0       	ldi	r21, 0x00	; 0
    27ae:	fa 01       	movw	r30, r20
    27b0:	eb 50       	subi	r30, 0x0B	; 11
    27b2:	fe 4f       	sbci	r31, 0xFE	; 254
    27b4:	0c 94 fb 15 	jmp	0x2bf6	; 0x2bf6 <__tablejump2__>
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
    27b8:	5c 91       	ld	r21, X
    27ba:	55 ff       	sbrs	r21, 5
    27bc:	fd cf       	rjmp	.-6      	; 0x27b8 <main+0x1952>
		UDR0 = data;
    27be:	50 e3       	ldi	r21, 0x30	; 48
    27c0:	fc 01       	movw	r30, r24
    27c2:	50 83       	st	Z, r21
    27c4:	68 c0       	rjmp	.+208    	; 0x2896 <main+0x1a30>
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
    27c6:	5c 91       	ld	r21, X
    27c8:	55 ff       	sbrs	r21, 5
    27ca:	fd cf       	rjmp	.-6      	; 0x27c6 <main+0x1960>
		UDR0 = data;
    27cc:	51 e3       	ldi	r21, 0x31	; 49
    27ce:	fc 01       	movw	r30, r24
    27d0:	50 83       	st	Z, r21
    27d2:	61 c0       	rjmp	.+194    	; 0x2896 <main+0x1a30>
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
    27d4:	5c 91       	ld	r21, X
    27d6:	55 ff       	sbrs	r21, 5
    27d8:	fd cf       	rjmp	.-6      	; 0x27d4 <main+0x196e>
		UDR0 = data;
    27da:	52 e3       	ldi	r21, 0x32	; 50
    27dc:	fc 01       	movw	r30, r24
    27de:	50 83       	st	Z, r21
    27e0:	5a c0       	rjmp	.+180    	; 0x2896 <main+0x1a30>
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
    27e2:	5c 91       	ld	r21, X
    27e4:	55 ff       	sbrs	r21, 5
    27e6:	fd cf       	rjmp	.-6      	; 0x27e2 <main+0x197c>
		UDR0 = data;
    27e8:	53 e3       	ldi	r21, 0x33	; 51
    27ea:	fc 01       	movw	r30, r24
    27ec:	50 83       	st	Z, r21
    27ee:	53 c0       	rjmp	.+166    	; 0x2896 <main+0x1a30>
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
    27f0:	5c 91       	ld	r21, X
    27f2:	55 ff       	sbrs	r21, 5
    27f4:	fd cf       	rjmp	.-6      	; 0x27f0 <main+0x198a>
		UDR0 = data;
    27f6:	54 e3       	ldi	r21, 0x34	; 52
    27f8:	fc 01       	movw	r30, r24
    27fa:	50 83       	st	Z, r21
    27fc:	4c c0       	rjmp	.+152    	; 0x2896 <main+0x1a30>
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
    27fe:	5c 91       	ld	r21, X
    2800:	55 ff       	sbrs	r21, 5
    2802:	fd cf       	rjmp	.-6      	; 0x27fe <main+0x1998>
		UDR0 = data;
    2804:	55 e3       	ldi	r21, 0x35	; 53
    2806:	fc 01       	movw	r30, r24
    2808:	50 83       	st	Z, r21
    280a:	45 c0       	rjmp	.+138    	; 0x2896 <main+0x1a30>
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
    280c:	5c 91       	ld	r21, X
    280e:	55 ff       	sbrs	r21, 5
    2810:	fd cf       	rjmp	.-6      	; 0x280c <main+0x19a6>
		UDR0 = data;
    2812:	56 e3       	ldi	r21, 0x36	; 54
    2814:	fc 01       	movw	r30, r24
    2816:	50 83       	st	Z, r21
    2818:	3e c0       	rjmp	.+124    	; 0x2896 <main+0x1a30>
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
    281a:	5c 91       	ld	r21, X
    281c:	55 ff       	sbrs	r21, 5
    281e:	fd cf       	rjmp	.-6      	; 0x281a <main+0x19b4>
		UDR0 = data;
    2820:	57 e3       	ldi	r21, 0x37	; 55
    2822:	fc 01       	movw	r30, r24
    2824:	50 83       	st	Z, r21
    2826:	37 c0       	rjmp	.+110    	; 0x2896 <main+0x1a30>
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
    2828:	5c 91       	ld	r21, X
    282a:	55 ff       	sbrs	r21, 5
    282c:	fd cf       	rjmp	.-6      	; 0x2828 <main+0x19c2>
		UDR0 = data;
    282e:	58 e3       	ldi	r21, 0x38	; 56
    2830:	fc 01       	movw	r30, r24
    2832:	50 83       	st	Z, r21
    2834:	30 c0       	rjmp	.+96     	; 0x2896 <main+0x1a30>
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
    2836:	5c 91       	ld	r21, X
    2838:	55 ff       	sbrs	r21, 5
    283a:	fd cf       	rjmp	.-6      	; 0x2836 <main+0x19d0>
		UDR0 = data;
    283c:	59 e3       	ldi	r21, 0x39	; 57
    283e:	fc 01       	movw	r30, r24
    2840:	50 83       	st	Z, r21
    2842:	29 c0       	rjmp	.+82     	; 0x2896 <main+0x1a30>
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
    2844:	5c 91       	ld	r21, X
    2846:	55 ff       	sbrs	r21, 5
    2848:	fd cf       	rjmp	.-6      	; 0x2844 <main+0x19de>
		UDR0 = data;
    284a:	51 e4       	ldi	r21, 0x41	; 65
    284c:	fc 01       	movw	r30, r24
    284e:	50 83       	st	Z, r21
    2850:	22 c0       	rjmp	.+68     	; 0x2896 <main+0x1a30>
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
    2852:	5c 91       	ld	r21, X
    2854:	55 ff       	sbrs	r21, 5
    2856:	fd cf       	rjmp	.-6      	; 0x2852 <main+0x19ec>
		UDR0 = data;
    2858:	52 e4       	ldi	r21, 0x42	; 66
    285a:	fc 01       	movw	r30, r24
    285c:	50 83       	st	Z, r21
    285e:	1b c0       	rjmp	.+54     	; 0x2896 <main+0x1a30>
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
    2860:	5c 91       	ld	r21, X
    2862:	55 ff       	sbrs	r21, 5
    2864:	fd cf       	rjmp	.-6      	; 0x2860 <main+0x19fa>
		UDR0 = data;
    2866:	53 e4       	ldi	r21, 0x43	; 67
    2868:	fc 01       	movw	r30, r24
    286a:	50 83       	st	Z, r21
    286c:	14 c0       	rjmp	.+40     	; 0x2896 <main+0x1a30>
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
    286e:	5c 91       	ld	r21, X
    2870:	55 ff       	sbrs	r21, 5
    2872:	fd cf       	rjmp	.-6      	; 0x286e <main+0x1a08>
		UDR0 = data;
    2874:	54 e4       	ldi	r21, 0x44	; 68
    2876:	fc 01       	movw	r30, r24
    2878:	50 83       	st	Z, r21
    287a:	0d c0       	rjmp	.+26     	; 0x2896 <main+0x1a30>
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
    287c:	5c 91       	ld	r21, X
    287e:	55 ff       	sbrs	r21, 5
    2880:	fd cf       	rjmp	.-6      	; 0x287c <main+0x1a16>
		UDR0 = data;
    2882:	55 e4       	ldi	r21, 0x45	; 69
    2884:	fc 01       	movw	r30, r24
    2886:	50 83       	st	Z, r21
    2888:	06 c0       	rjmp	.+12     	; 0x2896 <main+0x1a30>
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
    288a:	5c 91       	ld	r21, X
    288c:	55 ff       	sbrs	r21, 5
    288e:	fd cf       	rjmp	.-6      	; 0x288a <main+0x1a24>
		UDR0 = data;
    2890:	56 e4       	ldi	r21, 0x46	; 70
    2892:	fc 01       	movw	r30, r24
    2894:	50 83       	st	Z, r21
		data=UARTreceive();
		UARTsend(data);
	}
	void verafyNum(unsigned char value)
	{
		switch (value)
    2896:	41 2f       	mov	r20, r17
    2898:	4f 70       	andi	r20, 0x0F	; 15
    289a:	50 e0       	ldi	r21, 0x00	; 0
    289c:	fa 01       	movw	r30, r20
    289e:	eb 5f       	subi	r30, 0xFB	; 251
    28a0:	fd 4f       	sbci	r31, 0xFD	; 253
    28a2:	0c 94 fb 15 	jmp	0x2bf6	; 0x2bf6 <__tablejump2__>
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
    28a6:	4c 91       	ld	r20, X
    28a8:	45 ff       	sbrs	r20, 5
    28aa:	fd cf       	rjmp	.-6      	; 0x28a6 <main+0x1a40>
		UDR0 = data;
    28ac:	40 e3       	ldi	r20, 0x30	; 48
    28ae:	fc 01       	movw	r30, r24
    28b0:	40 83       	st	Z, r20
    28b2:	68 c0       	rjmp	.+208    	; 0x2984 <main+0x1b1e>
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
    28b4:	4c 91       	ld	r20, X
    28b6:	45 ff       	sbrs	r20, 5
    28b8:	fd cf       	rjmp	.-6      	; 0x28b4 <main+0x1a4e>
		UDR0 = data;
    28ba:	41 e3       	ldi	r20, 0x31	; 49
    28bc:	fc 01       	movw	r30, r24
    28be:	40 83       	st	Z, r20
    28c0:	61 c0       	rjmp	.+194    	; 0x2984 <main+0x1b1e>
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
    28c2:	4c 91       	ld	r20, X
    28c4:	45 ff       	sbrs	r20, 5
    28c6:	fd cf       	rjmp	.-6      	; 0x28c2 <main+0x1a5c>
		UDR0 = data;
    28c8:	42 e3       	ldi	r20, 0x32	; 50
    28ca:	fc 01       	movw	r30, r24
    28cc:	40 83       	st	Z, r20
    28ce:	5a c0       	rjmp	.+180    	; 0x2984 <main+0x1b1e>
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
    28d0:	4c 91       	ld	r20, X
    28d2:	45 ff       	sbrs	r20, 5
    28d4:	fd cf       	rjmp	.-6      	; 0x28d0 <main+0x1a6a>
		UDR0 = data;
    28d6:	43 e3       	ldi	r20, 0x33	; 51
    28d8:	fc 01       	movw	r30, r24
    28da:	40 83       	st	Z, r20
    28dc:	53 c0       	rjmp	.+166    	; 0x2984 <main+0x1b1e>
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
    28de:	4c 91       	ld	r20, X
    28e0:	45 ff       	sbrs	r20, 5
    28e2:	fd cf       	rjmp	.-6      	; 0x28de <main+0x1a78>
		UDR0 = data;
    28e4:	44 e3       	ldi	r20, 0x34	; 52
    28e6:	fc 01       	movw	r30, r24
    28e8:	40 83       	st	Z, r20
    28ea:	4c c0       	rjmp	.+152    	; 0x2984 <main+0x1b1e>
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
    28ec:	4c 91       	ld	r20, X
    28ee:	45 ff       	sbrs	r20, 5
    28f0:	fd cf       	rjmp	.-6      	; 0x28ec <main+0x1a86>
		UDR0 = data;
    28f2:	45 e3       	ldi	r20, 0x35	; 53
    28f4:	fc 01       	movw	r30, r24
    28f6:	40 83       	st	Z, r20
    28f8:	45 c0       	rjmp	.+138    	; 0x2984 <main+0x1b1e>
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
    28fa:	4c 91       	ld	r20, X
    28fc:	45 ff       	sbrs	r20, 5
    28fe:	fd cf       	rjmp	.-6      	; 0x28fa <main+0x1a94>
		UDR0 = data;
    2900:	46 e3       	ldi	r20, 0x36	; 54
    2902:	fc 01       	movw	r30, r24
    2904:	40 83       	st	Z, r20
    2906:	3e c0       	rjmp	.+124    	; 0x2984 <main+0x1b1e>
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
    2908:	4c 91       	ld	r20, X
    290a:	45 ff       	sbrs	r20, 5
    290c:	fd cf       	rjmp	.-6      	; 0x2908 <main+0x1aa2>
		UDR0 = data;
    290e:	47 e3       	ldi	r20, 0x37	; 55
    2910:	fc 01       	movw	r30, r24
    2912:	40 83       	st	Z, r20
    2914:	37 c0       	rjmp	.+110    	; 0x2984 <main+0x1b1e>
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
    2916:	4c 91       	ld	r20, X
    2918:	45 ff       	sbrs	r20, 5
    291a:	fd cf       	rjmp	.-6      	; 0x2916 <main+0x1ab0>
		UDR0 = data;
    291c:	48 e3       	ldi	r20, 0x38	; 56
    291e:	fc 01       	movw	r30, r24
    2920:	40 83       	st	Z, r20
    2922:	30 c0       	rjmp	.+96     	; 0x2984 <main+0x1b1e>
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
    2924:	4c 91       	ld	r20, X
    2926:	45 ff       	sbrs	r20, 5
    2928:	fd cf       	rjmp	.-6      	; 0x2924 <main+0x1abe>
		UDR0 = data;
    292a:	49 e3       	ldi	r20, 0x39	; 57
    292c:	fc 01       	movw	r30, r24
    292e:	40 83       	st	Z, r20
    2930:	29 c0       	rjmp	.+82     	; 0x2984 <main+0x1b1e>
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
    2932:	4c 91       	ld	r20, X
    2934:	45 ff       	sbrs	r20, 5
    2936:	fd cf       	rjmp	.-6      	; 0x2932 <main+0x1acc>
		UDR0 = data;
    2938:	41 e4       	ldi	r20, 0x41	; 65
    293a:	fc 01       	movw	r30, r24
    293c:	40 83       	st	Z, r20
    293e:	22 c0       	rjmp	.+68     	; 0x2984 <main+0x1b1e>
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
    2940:	4c 91       	ld	r20, X
    2942:	45 ff       	sbrs	r20, 5
    2944:	fd cf       	rjmp	.-6      	; 0x2940 <main+0x1ada>
		UDR0 = data;
    2946:	42 e4       	ldi	r20, 0x42	; 66
    2948:	fc 01       	movw	r30, r24
    294a:	40 83       	st	Z, r20
    294c:	1b c0       	rjmp	.+54     	; 0x2984 <main+0x1b1e>
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
    294e:	4c 91       	ld	r20, X
    2950:	45 ff       	sbrs	r20, 5
    2952:	fd cf       	rjmp	.-6      	; 0x294e <main+0x1ae8>
		UDR0 = data;
    2954:	43 e4       	ldi	r20, 0x43	; 67
    2956:	fc 01       	movw	r30, r24
    2958:	40 83       	st	Z, r20
    295a:	14 c0       	rjmp	.+40     	; 0x2984 <main+0x1b1e>
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
    295c:	4c 91       	ld	r20, X
    295e:	45 ff       	sbrs	r20, 5
    2960:	fd cf       	rjmp	.-6      	; 0x295c <main+0x1af6>
		UDR0 = data;
    2962:	44 e4       	ldi	r20, 0x44	; 68
    2964:	fc 01       	movw	r30, r24
    2966:	40 83       	st	Z, r20
    2968:	0d c0       	rjmp	.+26     	; 0x2984 <main+0x1b1e>
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
    296a:	4c 91       	ld	r20, X
    296c:	45 ff       	sbrs	r20, 5
    296e:	fd cf       	rjmp	.-6      	; 0x296a <main+0x1b04>
		UDR0 = data;
    2970:	45 e4       	ldi	r20, 0x45	; 69
    2972:	fc 01       	movw	r30, r24
    2974:	40 83       	st	Z, r20
    2976:	06 c0       	rjmp	.+12     	; 0x2984 <main+0x1b1e>
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
    2978:	4c 91       	ld	r20, X
    297a:	45 ff       	sbrs	r20, 5
    297c:	fd cf       	rjmp	.-6      	; 0x2978 <main+0x1b12>
		UDR0 = data;
    297e:	46 e4       	ldi	r20, 0x46	; 70
    2980:	fc 01       	movw	r30, r24
    2982:	40 83       	st	Z, r20
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
    2984:	4c 91       	ld	r20, X
    2986:	45 ff       	sbrs	r20, 5
    2988:	fd cf       	rjmp	.-6      	; 0x2984 <main+0x1b1e>
		UDR0 = data;
    298a:	4c e2       	ldi	r20, 0x2C	; 44
    298c:	fc 01       	movw	r30, r24
    298e:	40 83       	st	Z, r20
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
    2990:	4c 91       	ld	r20, X
    2992:	45 ff       	sbrs	r20, 5
    2994:	fd cf       	rjmp	.-6      	; 0x2990 <main+0x1b2a>
		UDR0 = data;
    2996:	40 e2       	ldi	r20, 0x20	; 32
    2998:	fc 01       	movw	r30, r24
    299a:	40 83       	st	Z, r20
    299c:	0c 94 9d 0b 	jmp	0x173a	; 0x173a <main+0x8d4>
    29a0:	2e 01       	movw	r4, r28
    29a2:	fb e3       	ldi	r31, 0x3B	; 59
    29a4:	4f 0e       	add	r4, r31
    29a6:	51 1c       	adc	r5, r1
		}
	return 0;
	}
	void sendPackage(int size)
{
	for (int i = 0; i < size; i++)
    29a8:	fe 01       	movw	r30, r28
    29aa:	bf 96       	adiw	r30, 0x2f	; 47
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
    29ac:	80 ec       	ldi	r24, 0xC0	; 192
    29ae:	90 e0       	ldi	r25, 0x00	; 0
		UDR0 = data;
    29b0:	46 ec       	ldi	r20, 0xC6	; 198
    29b2:	50 e0       	ldi	r21, 0x00	; 0
    29b4:	0c 94 b7 07 	jmp	0xf6e	; 0xf6e <main+0x108>
		}
	return 0;
	}
	void sendPackage(int size)
{
	for (int i = 0; i < size; i++)
    29b8:	fe 01       	movw	r30, r28
    29ba:	bf 96       	adiw	r30, 0x2f	; 47
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
    29bc:	80 ec       	ldi	r24, 0xC0	; 192
    29be:	90 e0       	ldi	r25, 0x00	; 0
		UDR0 = data;
    29c0:	46 ec       	ldi	r20, 0xC6	; 198
    29c2:	50 e0       	ldi	r21, 0x00	; 0
    29c4:	0c 94 06 08 	jmp	0x100c	; 0x100c <main+0x1a6>
		}
	return 0;
	}
	void sendPackage(int size)
{
	for (int i = 0; i < size; i++)
    29c8:	fe 01       	movw	r30, r28
    29ca:	bf 96       	adiw	r30, 0x2f	; 47
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
    29cc:	80 ec       	ldi	r24, 0xC0	; 192
    29ce:	90 e0       	ldi	r25, 0x00	; 0
		UDR0 = data;
    29d0:	46 ec       	ldi	r20, 0xC6	; 198
    29d2:	50 e0       	ldi	r21, 0x00	; 0
    29d4:	0c 94 50 08 	jmp	0x10a0	; 0x10a0 <main+0x23a>
		}
	return 0;
	}
	void sendPackage(int size)
{
	for (int i = 0; i < size; i++)
    29d8:	fe 01       	movw	r30, r28
    29da:	bf 96       	adiw	r30, 0x2f	; 47
		}
		return *Str;
	}
	void UARTsend( unsigned char data)
	{
		while(!(UCSR0A & (1<<UDRE0)));
    29dc:	80 ec       	ldi	r24, 0xC0	; 192
    29de:	90 e0       	ldi	r25, 0x00	; 0
		UDR0 = data;
    29e0:	46 ec       	ldi	r20, 0xC6	; 198
    29e2:	50 e0       	ldi	r21, 0x00	; 0
    29e4:	0c 94 9b 08 	jmp	0x1136	; 0x1136 <main+0x2d0>
		}
	return 0;
	}
	void sendPackage(int size)
{
	for (int i = 0; i < size; i++)
    29e8:	fe 01       	movw	r30, r28
    29ea:	bf 96       	adiw	r30, 0x2f	; 47
    29ec:	0c 94 ed 08 	jmp	0x11da	; 0x11da <main+0x374>
		{
			confIndex = packSize - 2;
		}
		for (int i = 0; i < packSize;i++)
		{
			while(_ackPacket[i] != 0xEF && i < packSize)
    29f0:	8f a5       	ldd	r24, Y+47	; 0x2f
    29f2:	8f 3e       	cpi	r24, 0xEF	; 239
    29f4:	11 f4       	brne	.+4      	; 0x29fa <main+0x1b94>
    29f6:	0c 94 04 09 	jmp	0x1208	; 0x1208 <main+0x3a2>
    29fa:	fe 01       	movw	r30, r28
    29fc:	f0 96       	adiw	r30, 0x30	; 48
    29fe:	80 e0       	ldi	r24, 0x00	; 0
    2a00:	90 e0       	ldi	r25, 0x00	; 0
    2a02:	0c 94 fe 08 	jmp	0x11fc	; 0x11fc <main+0x396>
		}
		return 0;
	}
	bool checkAckPackError(char cmd)
	{
		int confCodeIndex = (int)getAckPackConfirmCodeIndex(cmd);
    2a06:	86 5f       	subi	r24, 0xF6	; 246
    2a08:	90 e0       	ldi	r25, 0x00	; 0
		char confCode = _ackPacket[confCodeIndex - 1];
    2a0a:	ee e2       	ldi	r30, 0x2E	; 46
    2a0c:	f0 e0       	ldi	r31, 0x00	; 0
    2a0e:	ec 0f       	add	r30, r28
    2a10:	fd 1f       	adc	r31, r29
    2a12:	e8 0f       	add	r30, r24
    2a14:	f9 1f       	adc	r31, r25
		switch(confCode)
    2a16:	40 81       	ld	r20, Z
    2a18:	50 e0       	ldi	r21, 0x00	; 0
    2a1a:	4a 31       	cpi	r20, 0x1A	; 26
    2a1c:	51 05       	cpc	r21, r1
    2a1e:	10 f0       	brcs	.+4      	; 0x2a24 <main+0x1bbe>
    2a20:	0c 94 bd 08 	jmp	0x117a	; 0x117a <main+0x314>
    2a24:	fa 01       	movw	r30, r20
    2a26:	eb 5e       	subi	r30, 0xEB	; 235
    2a28:	fd 4f       	sbci	r31, 0xFD	; 253
    2a2a:	0c 94 fb 15 	jmp	0x2bf6	; 0x2bf6 <__tablejump2__>
		}
	return 0;
	}
	void sendPackage(int size)
{
	for (int i = 0; i < size; i++)
    2a2e:	fe 01       	movw	r30, r28
    2a30:	bf 96       	adiw	r30, 0x2f	; 47
    2a32:	0c 94 df 09 	jmp	0x13be	; 0x13be <main+0x558>
    2a36:	fe 01       	movw	r30, r28
    2a38:	bf 96       	adiw	r30, 0x2f	; 47
    2a3a:	0c 94 2b 0a 	jmp	0x1456	; 0x1456 <main+0x5f0>
    2a3e:	fe 01       	movw	r30, r28
    2a40:	bf 96       	adiw	r30, 0x2f	; 47
    2a42:	0c 94 68 0a 	jmp	0x14d0	; 0x14d0 <main+0x66a>
    2a46:	fe 01       	movw	r30, r28
    2a48:	bf 96       	adiw	r30, 0x2f	; 47
    2a4a:	0c 94 a9 0a 	jmp	0x1552	; 0x1552 <main+0x6ec>
    2a4e:	fe 01       	movw	r30, r28
    2a50:	bf 96       	adiw	r30, 0x2f	; 47
    2a52:	0c 94 e9 0a 	jmp	0x15d2	; 0x15d2 <main+0x76c>
    2a56:	fe 01       	movw	r30, r28
    2a58:	bf 96       	adiw	r30, 0x2f	; 47
    2a5a:	0c 94 2d 0b 	jmp	0x165a	; 0x165a <main+0x7f4>
					_dataPackage[10] = 0x01;							//buffer ID
					_dataPackage[11] = 0x00;							//page ID msByte
					_dataPackage[12] = fingerID;						//page ID lsByte
					setCheckSum(command+0x06+Store+fingerID+0x01,13);	//index 13, 14
					sendAndGetAck(Store);
					if (checkAckPackError(Store))
    2a5e:	66 e0       	ldi	r22, 0x06	; 6
    2a60:	ce 01       	movw	r24, r28
    2a62:	01 96       	adiw	r24, 0x01	; 1
    2a64:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <_ZN11FingerPrint17checkAckPackErrorEc>
    2a68:	ca 53       	subi	r28, 0x3A	; 58
    2a6a:	df 4f       	sbci	r29, 0xFF	; 255
    2a6c:	88 83       	st	Y, r24
    2a6e:	c6 5c       	subi	r28, 0xC6	; 198
    2a70:	d0 40       	sbci	r29, 0x00	; 0
    2a72:	81 11       	cpse	r24, r1
    2a74:	0c 94 39 0b 	jmp	0x1672	; 0x1672 <main+0x80c>
    2a78:	0c 94 bd 08 	jmp	0x117a	; 0x117a <main+0x314>
		}
	return 0;
	}
	void sendPackage(int size)
{
	for (int i = 0; i < size; i++)
    2a7c:	ce 01       	movw	r24, r28
    2a7e:	8f 96       	adiw	r24, 0x2f	; 47
    2a80:	0c 94 7c 0b 	jmp	0x16f8	; 0x16f8 <main+0x892>
    2a84:	fe 01       	movw	r30, r28
    2a86:	bf 96       	adiw	r30, 0x2f	; 47
    2a88:	bf 01       	movw	r22, r30
    2a8a:	0c 94 e2 0b 	jmp	0x17c4	; 0x17c4 <main+0x95e>
		{
			confIndex = packSize - 2;
		}
		for (int i = 0; i < packSize;i++)
		{
			while(_ackPacket[i] != 0xEF && i < packSize)
    2a8e:	4f a5       	ldd	r20, Y+47	; 0x2f
    2a90:	4f 3e       	cpi	r20, 0xEF	; 239
    2a92:	11 f4       	brne	.+4      	; 0x2a98 <main+0x1c32>
    2a94:	0c 94 fb 0b 	jmp	0x17f6	; 0x17f6 <main+0x990>
    2a98:	fe 01       	movw	r30, r28
    2a9a:	f0 96       	adiw	r30, 0x30	; 48
    2a9c:	40 e0       	ldi	r20, 0x00	; 0
    2a9e:	50 e0       	ldi	r21, 0x00	; 0
    2aa0:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <main+0x982>
		}
		return 0;
	}
	bool checkAckPackError(char cmd)
	{
		int confCodeIndex = (int)getAckPackConfirmCodeIndex(cmd);
    2aa4:	0a e0       	ldi	r16, 0x0A	; 10
    2aa6:	04 0f       	add	r16, r20
    2aa8:	10 e0       	ldi	r17, 0x00	; 0
		char confCode = _ackPacket[confCodeIndex - 1];
    2aaa:	ee e2       	ldi	r30, 0x2E	; 46
    2aac:	f0 e0       	ldi	r31, 0x00	; 0
    2aae:	ec 0f       	add	r30, r28
    2ab0:	fd 1f       	adc	r31, r29
    2ab2:	e0 0f       	add	r30, r16
    2ab4:	f1 1f       	adc	r31, r17
		switch(confCode)
    2ab6:	40 81       	ld	r20, Z
    2ab8:	50 e0       	ldi	r21, 0x00	; 0
    2aba:	4a 31       	cpi	r20, 0x1A	; 26
    2abc:	51 05       	cpc	r21, r1
    2abe:	10 f0       	brcs	.+4      	; 0x2ac4 <main+0x1c5e>
    2ac0:	0c 94 a5 0b 	jmp	0x174a	; 0x174a <main+0x8e4>
    2ac4:	fa 01       	movw	r30, r20
    2ac6:	e1 5d       	subi	r30, 0xD1	; 209
    2ac8:	fd 4f       	sbci	r31, 0xFD	; 253
    2aca:	0c 94 fb 15 	jmp	0x2bf6	; 0x2bf6 <__tablejump2__>
		}
	return 0;
	}
	void sendPackage(int size)
{
	for (int i = 0; i < size; i++)
    2ace:	fe 01       	movw	r30, r28
    2ad0:	bf 96       	adiw	r30, 0x2f	; 47
    2ad2:	c8 53       	subi	r28, 0x38	; 56
    2ad4:	df 4f       	sbci	r29, 0xFF	; 255
    2ad6:	f9 83       	std	Y+1, r31	; 0x01
    2ad8:	e8 83       	st	Y, r30
    2ada:	c8 5c       	subi	r28, 0xC8	; 200
    2adc:	d0 40       	sbci	r29, 0x00	; 0
    2ade:	0c 94 91 0c 	jmp	0x1922	; 0x1922 <main+0xabc>
    2ae2:	fe 01       	movw	r30, r28
    2ae4:	bf 96       	adiw	r30, 0x2f	; 47
    2ae6:	c8 53       	subi	r28, 0x38	; 56
    2ae8:	df 4f       	sbci	r29, 0xFF	; 255
    2aea:	f9 83       	std	Y+1, r31	; 0x01
    2aec:	e8 83       	st	Y, r30
    2aee:	c8 5c       	subi	r28, 0xC8	; 200
    2af0:	d0 40       	sbci	r29, 0x00	; 0
    2af2:	0c 94 1c 0d 	jmp	0x1a38	; 0x1a38 <main+0xbd2>
    2af6:	fe 01       	movw	r30, r28
    2af8:	bf 96       	adiw	r30, 0x2f	; 47
    2afa:	c8 53       	subi	r28, 0x38	; 56
    2afc:	df 4f       	sbci	r29, 0xFF	; 255
    2afe:	f9 83       	std	Y+1, r31	; 0x01
    2b00:	e8 83       	st	Y, r30
    2b02:	c8 5c       	subi	r28, 0xC8	; 200
    2b04:	d0 40       	sbci	r29, 0x00	; 0
    2b06:	22 c8       	rjmp	.-4028   	; 0x1b4c <main+0xce6>
    2b08:	fe 01       	movw	r30, r28
    2b0a:	bf 96       	adiw	r30, 0x2f	; 47
    2b0c:	c8 53       	subi	r28, 0x38	; 56
    2b0e:	df 4f       	sbci	r29, 0xFF	; 255
    2b10:	f9 83       	std	Y+1, r31	; 0x01
    2b12:	e8 83       	st	Y, r30
    2b14:	c8 5c       	subi	r28, 0xC8	; 200
    2b16:	d0 40       	sbci	r29, 0x00	; 0
    2b18:	a2 c8       	rjmp	.-3772   	; 0x1c5e <main+0xdf8>
    2b1a:	fe 01       	movw	r30, r28
    2b1c:	bf 96       	adiw	r30, 0x2f	; 47
    2b1e:	bf 01       	movw	r22, r30
    2b20:	fa c8       	rjmp	.-3596   	; 0x1d16 <main+0xeb0>
		{
			confIndex = packSize - 2;
		}
		for (int i = 0; i < packSize;i++)
		{
			while(_ackPacket[i] != 0xEF && i < packSize)
    2b22:	4f a5       	ldd	r20, Y+47	; 0x2f
    2b24:	4f 3e       	cpi	r20, 0xEF	; 239
    2b26:	09 f4       	brne	.+2      	; 0x2b2a <main+0x1cc4>
    2b28:	0b c9       	rjmp	.-3562   	; 0x1d40 <main+0xeda>
    2b2a:	fe 01       	movw	r30, r28
    2b2c:	f0 96       	adiw	r30, 0x30	; 48
    2b2e:	40 e0       	ldi	r20, 0x00	; 0
    2b30:	50 e0       	ldi	r21, 0x00	; 0
    2b32:	00 c9       	rjmp	.-3584   	; 0x1d34 <main+0xece>
		}
	return 0;
	}
	void sendPackage(int size)
{
	for (int i = 0; i < size; i++)
    2b34:	fe 01       	movw	r30, r28
    2b36:	bf 96       	adiw	r30, 0x2f	; 47
    2b38:	c8 53       	subi	r28, 0x38	; 56
    2b3a:	df 4f       	sbci	r29, 0xFF	; 255
    2b3c:	f9 83       	std	Y+1, r31	; 0x01
    2b3e:	e8 83       	st	Y, r30
    2b40:	c8 5c       	subi	r28, 0xC8	; 200
    2b42:	d0 40       	sbci	r29, 0x00	; 0
    2b44:	7a c9       	rjmp	.-3340   	; 0x1e3a <main+0xfd4>
    2b46:	fe 01       	movw	r30, r28
    2b48:	bf 96       	adiw	r30, 0x2f	; 47
    2b4a:	c8 53       	subi	r28, 0x38	; 56
    2b4c:	df 4f       	sbci	r29, 0xFF	; 255
    2b4e:	f9 83       	std	Y+1, r31	; 0x01
    2b50:	e8 83       	st	Y, r30
    2b52:	c8 5c       	subi	r28, 0xC8	; 200
    2b54:	d0 40       	sbci	r29, 0x00	; 0
    2b56:	02 ca       	rjmp	.-3068   	; 0x1f5c <main+0x10f6>
    2b58:	fe 01       	movw	r30, r28
    2b5a:	bf 96       	adiw	r30, 0x2f	; 47
    2b5c:	c8 53       	subi	r28, 0x38	; 56
    2b5e:	df 4f       	sbci	r29, 0xFF	; 255
    2b60:	f9 83       	std	Y+1, r31	; 0x01
    2b62:	e8 83       	st	Y, r30
    2b64:	c8 5c       	subi	r28, 0xC8	; 200
    2b66:	d0 40       	sbci	r29, 0x00	; 0
    2b68:	8a ca       	rjmp	.-2796   	; 0x207e <main+0x1218>
    2b6a:	fe 01       	movw	r30, r28
    2b6c:	bf 96       	adiw	r30, 0x2f	; 47
    2b6e:	c8 53       	subi	r28, 0x38	; 56
    2b70:	df 4f       	sbci	r29, 0xFF	; 255
    2b72:	f9 83       	std	Y+1, r31	; 0x01
    2b74:	e8 83       	st	Y, r30
    2b76:	c8 5c       	subi	r28, 0xC8	; 200
    2b78:	d0 40       	sbci	r29, 0x00	; 0
    2b7a:	12 cb       	rjmp	.-2524   	; 0x21a0 <main+0x133a>
    2b7c:	fe 01       	movw	r30, r28
    2b7e:	bf 96       	adiw	r30, 0x2f	; 47
    2b80:	bf 01       	movw	r22, r30
    2b82:	82 cb       	rjmp	.-2300   	; 0x2288 <main+0x1422>
		{
			confIndex = packSize - 2;
		}
		for (int i = 0; i < packSize;i++)
		{
			while(_ackPacket[i] != 0xEF && i < packSize)
    2b84:	4f a5       	ldd	r20, Y+47	; 0x2f
    2b86:	4f 3e       	cpi	r20, 0xEF	; 239
    2b88:	09 f4       	brne	.+2      	; 0x2b8c <main+0x1d26>
    2b8a:	94 cb       	rjmp	.-2264   	; 0x22b4 <main+0x144e>
    2b8c:	fe 01       	movw	r30, r28
    2b8e:	f0 96       	adiw	r30, 0x30	; 48
    2b90:	40 e0       	ldi	r20, 0x00	; 0
    2b92:	50 e0       	ldi	r21, 0x00	; 0
    2b94:	89 cb       	rjmp	.-2286   	; 0x22a8 <main+0x1442>
		}
		return 0;
	}
	bool checkAckPackError(char cmd)
	{
		int confCodeIndex = (int)getAckPackConfirmCodeIndex(cmd);
    2b96:	0a e0       	ldi	r16, 0x0A	; 10
    2b98:	04 0f       	add	r16, r20
    2b9a:	10 e0       	ldi	r17, 0x00	; 0
		char confCode = _ackPacket[confCodeIndex - 1];
    2b9c:	ee e2       	ldi	r30, 0x2E	; 46
    2b9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ba0:	ec 0f       	add	r30, r28
    2ba2:	fd 1f       	adc	r31, r29
    2ba4:	e0 0f       	add	r30, r16
    2ba6:	f1 1f       	adc	r31, r17
		switch(confCode)
    2ba8:	40 81       	ld	r20, Z
    2baa:	50 e0       	ldi	r21, 0x00	; 0
    2bac:	4a 31       	cpi	r20, 0x1A	; 26
    2bae:	51 05       	cpc	r21, r1
    2bb0:	10 f0       	brcs	.+4      	; 0x2bb6 <main+0x1d50>
    2bb2:	0c 94 a5 0b 	jmp	0x174a	; 0x174a <main+0x8e4>
    2bb6:	fa 01       	movw	r30, r20
    2bb8:	e7 5b       	subi	r30, 0xB7	; 183
    2bba:	fd 4f       	sbci	r31, 0xFD	; 253
    2bbc:	0c 94 fb 15 	jmp	0x2bf6	; 0x2bf6 <__tablejump2__>
		}
	return 0;
	}
	void sendPackage(int size)
{
	for (int i = 0; i < size; i++)
    2bc0:	fe 01       	movw	r30, r28
    2bc2:	bf 96       	adiw	r30, 0x2f	; 47
    2bc4:	c8 53       	subi	r28, 0x38	; 56
    2bc6:	df 4f       	sbci	r29, 0xFF	; 255
    2bc8:	f9 83       	std	Y+1, r31	; 0x01
    2bca:	e8 83       	st	Y, r30
    2bcc:	c8 5c       	subi	r28, 0xC8	; 200
    2bce:	d0 40       	sbci	r29, 0x00	; 0
    2bd0:	8d cc       	rjmp	.-1766   	; 0x24ec <main+0x1686>
    2bd2:	fe 01       	movw	r30, r28
    2bd4:	bf 96       	adiw	r30, 0x2f	; 47
    2bd6:	c8 53       	subi	r28, 0x38	; 56
    2bd8:	df 4f       	sbci	r29, 0xFF	; 255
    2bda:	f9 83       	std	Y+1, r31	; 0x01
    2bdc:	e8 83       	st	Y, r30
    2bde:	c8 5c       	subi	r28, 0xC8	; 200
    2be0:	d0 40       	sbci	r29, 0x00	; 0
    2be2:	0d cd       	rjmp	.-1510   	; 0x25fe <main+0x1798>
    2be4:	fe 01       	movw	r30, r28
    2be6:	bf 96       	adiw	r30, 0x2f	; 47
    2be8:	c8 53       	subi	r28, 0x38	; 56
    2bea:	df 4f       	sbci	r29, 0xFF	; 255
    2bec:	f9 83       	std	Y+1, r31	; 0x01
    2bee:	e8 83       	st	Y, r30
    2bf0:	c8 5c       	subi	r28, 0xC8	; 200
    2bf2:	d0 40       	sbci	r29, 0x00	; 0
    2bf4:	8d cd       	rjmp	.-1254   	; 0x2710 <main+0x18aa>

00002bf6 <__tablejump2__>:
    2bf6:	ee 0f       	add	r30, r30
    2bf8:	ff 1f       	adc	r31, r31
    2bfa:	05 90       	lpm	r0, Z+
    2bfc:	f4 91       	lpm	r31, Z
    2bfe:	e0 2d       	mov	r30, r0
    2c00:	09 94       	ijmp

00002c02 <_exit>:
    2c02:	f8 94       	cli

00002c04 <__stop_program>:
    2c04:	ff cf       	rjmp	.-2      	; 0x2c04 <__stop_program>
