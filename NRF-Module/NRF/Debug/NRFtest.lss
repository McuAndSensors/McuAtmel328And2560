
NRFtest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000856  000008ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000856  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000008d2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000904  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000001a8  00000000  00000000  00000944  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003564  00000000  00000000  00000aec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000f66  00000000  00000000  00004050  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000feb  00000000  00000000  00004fb6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000568  00000000  00000000  00005fa4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000c96  00000000  00000000  0000650c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002700  00000000  00000000  000071a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001c8  00000000  00000000  000098a2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 44 00 	jmp	0x88	; 0x88 <__ctors_end>
   4:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
   8:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
   c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  10:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  14:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  18:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  1c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  20:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  24:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  28:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  2c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  30:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  34:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  38:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  3c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  40:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  44:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  48:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  4c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  50:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  54:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  58:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  5c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  60:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  64:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  68:	a7 03       	fmuls	r18, r23
  6a:	ab 03       	fmulsu	r18, r19
  6c:	af 03       	fmulsu	r18, r23
  6e:	b3 03       	fmuls	r19, r19
  70:	b7 03       	fmuls	r19, r23
  72:	bb 03       	fmulsu	r19, r19
  74:	bf 03       	fmulsu	r19, r23
  76:	c3 03       	fmuls	r20, r19
  78:	c7 03       	fmuls	r20, r23
  7a:	cb 03       	fmulsu	r20, r19
  7c:	cf 03       	fmulsu	r20, r23
  7e:	d3 03       	fmuls	r21, r19
  80:	d7 03       	fmuls	r21, r23
  82:	db 03       	fmulsu	r21, r19
  84:	df 03       	fmulsu	r21, r23
  86:	e3 03       	fmuls	r22, r19

00000088 <__ctors_end>:
  88:	11 24       	eor	r1, r1
  8a:	1f be       	out	0x3f, r1	; 63
  8c:	cf ef       	ldi	r28, 0xFF	; 255
  8e:	d8 e0       	ldi	r29, 0x08	; 8
  90:	de bf       	out	0x3e, r29	; 62
  92:	cd bf       	out	0x3d, r28	; 61

00000094 <__do_copy_data>:
  94:	11 e0       	ldi	r17, 0x01	; 1
  96:	a0 e0       	ldi	r26, 0x00	; 0
  98:	b1 e0       	ldi	r27, 0x01	; 1
  9a:	e6 e5       	ldi	r30, 0x56	; 86
  9c:	f8 e0       	ldi	r31, 0x08	; 8
  9e:	02 c0       	rjmp	.+4      	; 0xa4 <__do_copy_data+0x10>
  a0:	05 90       	lpm	r0, Z+
  a2:	0d 92       	st	X+, r0
  a4:	a8 30       	cpi	r26, 0x08	; 8
  a6:	b1 07       	cpc	r27, r17
  a8:	d9 f7       	brne	.-10     	; 0xa0 <__do_copy_data+0xc>
  aa:	0e 94 5b 00 	call	0xb6	; 0xb6 <main>
  ae:	0c 94 29 04 	jmp	0x852	; 0x852 <_exit>

000000b2 <__bad_interrupt>:
  b2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b6 <main>:
#include "NRF24L01_Basic.h"
#include "NRF24L01_HandShake.h"
#include "UART.h"

int main()
{
  b6:	cf 93       	push	r28
  b8:	df 93       	push	r29
  ba:	cd b7       	in	r28, 0x3d	; 61
  bc:	de b7       	in	r29, 0x3e	; 62
  be:	c8 54       	subi	r28, 0x48	; 72
  c0:	d1 09       	sbc	r29, r1
  c2:	0f b6       	in	r0, 0x3f	; 63
  c4:	f8 94       	cli
  c6:	de bf       	out	0x3e, r29	; 62
  c8:	0f be       	out	0x3f, r0	; 63
  ca:	cd bf       	out	0x3d, r28	; 61
	Nrf24l01_HandShake toggle;
  cc:	ce 01       	movw	r24, r28
  ce:	01 96       	adiw	r24, 0x01	; 1
  d0:	0e 94 1e 03 	call	0x63c	; 0x63c <_ZN18Nrf24l01_HandShakeC1Ev>
	Uart NR;
  d4:	60 e8       	ldi	r22, 0x80	; 128
  d6:	75 e2       	ldi	r23, 0x25	; 37
  d8:	ce 01       	movw	r24, r28
  da:	41 96       	adiw	r24, 0x11	; 17
  dc:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <_ZN4UartC1E8BaudRate>
	toggle.Set_RX_Mode();		//code for RX controller
  e0:	ce 01       	movw	r24, r28
  e2:	01 96       	adiw	r24, 0x01	; 1
  e4:	0e 94 20 02 	call	0x440	; 0x440 <_ZN8Nrf24l0111Set_RX_ModeEv>
	//toggle.Set_TX_Mode();		// remove the "//" for the TX controler
	unsigned char sendPayload[Payload_Size] = {0xEB, 0x12, 0x01, 0x00, 0x00, 0x88};	//arr to be send
  e8:	86 e0       	ldi	r24, 0x06	; 6
  ea:	e0 e0       	ldi	r30, 0x00	; 0
  ec:	f1 e0       	ldi	r31, 0x01	; 1
  ee:	de 01       	movw	r26, r28
  f0:	ad 5b       	subi	r26, 0xBD	; 189
  f2:	bf 4f       	sbci	r27, 0xFF	; 255
  f4:	01 90       	ld	r0, Z+
  f6:	0d 92       	st	X+, r0
  f8:	8a 95       	dec	r24
  fa:	e1 f7       	brne	.-8      	; 0xf4 <main+0x3e>
	unsigned char receivedPayload[Payload_Size];		// arr for data receiving
	
	while(1)
	{
		/****************Code For RX Controller*******************/
		if(toggle.PayloadAvailable())
  fc:	ce 01       	movw	r24, r28
  fe:	01 96       	adiw	r24, 0x01	; 1
 100:	0e 94 b2 02 	call	0x564	; 0x564 <_ZN8Nrf24l0116PayloadAvailableEv>
 104:	88 23       	and	r24, r24
 106:	d1 f3       	breq	.-12     	; 0xfc <main+0x46>
		{
			unsigned char *Payload = toggle.Receive_Payload(sendPayload);
 108:	be 01       	movw	r22, r28
 10a:	6d 5b       	subi	r22, 0xBD	; 189
 10c:	7f 4f       	sbci	r23, 0xFF	; 255
 10e:	ce 01       	movw	r24, r28
 110:	01 96       	adiw	r24, 0x01	; 1
 112:	0e 94 2d 03 	call	0x65a	; 0x65a <_ZN18Nrf24l01_HandShake15Receive_PayloadEPh>
 116:	8c 01       	movw	r16, r24
			sendPayload[5]++;
 118:	29 96       	adiw	r28, 0x09	; 9
 11a:	8f ad       	ldd	r24, Y+63	; 0x3f
 11c:	29 97       	sbiw	r28, 0x09	; 9
 11e:	8f 5f       	subi	r24, 0xFF	; 255
 120:	29 96       	adiw	r28, 0x09	; 9
 122:	8f af       	std	Y+63, r24	; 0x3f
 124:	29 97       	sbiw	r28, 0x09	; 9
			// Print on UART BAUD_9600 what it received//
			NR.sendNum(*Payload++);
 126:	f8 01       	movw	r30, r16
 128:	60 81       	ld	r22, Z
 12a:	ce 01       	movw	r24, r28
 12c:	41 96       	adiw	r24, 0x11	; 17
 12e:	0e 94 e7 03 	call	0x7ce	; 0x7ce <_ZN4Uart7sendNumEh>
			NR.sendNum(*Payload++);
 132:	f8 01       	movw	r30, r16
 134:	61 81       	ldd	r22, Z+1	; 0x01
 136:	ce 01       	movw	r24, r28
 138:	41 96       	adiw	r24, 0x11	; 17
 13a:	0e 94 e7 03 	call	0x7ce	; 0x7ce <_ZN4Uart7sendNumEh>
			NR.sendNum(*Payload++);				//all the printing can be removed, it is just for verify that it is working
 13e:	f8 01       	movw	r30, r16
 140:	62 81       	ldd	r22, Z+2	; 0x02
 142:	ce 01       	movw	r24, r28
 144:	41 96       	adiw	r24, 0x11	; 17
 146:	0e 94 e7 03 	call	0x7ce	; 0x7ce <_ZN4Uart7sendNumEh>
			NR.sendNum(*Payload++);
 14a:	f8 01       	movw	r30, r16
 14c:	63 81       	ldd	r22, Z+3	; 0x03
 14e:	ce 01       	movw	r24, r28
 150:	41 96       	adiw	r24, 0x11	; 17
 152:	0e 94 e7 03 	call	0x7ce	; 0x7ce <_ZN4Uart7sendNumEh>
			NR.sendNum(*Payload++);
 156:	f8 01       	movw	r30, r16
 158:	64 81       	ldd	r22, Z+4	; 0x04
 15a:	ce 01       	movw	r24, r28
 15c:	41 96       	adiw	r24, 0x11	; 17
 15e:	0e 94 e7 03 	call	0x7ce	; 0x7ce <_ZN4Uart7sendNumEh>
			NR.sendNum(*Payload++);
 162:	f8 01       	movw	r30, r16
 164:	65 81       	ldd	r22, Z+5	; 0x05
 166:	ce 01       	movw	r24, r28
 168:	41 96       	adiw	r24, 0x11	; 17
 16a:	0e 94 e7 03 	call	0x7ce	; 0x7ce <_ZN4Uart7sendNumEh>
			NR.UARTstring("\n");
 16e:	41 e0       	ldi	r20, 0x01	; 1
 170:	66 e0       	ldi	r22, 0x06	; 6
 172:	71 e0       	ldi	r23, 0x01	; 1
 174:	ce 01       	movw	r24, r28
 176:	41 96       	adiw	r24, 0x11	; 17
 178:	0e 94 75 03 	call	0x6ea	; 0x6ea <_ZN4Uart10UARTstringEPKcc>
 17c:	bf cf       	rjmp	.-130    	; 0xfc <main+0x46>

0000017e <_ZN8Nrf24l019SPI_SETUPEv>:
	{
		Reset_IRQ();
		Reset_IRQ();
		return false;
	}
}
 17e:	f8 94       	cli
 180:	8f e2       	ldi	r24, 0x2F	; 47
 182:	84 b9       	out	0x04, r24	; 4
 184:	81 e5       	ldi	r24, 0x51	; 81
 186:	8c bd       	out	0x2c, r24	; 44
 188:	82 e0       	ldi	r24, 0x02	; 2
 18a:	85 b9       	out	0x05, r24	; 5
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	85 b9       	out	0x05, r24	; 5
 190:	78 94       	sei
 192:	08 95       	ret

00000194 <_ZN8Nrf24l0117SPI_Byte_TX_OR_RXEh>:
 194:	6e bd       	out	0x2e, r22	; 46
 196:	0d b4       	in	r0, 0x2d	; 45
 198:	07 fe       	sbrs	r0, 7
 19a:	fd cf       	rjmp	.-6      	; 0x196 <_ZN8Nrf24l0117SPI_Byte_TX_OR_RXEh+0x2>
 19c:	8e b5       	in	r24, 0x2e	; 46
 19e:	08 95       	ret

000001a0 <_ZN8Nrf24l0117Write_Data_To_nRFEhPhh>:
 1a0:	bf 92       	push	r11
 1a2:	cf 92       	push	r12
 1a4:	df 92       	push	r13
 1a6:	ef 92       	push	r14
 1a8:	ff 92       	push	r15
 1aa:	0f 93       	push	r16
 1ac:	1f 93       	push	r17
 1ae:	cf 93       	push	r28
 1b0:	df 93       	push	r29
 1b2:	7c 01       	movw	r14, r24
 1b4:	6a 01       	movw	r12, r20
 1b6:	12 2f       	mov	r17, r18
 1b8:	f8 94       	cli
 1ba:	85 e3       	ldi	r24, 0x35	; 53
 1bc:	8a 95       	dec	r24
 1be:	f1 f7       	brne	.-4      	; 0x1bc <_ZN8Nrf24l0117Write_Data_To_nRFEhPhh+0x1c>
 1c0:	00 00       	nop
 1c2:	f8 94       	cli
 1c4:	15 b8       	out	0x05, r1	; 5
 1c6:	60 35       	cpi	r22, 0x50	; 80
 1c8:	51 f0       	breq	.+20     	; 0x1de <_ZN8Nrf24l0117Write_Data_To_nRFEhPhh+0x3e>
 1ca:	60 5e       	subi	r22, 0xE0	; 224
 1cc:	c7 01       	movw	r24, r14
 1ce:	0e 94 ca 00 	call	0x194	; 0x194 <_ZN8Nrf24l0117SPI_Byte_TX_OR_RXEh>
 1d2:	b8 2e       	mov	r11, r24
 1d4:	8a e1       	ldi	r24, 0x1A	; 26
 1d6:	8a 95       	dec	r24
 1d8:	f1 f7       	brne	.-4      	; 0x1d6 <_ZN8Nrf24l0117Write_Data_To_nRFEhPhh+0x36>
 1da:	00 c0       	rjmp	.+0      	; 0x1dc <_ZN8Nrf24l0117Write_Data_To_nRFEhPhh+0x3c>
 1dc:	09 c0       	rjmp	.+18     	; 0x1f0 <_ZN8Nrf24l0117Write_Data_To_nRFEhPhh+0x50>
 1de:	60 ea       	ldi	r22, 0xA0	; 160
 1e0:	c7 01       	movw	r24, r14
 1e2:	0e 94 ca 00 	call	0x194	; 0x194 <_ZN8Nrf24l0117SPI_Byte_TX_OR_RXEh>
 1e6:	b8 2e       	mov	r11, r24
 1e8:	85 e3       	ldi	r24, 0x35	; 53
 1ea:	8a 95       	dec	r24
 1ec:	f1 f7       	brne	.-4      	; 0x1ea <_ZN8Nrf24l0117Write_Data_To_nRFEhPhh+0x4a>
 1ee:	00 00       	nop
 1f0:	11 23       	and	r17, r17
 1f2:	79 f0       	breq	.+30     	; 0x212 <_ZN8Nrf24l0117Write_Data_To_nRFEhPhh+0x72>
 1f4:	e6 01       	movw	r28, r12
 1f6:	11 50       	subi	r17, 0x01	; 1
 1f8:	01 2f       	mov	r16, r17
 1fa:	10 e0       	ldi	r17, 0x00	; 0
 1fc:	0f 5f       	subi	r16, 0xFF	; 255
 1fe:	1f 4f       	sbci	r17, 0xFF	; 255
 200:	0c 0d       	add	r16, r12
 202:	1d 1d       	adc	r17, r13
 204:	69 91       	ld	r22, Y+
 206:	c7 01       	movw	r24, r14
 208:	0e 94 ca 00 	call	0x194	; 0x194 <_ZN8Nrf24l0117SPI_Byte_TX_OR_RXEh>
 20c:	c0 17       	cp	r28, r16
 20e:	d1 07       	cpc	r29, r17
 210:	c9 f7       	brne	.-14     	; 0x204 <_ZN8Nrf24l0117Write_Data_To_nRFEhPhh+0x64>
 212:	82 e0       	ldi	r24, 0x02	; 2
 214:	85 b9       	out	0x05, r24	; 5
 216:	85 e3       	ldi	r24, 0x35	; 53
 218:	8a 95       	dec	r24
 21a:	f1 f7       	brne	.-4      	; 0x218 <_ZN8Nrf24l0117Write_Data_To_nRFEhPhh+0x78>
 21c:	00 00       	nop
 21e:	78 94       	sei
 220:	8b 2d       	mov	r24, r11
 222:	df 91       	pop	r29
 224:	cf 91       	pop	r28
 226:	1f 91       	pop	r17
 228:	0f 91       	pop	r16
 22a:	ff 90       	pop	r15
 22c:	ef 90       	pop	r14
 22e:	df 90       	pop	r13
 230:	cf 90       	pop	r12
 232:	bf 90       	pop	r11
 234:	08 95       	ret

00000236 <_ZN8Nrf24l0114Main_setup_nRFEv>:
 236:	ff 92       	push	r15
 238:	0f 93       	push	r16
 23a:	1f 93       	push	r17
 23c:	cf 93       	push	r28
 23e:	df 93       	push	r29
 240:	00 d0       	rcall	.+0      	; 0x242 <_ZN8Nrf24l0114Main_setup_nRFEv+0xc>
 242:	00 d0       	rcall	.+0      	; 0x244 <_ZN8Nrf24l0114Main_setup_nRFEv+0xe>
 244:	1f 92       	push	r1
 246:	cd b7       	in	r28, 0x3d	; 61
 248:	de b7       	in	r29, 0x3e	; 62
 24a:	8c 01       	movw	r16, r24
 24c:	f8 94       	cli
 24e:	2f ef       	ldi	r18, 0xFF	; 255
 250:	8b ed       	ldi	r24, 0xDB	; 219
 252:	95 e0       	ldi	r25, 0x05	; 5
 254:	21 50       	subi	r18, 0x01	; 1
 256:	80 40       	sbci	r24, 0x00	; 0
 258:	90 40       	sbci	r25, 0x00	; 0
 25a:	e1 f7       	brne	.-8      	; 0x254 <_ZN8Nrf24l0114Main_setup_nRFEv+0x1e>
 25c:	00 c0       	rjmp	.+0      	; 0x25e <_ZN8Nrf24l0114Main_setup_nRFEv+0x28>
 25e:	00 00       	nop
 260:	ff 24       	eor	r15, r15
 262:	f3 94       	inc	r15
 264:	f9 82       	std	Y+1, r15	; 0x01
 266:	21 e0       	ldi	r18, 0x01	; 1
 268:	ae 01       	movw	r20, r28
 26a:	4f 5f       	subi	r20, 0xFF	; 255
 26c:	5f 4f       	sbci	r21, 0xFF	; 255
 26e:	61 e0       	ldi	r22, 0x01	; 1
 270:	c8 01       	movw	r24, r16
 272:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_ZN8Nrf24l0117Write_Data_To_nRFEhPhh>
 276:	f9 82       	std	Y+1, r15	; 0x01
 278:	21 e0       	ldi	r18, 0x01	; 1
 27a:	ae 01       	movw	r20, r28
 27c:	4f 5f       	subi	r20, 0xFF	; 255
 27e:	5f 4f       	sbci	r21, 0xFF	; 255
 280:	62 e0       	ldi	r22, 0x02	; 2
 282:	c8 01       	movw	r24, r16
 284:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_ZN8Nrf24l0117Write_Data_To_nRFEhPhh>
 288:	0f 2e       	mov	r0, r31
 28a:	f3 e0       	ldi	r31, 0x03	; 3
 28c:	ff 2e       	mov	r15, r31
 28e:	f0 2d       	mov	r31, r0
 290:	f9 82       	std	Y+1, r15	; 0x01
 292:	21 e0       	ldi	r18, 0x01	; 1
 294:	ae 01       	movw	r20, r28
 296:	4f 5f       	subi	r20, 0xFF	; 255
 298:	5f 4f       	sbci	r21, 0xFF	; 255
 29a:	63 e0       	ldi	r22, 0x03	; 3
 29c:	c8 01       	movw	r24, r16
 29e:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_ZN8Nrf24l0117Write_Data_To_nRFEhPhh>
 2a2:	f9 82       	std	Y+1, r15	; 0x01
 2a4:	21 e0       	ldi	r18, 0x01	; 1
 2a6:	ae 01       	movw	r20, r28
 2a8:	4f 5f       	subi	r20, 0xFF	; 255
 2aa:	5f 4f       	sbci	r21, 0xFF	; 255
 2ac:	65 e0       	ldi	r22, 0x05	; 5
 2ae:	c8 01       	movw	r24, r16
 2b0:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_ZN8Nrf24l0117Write_Data_To_nRFEhPhh>
 2b4:	8f e2       	ldi	r24, 0x2F	; 47
 2b6:	89 83       	std	Y+1, r24	; 0x01
 2b8:	21 e0       	ldi	r18, 0x01	; 1
 2ba:	ae 01       	movw	r20, r28
 2bc:	4f 5f       	subi	r20, 0xFF	; 255
 2be:	5f 4f       	sbci	r21, 0xFF	; 255
 2c0:	64 e0       	ldi	r22, 0x04	; 4
 2c2:	c8 01       	movw	r24, r16
 2c4:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_ZN8Nrf24l0117Write_Data_To_nRFEhPhh>
 2c8:	86 e2       	ldi	r24, 0x26	; 38
 2ca:	89 83       	std	Y+1, r24	; 0x01
 2cc:	21 e0       	ldi	r18, 0x01	; 1
 2ce:	ae 01       	movw	r20, r28
 2d0:	4f 5f       	subi	r20, 0xFF	; 255
 2d2:	5f 4f       	sbci	r21, 0xFF	; 255
 2d4:	66 e0       	ldi	r22, 0x06	; 6
 2d6:	c8 01       	movw	r24, r16
 2d8:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_ZN8Nrf24l0117Write_Data_To_nRFEhPhh>
 2dc:	85 e1       	ldi	r24, 0x15	; 21
 2de:	89 83       	std	Y+1, r24	; 0x01
 2e0:	85 e3       	ldi	r24, 0x35	; 53
 2e2:	8a 83       	std	Y+2, r24	; 0x02
 2e4:	87 e1       	ldi	r24, 0x17	; 23
 2e6:	8b 83       	std	Y+3, r24	; 0x03
 2e8:	85 ec       	ldi	r24, 0xC5	; 197
 2ea:	8c 83       	std	Y+4, r24	; 0x04
 2ec:	82 e3       	ldi	r24, 0x32	; 50
 2ee:	8d 83       	std	Y+5, r24	; 0x05
 2f0:	25 e0       	ldi	r18, 0x05	; 5
 2f2:	ae 01       	movw	r20, r28
 2f4:	4f 5f       	subi	r20, 0xFF	; 255
 2f6:	5f 4f       	sbci	r21, 0xFF	; 255
 2f8:	6a e0       	ldi	r22, 0x0A	; 10
 2fa:	c8 01       	movw	r24, r16
 2fc:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_ZN8Nrf24l0117Write_Data_To_nRFEhPhh>
 300:	25 e0       	ldi	r18, 0x05	; 5
 302:	ae 01       	movw	r20, r28
 304:	4f 5f       	subi	r20, 0xFF	; 255
 306:	5f 4f       	sbci	r21, 0xFF	; 255
 308:	60 e1       	ldi	r22, 0x10	; 16
 30a:	c8 01       	movw	r24, r16
 30c:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_ZN8Nrf24l0117Write_Data_To_nRFEhPhh>
 310:	86 e0       	ldi	r24, 0x06	; 6
 312:	89 83       	std	Y+1, r24	; 0x01
 314:	21 e0       	ldi	r18, 0x01	; 1
 316:	ae 01       	movw	r20, r28
 318:	4f 5f       	subi	r20, 0xFF	; 255
 31a:	5f 4f       	sbci	r21, 0xFF	; 255
 31c:	61 e1       	ldi	r22, 0x11	; 17
 31e:	c8 01       	movw	r24, r16
 320:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_ZN8Nrf24l0117Write_Data_To_nRFEhPhh>
 324:	78 94       	sei
 326:	0f 90       	pop	r0
 328:	0f 90       	pop	r0
 32a:	0f 90       	pop	r0
 32c:	0f 90       	pop	r0
 32e:	0f 90       	pop	r0
 330:	df 91       	pop	r29
 332:	cf 91       	pop	r28
 334:	1f 91       	pop	r17
 336:	0f 91       	pop	r16
 338:	ff 90       	pop	r15
 33a:	08 95       	ret

0000033c <_ZN8Nrf24l0118Read_Data_From_nRFEhPhh>:
 33c:	bf 92       	push	r11
 33e:	cf 92       	push	r12
 340:	df 92       	push	r13
 342:	ef 92       	push	r14
 344:	ff 92       	push	r15
 346:	0f 93       	push	r16
 348:	1f 93       	push	r17
 34a:	cf 93       	push	r28
 34c:	df 93       	push	r29
 34e:	7c 01       	movw	r14, r24
 350:	6a 01       	movw	r12, r20
 352:	12 2f       	mov	r17, r18
 354:	85 e3       	ldi	r24, 0x35	; 53
 356:	8a 95       	dec	r24
 358:	f1 f7       	brne	.-4      	; 0x356 <_ZN8Nrf24l0118Read_Data_From_nRFEhPhh+0x1a>
 35a:	00 00       	nop
 35c:	f8 94       	cli
 35e:	15 b8       	out	0x05, r1	; 5
 360:	8a e0       	ldi	r24, 0x0A	; 10
 362:	8a 95       	dec	r24
 364:	f1 f7       	brne	.-4      	; 0x362 <_ZN8Nrf24l0118Read_Data_From_nRFEhPhh+0x26>
 366:	00 c0       	rjmp	.+0      	; 0x368 <_ZN8Nrf24l0118Read_Data_From_nRFEhPhh+0x2c>
 368:	60 35       	cpi	r22, 0x50	; 80
 36a:	49 f0       	breq	.+18     	; 0x37e <_ZN8Nrf24l0118Read_Data_From_nRFEhPhh+0x42>
 36c:	c7 01       	movw	r24, r14
 36e:	0e 94 ca 00 	call	0x194	; 0x194 <_ZN8Nrf24l0117SPI_Byte_TX_OR_RXEh>
 372:	b8 2e       	mov	r11, r24
 374:	85 e3       	ldi	r24, 0x35	; 53
 376:	8a 95       	dec	r24
 378:	f1 f7       	brne	.-4      	; 0x376 <_ZN8Nrf24l0118Read_Data_From_nRFEhPhh+0x3a>
 37a:	00 00       	nop
 37c:	09 c0       	rjmp	.+18     	; 0x390 <_ZN8Nrf24l0118Read_Data_From_nRFEhPhh+0x54>
 37e:	61 e6       	ldi	r22, 0x61	; 97
 380:	c7 01       	movw	r24, r14
 382:	0e 94 ca 00 	call	0x194	; 0x194 <_ZN8Nrf24l0117SPI_Byte_TX_OR_RXEh>
 386:	b8 2e       	mov	r11, r24
 388:	85 e3       	ldi	r24, 0x35	; 53
 38a:	8a 95       	dec	r24
 38c:	f1 f7       	brne	.-4      	; 0x38a <_ZN8Nrf24l0118Read_Data_From_nRFEhPhh+0x4e>
 38e:	00 00       	nop
 390:	11 23       	and	r17, r17
 392:	a1 f0       	breq	.+40     	; 0x3bc <_ZN8Nrf24l0118Read_Data_From_nRFEhPhh+0x80>
 394:	e6 01       	movw	r28, r12
 396:	11 50       	subi	r17, 0x01	; 1
 398:	01 2f       	mov	r16, r17
 39a:	10 e0       	ldi	r17, 0x00	; 0
 39c:	0f 5f       	subi	r16, 0xFF	; 255
 39e:	1f 4f       	sbci	r17, 0xFF	; 255
 3a0:	0c 0d       	add	r16, r12
 3a2:	1d 1d       	adc	r17, r13
 3a4:	6f ef       	ldi	r22, 0xFF	; 255
 3a6:	c7 01       	movw	r24, r14
 3a8:	0e 94 ca 00 	call	0x194	; 0x194 <_ZN8Nrf24l0117SPI_Byte_TX_OR_RXEh>
 3ac:	89 93       	st	Y+, r24
 3ae:	85 e3       	ldi	r24, 0x35	; 53
 3b0:	8a 95       	dec	r24
 3b2:	f1 f7       	brne	.-4      	; 0x3b0 <_ZN8Nrf24l0118Read_Data_From_nRFEhPhh+0x74>
 3b4:	00 00       	nop
 3b6:	c0 17       	cp	r28, r16
 3b8:	d1 07       	cpc	r29, r17
 3ba:	a1 f7       	brne	.-24     	; 0x3a4 <_ZN8Nrf24l0118Read_Data_From_nRFEhPhh+0x68>
 3bc:	82 e0       	ldi	r24, 0x02	; 2
 3be:	85 b9       	out	0x05, r24	; 5
 3c0:	85 e3       	ldi	r24, 0x35	; 53
 3c2:	8a 95       	dec	r24
 3c4:	f1 f7       	brne	.-4      	; 0x3c2 <_ZN8Nrf24l0118Read_Data_From_nRFEhPhh+0x86>
 3c6:	00 00       	nop
 3c8:	78 94       	sei
 3ca:	8b 2d       	mov	r24, r11
 3cc:	df 91       	pop	r29
 3ce:	cf 91       	pop	r28
 3d0:	1f 91       	pop	r17
 3d2:	0f 91       	pop	r16
 3d4:	ff 90       	pop	r15
 3d6:	ef 90       	pop	r14
 3d8:	df 90       	pop	r13
 3da:	cf 90       	pop	r12
 3dc:	bf 90       	pop	r11
 3de:	08 95       	ret

000003e0 <_ZN8Nrf24l01C1Ev>:
 3e0:	cf 93       	push	r28
 3e2:	df 93       	push	r29
 3e4:	ec 01       	movw	r28, r24
 3e6:	0e 94 bf 00 	call	0x17e	; 0x17e <_ZN8Nrf24l019SPI_SETUPEv>
 3ea:	ce 01       	movw	r24, r28
 3ec:	0e 94 1b 01 	call	0x236	; 0x236 <_ZN8Nrf24l0114Main_setup_nRFEv>
 3f0:	1b 82       	std	Y+3, r1	; 0x03
 3f2:	1a 82       	std	Y+2, r1	; 0x02
 3f4:	19 82       	std	Y+1, r1	; 0x01
 3f6:	18 82       	st	Y, r1
 3f8:	df 91       	pop	r29
 3fa:	cf 91       	pop	r28
 3fc:	08 95       	ret

000003fe <_ZN8Nrf24l019Reset_IRQEv>:
 3fe:	cf 93       	push	r28
 400:	df 93       	push	r29
 402:	ec 01       	movw	r28, r24
 404:	85 e3       	ldi	r24, 0x35	; 53
 406:	8a 95       	dec	r24
 408:	f1 f7       	brne	.-4      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 40a:	00 00       	nop
 40c:	15 b8       	out	0x05, r1	; 5
 40e:	85 e3       	ldi	r24, 0x35	; 53
 410:	8a 95       	dec	r24
 412:	f1 f7       	brne	.-4      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 414:	00 00       	nop
 416:	67 e2       	ldi	r22, 0x27	; 39
 418:	ce 01       	movw	r24, r28
 41a:	0e 94 ca 00 	call	0x194	; 0x194 <_ZN8Nrf24l0117SPI_Byte_TX_OR_RXEh>
 41e:	85 e3       	ldi	r24, 0x35	; 53
 420:	8a 95       	dec	r24
 422:	f1 f7       	brne	.-4      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 424:	00 00       	nop
 426:	60 e7       	ldi	r22, 0x70	; 112
 428:	ce 01       	movw	r24, r28
 42a:	0e 94 ca 00 	call	0x194	; 0x194 <_ZN8Nrf24l0117SPI_Byte_TX_OR_RXEh>
 42e:	85 e3       	ldi	r24, 0x35	; 53
 430:	8a 95       	dec	r24
 432:	f1 f7       	brne	.-4      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 434:	00 00       	nop
 436:	82 e0       	ldi	r24, 0x02	; 2
 438:	85 b9       	out	0x05, r24	; 5
 43a:	df 91       	pop	r29
 43c:	cf 91       	pop	r28
 43e:	08 95       	ret

00000440 <_ZN8Nrf24l0111Set_RX_ModeEv>:
 440:	cf 93       	push	r28
 442:	df 93       	push	r29
 444:	1f 92       	push	r1
 446:	cd b7       	in	r28, 0x3d	; 61
 448:	de b7       	in	r29, 0x3e	; 62
 44a:	f8 94       	cli
 44c:	2f e0       	ldi	r18, 0x0F	; 15
 44e:	29 83       	std	Y+1, r18	; 0x01
 450:	21 e0       	ldi	r18, 0x01	; 1
 452:	ae 01       	movw	r20, r28
 454:	4f 5f       	subi	r20, 0xFF	; 255
 456:	5f 4f       	sbci	r21, 0xFF	; 255
 458:	60 e0       	ldi	r22, 0x00	; 0
 45a:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_ZN8Nrf24l0117Write_Data_To_nRFEhPhh>
 45e:	15 b8       	out	0x05, r1	; 5
 460:	8f e3       	ldi	r24, 0x3F	; 63
 462:	9f e1       	ldi	r25, 0x1F	; 31
 464:	01 97       	sbiw	r24, 0x01	; 1
 466:	f1 f7       	brne	.-4      	; 0x464 <_ZN8Nrf24l0111Set_RX_ModeEv+0x24>
 468:	00 c0       	rjmp	.+0      	; 0x46a <_ZN8Nrf24l0111Set_RX_ModeEv+0x2a>
 46a:	00 00       	nop
 46c:	78 94       	sei
 46e:	0f 90       	pop	r0
 470:	df 91       	pop	r29
 472:	cf 91       	pop	r28
 474:	08 95       	ret

00000476 <_ZN8Nrf24l0112Read_PayloadEPh>:
 476:	ef 92       	push	r14
 478:	ff 92       	push	r15
 47a:	0f 93       	push	r16
 47c:	1f 93       	push	r17
 47e:	cf 93       	push	r28
 480:	df 93       	push	r29
 482:	8c 01       	movw	r16, r24
 484:	eb 01       	movw	r28, r22
 486:	15 b8       	out	0x05, r1	; 5
 488:	61 e6       	ldi	r22, 0x61	; 97
 48a:	0e 94 ca 00 	call	0x194	; 0x194 <_ZN8Nrf24l0117SPI_Byte_TX_OR_RXEh>
 48e:	85 e3       	ldi	r24, 0x35	; 53
 490:	8a 95       	dec	r24
 492:	f1 f7       	brne	.-4      	; 0x490 <_ZN8Nrf24l0112Read_PayloadEPh+0x1a>
 494:	00 00       	nop
 496:	7e 01       	movw	r14, r28
 498:	86 e0       	ldi	r24, 0x06	; 6
 49a:	e8 0e       	add	r14, r24
 49c:	f1 1c       	adc	r15, r1
 49e:	6f ef       	ldi	r22, 0xFF	; 255
 4a0:	c8 01       	movw	r24, r16
 4a2:	0e 94 ca 00 	call	0x194	; 0x194 <_ZN8Nrf24l0117SPI_Byte_TX_OR_RXEh>
 4a6:	89 93       	st	Y+, r24
 4a8:	85 e3       	ldi	r24, 0x35	; 53
 4aa:	8a 95       	dec	r24
 4ac:	f1 f7       	brne	.-4      	; 0x4aa <_ZN8Nrf24l0112Read_PayloadEPh+0x34>
 4ae:	00 00       	nop
 4b0:	ec 16       	cp	r14, r28
 4b2:	fd 06       	cpc	r15, r29
 4b4:	a1 f7       	brne	.-24     	; 0x49e <_ZN8Nrf24l0112Read_PayloadEPh+0x28>
 4b6:	82 e0       	ldi	r24, 0x02	; 2
 4b8:	85 b9       	out	0x05, r24	; 5
 4ba:	85 e3       	ldi	r24, 0x35	; 53
 4bc:	8a 95       	dec	r24
 4be:	f1 f7       	brne	.-4      	; 0x4bc <_ZN8Nrf24l0112Read_PayloadEPh+0x46>
 4c0:	00 00       	nop
 4c2:	df 91       	pop	r29
 4c4:	cf 91       	pop	r28
 4c6:	1f 91       	pop	r17
 4c8:	0f 91       	pop	r16
 4ca:	ff 90       	pop	r15
 4cc:	ef 90       	pop	r14
 4ce:	08 95       	ret

000004d0 <_ZN8Nrf24l0115Receive_PayloadEPh>:
 4d0:	cf 92       	push	r12
 4d2:	df 92       	push	r13
 4d4:	ff 92       	push	r15
 4d6:	0f 93       	push	r16
 4d8:	1f 93       	push	r17
 4da:	cf 93       	push	r28
 4dc:	df 93       	push	r29
 4de:	1f 92       	push	r1
 4e0:	cd b7       	in	r28, 0x3d	; 61
 4e2:	de b7       	in	r29, 0x3e	; 62
 4e4:	8c 01       	movw	r16, r24
 4e6:	6b 01       	movw	r12, r22
 4e8:	f8 94       	cli
 4ea:	21 e0       	ldi	r18, 0x01	; 1
 4ec:	ae 01       	movw	r20, r28
 4ee:	4f 5f       	subi	r20, 0xFF	; 255
 4f0:	5f 4f       	sbci	r21, 0xFF	; 255
 4f2:	67 e1       	ldi	r22, 0x17	; 23
 4f4:	0e 94 9e 01 	call	0x33c	; 0x33c <_ZN8Nrf24l0118Read_Data_From_nRFEhPhh>
 4f8:	89 81       	ldd	r24, Y+1	; 0x01
 4fa:	98 2f       	mov	r25, r24
 4fc:	91 70       	andi	r25, 0x01	; 1
 4fe:	f9 2e       	mov	r15, r25
 500:	80 fd       	sbrc	r24, 0
 502:	06 c0       	rjmp	.+12     	; 0x510 <_ZN8Nrf24l0115Receive_PayloadEPh+0x40>
 504:	b6 01       	movw	r22, r12
 506:	c8 01       	movw	r24, r16
 508:	0e 94 3b 02 	call	0x476	; 0x476 <_ZN8Nrf24l0112Read_PayloadEPh>
 50c:	78 94       	sei
 50e:	20 c0       	rjmp	.+64     	; 0x550 <_ZN8Nrf24l0115Receive_PayloadEPh+0x80>
 510:	15 b8       	out	0x05, r1	; 5
 512:	8a e0       	ldi	r24, 0x0A	; 10
 514:	8a 95       	dec	r24
 516:	f1 f7       	brne	.-4      	; 0x514 <_ZN8Nrf24l0115Receive_PayloadEPh+0x44>
 518:	00 c0       	rjmp	.+0      	; 0x51a <_ZN8Nrf24l0115Receive_PayloadEPh+0x4a>
 51a:	62 ee       	ldi	r22, 0xE2	; 226
 51c:	c8 01       	movw	r24, r16
 51e:	0e 94 ca 00 	call	0x194	; 0x194 <_ZN8Nrf24l0117SPI_Byte_TX_OR_RXEh>
 522:	82 e0       	ldi	r24, 0x02	; 2
 524:	85 b9       	out	0x05, r24	; 5
 526:	c8 01       	movw	r24, r16
 528:	0e 94 ff 01 	call	0x3fe	; 0x3fe <_ZN8Nrf24l019Reset_IRQEv>
 52c:	81 e0       	ldi	r24, 0x01	; 1
 52e:	85 b9       	out	0x05, r24	; 5
 530:	8f e3       	ldi	r24, 0x3F	; 63
 532:	9f e1       	ldi	r25, 0x1F	; 31
 534:	01 97       	sbiw	r24, 0x01	; 1
 536:	f1 f7       	brne	.-4      	; 0x534 <_ZN8Nrf24l0115Receive_PayloadEPh+0x64>
 538:	00 c0       	rjmp	.+0      	; 0x53a <_ZN8Nrf24l0115Receive_PayloadEPh+0x6a>
 53a:	00 00       	nop
 53c:	26 e0       	ldi	r18, 0x06	; 6
 53e:	a6 01       	movw	r20, r12
 540:	60 e5       	ldi	r22, 0x50	; 80
 542:	c8 01       	movw	r24, r16
 544:	0e 94 9e 01 	call	0x33c	; 0x33c <_ZN8Nrf24l0118Read_Data_From_nRFEhPhh>
 548:	15 b8       	out	0x05, r1	; 5
 54a:	78 94       	sei
 54c:	ff 24       	eor	r15, r15
 54e:	f3 94       	inc	r15
 550:	8f 2d       	mov	r24, r15
 552:	0f 90       	pop	r0
 554:	df 91       	pop	r29
 556:	cf 91       	pop	r28
 558:	1f 91       	pop	r17
 55a:	0f 91       	pop	r16
 55c:	ff 90       	pop	r15
 55e:	df 90       	pop	r13
 560:	cf 90       	pop	r12
 562:	08 95       	ret

00000564 <_ZN8Nrf24l0116PayloadAvailableEv>:
bool Nrf24l01::PayloadAvailable()
{
 564:	1f 93       	push	r17
 566:	cf 93       	push	r28
 568:	df 93       	push	r29
 56a:	ec 01       	movw	r28, r24
	unsigned char STATUS_reg;

	//stop listening
	Send_Signal = (0<<CE);
 56c:	15 b8       	out	0x05, r1	; 5
	
	//get STATUS register value
	STATUS_reg = SPI_Byte_TX_OR_RX(NOP);
 56e:	6f ef       	ldi	r22, 0xFF	; 255
 570:	0e 94 ca 00 	call	0x194	; 0x194 <_ZN8Nrf24l0117SPI_Byte_TX_OR_RXEh>
 574:	18 2f       	mov	r17, r24
	
	//set CE to 1 for receiving data
	Send_Signal = (1<<CE);
 576:	81 e0       	ldi	r24, 0x01	; 1
 578:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 57a:	8f e1       	ldi	r24, 0x1F	; 31
 57c:	9e e4       	ldi	r25, 0x4E	; 78
 57e:	01 97       	sbiw	r24, 0x01	; 1
 580:	f1 f7       	brne	.-4      	; 0x57e <_ZN8Nrf24l0116PayloadAvailableEv+0x1a>
 582:	00 c0       	rjmp	.+0      	; 0x584 <_ZN8Nrf24l0116PayloadAvailableEv+0x20>
 584:	00 00       	nop
	
	//wait for data
	_delay_ms(5);
	Reset_IRQ();
 586:	ce 01       	movw	r24, r28
 588:	0e 94 ff 01 	call	0x3fe	; 0x3fe <_ZN8Nrf24l019Reset_IRQEv>
	
	//Check if RX_DR is = '0' he will return RX_DR value
	//that mean the interrupt have been active
	if(STATUS_reg & (1<<RX_DR))
 58c:	16 fd       	sbrc	r17, 6
 58e:	04 c0       	rjmp	.+8      	; 0x598 <_ZN8Nrf24l0116PayloadAvailableEv+0x34>
	{
		return true;
	}
	//set CE to 1 for receiving data
	Send_Signal = (1<<CE);
 590:	81 e0       	ldi	r24, 0x01	; 1
 592:	85 b9       	out	0x05, r24	; 5
	return false;
 594:	80 e0       	ldi	r24, 0x00	; 0
 596:	01 c0       	rjmp	.+2      	; 0x59a <_ZN8Nrf24l0116PayloadAvailableEv+0x36>
	
	//Check if RX_DR is = '0' he will return RX_DR value
	//that mean the interrupt have been active
	if(STATUS_reg & (1<<RX_DR))
	{
		return true;
 598:	81 e0       	ldi	r24, 0x01	; 1
	}
	//set CE to 1 for receiving data
	Send_Signal = (1<<CE);
	return false;
 59a:	df 91       	pop	r29
 59c:	cf 91       	pop	r28
 59e:	1f 91       	pop	r17
 5a0:	08 95       	ret

000005a2 <_ZN18Nrf24l01_HandShake15setToggleOptionEv>:
		readAckPayload();
		checkifAckPacketIsDummy();
		return true;
	}
	return false;
}
 5a2:	cf 93       	push	r28
 5a4:	df 93       	push	r29
 5a6:	1f 92       	push	r1
 5a8:	cd b7       	in	r28, 0x3d	; 61
 5aa:	de b7       	in	r29, 0x3e	; 62
 5ac:	22 e0       	ldi	r18, 0x02	; 2
 5ae:	29 83       	std	Y+1, r18	; 0x01
 5b0:	21 e0       	ldi	r18, 0x01	; 1
 5b2:	ae 01       	movw	r20, r28
 5b4:	4f 5f       	subi	r20, 0xFF	; 255
 5b6:	5f 4f       	sbci	r21, 0xFF	; 255
 5b8:	6d e1       	ldi	r22, 0x1D	; 29
 5ba:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_ZN8Nrf24l0117Write_Data_To_nRFEhPhh>
 5be:	0f 90       	pop	r0
 5c0:	df 91       	pop	r29
 5c2:	cf 91       	pop	r28
 5c4:	08 95       	ret

000005c6 <_ZN18Nrf24l01_HandShake6setAckEPhh>:
 5c6:	cf 92       	push	r12
 5c8:	df 92       	push	r13
 5ca:	ef 92       	push	r14
 5cc:	ff 92       	push	r15
 5ce:	0f 93       	push	r16
 5d0:	1f 93       	push	r17
 5d2:	cf 93       	push	r28
 5d4:	df 93       	push	r29
 5d6:	7b 01       	movw	r14, r22
 5d8:	14 2f       	mov	r17, r20
 5da:	f8 94       	cli
 5dc:	25 e3       	ldi	r18, 0x35	; 53
 5de:	2a 95       	dec	r18
 5e0:	f1 f7       	brne	.-4      	; 0x5de <_ZN18Nrf24l01_HandShake6setAckEPhh+0x18>
 5e2:	00 00       	nop
 5e4:	15 b8       	out	0x05, r1	; 5
 5e6:	d8 2e       	mov	r13, r24
 5e8:	c9 2e       	mov	r12, r25
 5ea:	68 ea       	ldi	r22, 0xA8	; 168
 5ec:	0e 94 ca 00 	call	0x194	; 0x194 <_ZN8Nrf24l0117SPI_Byte_TX_OR_RXEh>
 5f0:	85 e3       	ldi	r24, 0x35	; 53
 5f2:	8a 95       	dec	r24
 5f4:	f1 f7       	brne	.-4      	; 0x5f2 <_ZN18Nrf24l01_HandShake6setAckEPhh+0x2c>
 5f6:	00 00       	nop
 5f8:	11 23       	and	r17, r17
 5fa:	81 f0       	breq	.+32     	; 0x61c <_ZN18Nrf24l01_HandShake6setAckEPhh+0x56>
 5fc:	e7 01       	movw	r28, r14
 5fe:	11 50       	subi	r17, 0x01	; 1
 600:	01 2f       	mov	r16, r17
 602:	10 e0       	ldi	r17, 0x00	; 0
 604:	0f 5f       	subi	r16, 0xFF	; 255
 606:	1f 4f       	sbci	r17, 0xFF	; 255
 608:	0e 0d       	add	r16, r14
 60a:	1f 1d       	adc	r17, r15
 60c:	69 91       	ld	r22, Y+
 60e:	8d 2d       	mov	r24, r13
 610:	9c 2d       	mov	r25, r12
 612:	0e 94 ca 00 	call	0x194	; 0x194 <_ZN8Nrf24l0117SPI_Byte_TX_OR_RXEh>
 616:	c0 17       	cp	r28, r16
 618:	d1 07       	cpc	r29, r17
 61a:	c1 f7       	brne	.-16     	; 0x60c <_ZN18Nrf24l01_HandShake6setAckEPhh+0x46>
 61c:	82 e0       	ldi	r24, 0x02	; 2
 61e:	85 b9       	out	0x05, r24	; 5
 620:	25 e3       	ldi	r18, 0x35	; 53
 622:	2a 95       	dec	r18
 624:	f1 f7       	brne	.-4      	; 0x622 <_ZN18Nrf24l01_HandShake6setAckEPhh+0x5c>
 626:	00 00       	nop
 628:	78 94       	sei
 62a:	df 91       	pop	r29
 62c:	cf 91       	pop	r28
 62e:	1f 91       	pop	r17
 630:	0f 91       	pop	r16
 632:	ff 90       	pop	r15
 634:	ef 90       	pop	r14
 636:	df 90       	pop	r13
 638:	cf 90       	pop	r12
 63a:	08 95       	ret

0000063c <_ZN18Nrf24l01_HandShakeC1Ev>:
 63c:	cf 93       	push	r28
 63e:	df 93       	push	r29
 640:	ec 01       	movw	r28, r24
 642:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_ZN8Nrf24l01C1Ev>
 646:	ce 01       	movw	r24, r28
 648:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <_ZN18Nrf24l01_HandShake15setToggleOptionEv>
 64c:	1b 82       	std	Y+3, r1	; 0x03
 64e:	1a 82       	std	Y+2, r1	; 0x02
 650:	19 82       	std	Y+1, r1	; 0x01
 652:	18 82       	st	Y, r1
 654:	df 91       	pop	r29
 656:	cf 91       	pop	r28
 658:	08 95       	ret

0000065a <_ZN18Nrf24l01_HandShake15Receive_PayloadEPh>:
unsigned char *Nrf24l01_HandShake::Receive_Payload(unsigned char *dataToBeSendFromRX)
{
 65a:	0f 93       	push	r16
 65c:	1f 93       	push	r17
 65e:	cf 93       	push	r28
 660:	df 93       	push	r29
 662:	ec 01       	movw	r28, r24
	setAck(dataToBeSendFromRX);
 664:	46 e0       	ldi	r20, 0x06	; 6
 666:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_ZN18Nrf24l01_HandShake6setAckEPhh>
	Nrf24l01::Receive_Payload(_Packet);
 66a:	8e 01       	movw	r16, r28
 66c:	06 5f       	subi	r16, 0xF6	; 246
 66e:	1f 4f       	sbci	r17, 0xFF	; 255
 670:	b8 01       	movw	r22, r16
 672:	ce 01       	movw	r24, r28
 674:	0e 94 68 02 	call	0x4d0	; 0x4d0 <_ZN8Nrf24l0115Receive_PayloadEPh>
	return _Packet;
}
 678:	c8 01       	movw	r24, r16
 67a:	df 91       	pop	r29
 67c:	cf 91       	pop	r28
 67e:	1f 91       	pop	r17
 680:	0f 91       	pop	r16
 682:	08 95       	ret

00000684 <_ZN4Uart11setBaudRateE8BaudRate>:
		{
			return 0;
		}
	}
	return 1;
}
 684:	cb 01       	movw	r24, r22
 686:	a0 e0       	ldi	r26, 0x00	; 0
 688:	b0 e0       	ldi	r27, 0x00	; 0
 68a:	88 0f       	add	r24, r24
 68c:	99 1f       	adc	r25, r25
 68e:	aa 1f       	adc	r26, r26
 690:	bb 1f       	adc	r27, r27
 692:	88 0f       	add	r24, r24
 694:	99 1f       	adc	r25, r25
 696:	aa 1f       	adc	r26, r26
 698:	bb 1f       	adc	r27, r27
 69a:	9c 01       	movw	r18, r24
 69c:	ad 01       	movw	r20, r26
 69e:	22 0f       	add	r18, r18
 6a0:	33 1f       	adc	r19, r19
 6a2:	44 1f       	adc	r20, r20
 6a4:	55 1f       	adc	r21, r21
 6a6:	22 0f       	add	r18, r18
 6a8:	33 1f       	adc	r19, r19
 6aa:	44 1f       	adc	r20, r20
 6ac:	55 1f       	adc	r21, r21
 6ae:	60 e0       	ldi	r22, 0x00	; 0
 6b0:	74 e2       	ldi	r23, 0x24	; 36
 6b2:	84 ef       	ldi	r24, 0xF4	; 244
 6b4:	90 e0       	ldi	r25, 0x00	; 0
 6b6:	0e 94 01 04 	call	0x802	; 0x802 <__udivmodsi4>
 6ba:	21 50       	subi	r18, 0x01	; 1
 6bc:	31 09       	sbc	r19, r1
 6be:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 6c2:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 6c6:	88 e1       	ldi	r24, 0x18	; 24
 6c8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 6cc:	86 e0       	ldi	r24, 0x06	; 6
 6ce:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 6d2:	08 95       	ret

000006d4 <_ZN4UartC1E8BaudRate>:
 6d4:	0e 94 42 03 	call	0x684	; 0x684 <_ZN4Uart11setBaudRateE8BaudRate>
 6d8:	08 95       	ret

000006da <_ZN4Uart8UARTsendEh>:
 6da:	e0 ec       	ldi	r30, 0xC0	; 192
 6dc:	f0 e0       	ldi	r31, 0x00	; 0
 6de:	80 81       	ld	r24, Z
 6e0:	85 ff       	sbrs	r24, 5
 6e2:	fd cf       	rjmp	.-6      	; 0x6de <_ZN4Uart8UARTsendEh+0x4>
 6e4:	60 93 c6 00 	sts	0x00C6, r22	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 6e8:	08 95       	ret

000006ea <_ZN4Uart10UARTstringEPKcc>:
 6ea:	ff 92       	push	r15
 6ec:	0f 93       	push	r16
 6ee:	1f 93       	push	r17
 6f0:	cf 93       	push	r28
 6f2:	df 93       	push	r29
 6f4:	8c 01       	movw	r16, r24
 6f6:	eb 01       	movw	r28, r22
 6f8:	f4 2e       	mov	r15, r20
 6fa:	44 23       	and	r20, r20
 6fc:	a1 f0       	breq	.+40     	; 0x726 <_ZN4Uart10UARTstringEPKcc+0x3c>
 6fe:	60 e2       	ldi	r22, 0x20	; 32
 700:	0e 94 6d 03 	call	0x6da	; 0x6da <_ZN4Uart8UARTsendEh>
 704:	68 81       	ld	r22, Y
 706:	66 23       	and	r22, r22
 708:	49 f0       	breq	.+18     	; 0x71c <_ZN4Uart10UARTstringEPKcc+0x32>
 70a:	21 96       	adiw	r28, 0x01	; 1
 70c:	c8 01       	movw	r24, r16
 70e:	0e 94 6d 03 	call	0x6da	; 0x6da <_ZN4Uart8UARTsendEh>
 712:	69 91       	ld	r22, Y+
 714:	61 11       	cpse	r22, r1
 716:	fa cf       	rjmp	.-12     	; 0x70c <_ZN4Uart10UARTstringEPKcc+0x22>
 718:	ff 20       	and	r15, r15
 71a:	41 f0       	breq	.+16     	; 0x72c <_ZN4Uart10UARTstringEPKcc+0x42>
 71c:	60 e2       	ldi	r22, 0x20	; 32
 71e:	c8 01       	movw	r24, r16
 720:	0e 94 6d 03 	call	0x6da	; 0x6da <_ZN4Uart8UARTsendEh>
 724:	03 c0       	rjmp	.+6      	; 0x72c <_ZN4Uart10UARTstringEPKcc+0x42>
 726:	68 81       	ld	r22, Y
 728:	61 11       	cpse	r22, r1
 72a:	ef cf       	rjmp	.-34     	; 0x70a <_ZN4Uart10UARTstringEPKcc+0x20>
 72c:	df 91       	pop	r29
 72e:	cf 91       	pop	r28
 730:	1f 91       	pop	r17
 732:	0f 91       	pop	r16
 734:	ff 90       	pop	r15
 736:	08 95       	ret

00000738 <_ZN4Uart9verafyNumEh>:
 738:	46 2f       	mov	r20, r22
 73a:	50 e0       	ldi	r21, 0x00	; 0
 73c:	40 31       	cpi	r20, 0x10	; 16
 73e:	51 05       	cpc	r21, r1
 740:	08 f0       	brcs	.+2      	; 0x744 <_ZN4Uart9verafyNumEh+0xc>
 742:	44 c0       	rjmp	.+136    	; 0x7cc <_ZN4Uart9verafyNumEh+0x94>
 744:	fa 01       	movw	r30, r20
 746:	ec 5c       	subi	r30, 0xCC	; 204
 748:	ff 4f       	sbci	r31, 0xFF	; 255
 74a:	0c 94 23 04 	jmp	0x846	; 0x846 <__tablejump2__>
 74e:	60 e3       	ldi	r22, 0x30	; 48
 750:	0e 94 6d 03 	call	0x6da	; 0x6da <_ZN4Uart8UARTsendEh>
 754:	08 95       	ret
 756:	61 e3       	ldi	r22, 0x31	; 49
 758:	0e 94 6d 03 	call	0x6da	; 0x6da <_ZN4Uart8UARTsendEh>
 75c:	08 95       	ret
 75e:	62 e3       	ldi	r22, 0x32	; 50
 760:	0e 94 6d 03 	call	0x6da	; 0x6da <_ZN4Uart8UARTsendEh>
 764:	08 95       	ret
 766:	63 e3       	ldi	r22, 0x33	; 51
 768:	0e 94 6d 03 	call	0x6da	; 0x6da <_ZN4Uart8UARTsendEh>
 76c:	08 95       	ret
 76e:	64 e3       	ldi	r22, 0x34	; 52
 770:	0e 94 6d 03 	call	0x6da	; 0x6da <_ZN4Uart8UARTsendEh>
 774:	08 95       	ret
 776:	65 e3       	ldi	r22, 0x35	; 53
 778:	0e 94 6d 03 	call	0x6da	; 0x6da <_ZN4Uart8UARTsendEh>
 77c:	08 95       	ret
 77e:	66 e3       	ldi	r22, 0x36	; 54
 780:	0e 94 6d 03 	call	0x6da	; 0x6da <_ZN4Uart8UARTsendEh>
 784:	08 95       	ret
 786:	67 e3       	ldi	r22, 0x37	; 55
 788:	0e 94 6d 03 	call	0x6da	; 0x6da <_ZN4Uart8UARTsendEh>
 78c:	08 95       	ret
 78e:	68 e3       	ldi	r22, 0x38	; 56
 790:	0e 94 6d 03 	call	0x6da	; 0x6da <_ZN4Uart8UARTsendEh>
 794:	08 95       	ret
 796:	69 e3       	ldi	r22, 0x39	; 57
 798:	0e 94 6d 03 	call	0x6da	; 0x6da <_ZN4Uart8UARTsendEh>
 79c:	08 95       	ret
 79e:	61 e4       	ldi	r22, 0x41	; 65
 7a0:	0e 94 6d 03 	call	0x6da	; 0x6da <_ZN4Uart8UARTsendEh>
 7a4:	08 95       	ret
 7a6:	62 e4       	ldi	r22, 0x42	; 66
 7a8:	0e 94 6d 03 	call	0x6da	; 0x6da <_ZN4Uart8UARTsendEh>
 7ac:	08 95       	ret
 7ae:	63 e4       	ldi	r22, 0x43	; 67
 7b0:	0e 94 6d 03 	call	0x6da	; 0x6da <_ZN4Uart8UARTsendEh>
 7b4:	08 95       	ret
 7b6:	64 e4       	ldi	r22, 0x44	; 68
 7b8:	0e 94 6d 03 	call	0x6da	; 0x6da <_ZN4Uart8UARTsendEh>
 7bc:	08 95       	ret
 7be:	65 e4       	ldi	r22, 0x45	; 69
 7c0:	0e 94 6d 03 	call	0x6da	; 0x6da <_ZN4Uart8UARTsendEh>
 7c4:	08 95       	ret
 7c6:	66 e4       	ldi	r22, 0x46	; 70
 7c8:	0e 94 6d 03 	call	0x6da	; 0x6da <_ZN4Uart8UARTsendEh>
 7cc:	08 95       	ret

000007ce <_ZN4Uart7sendNumEh>:
void Uart::sendNum(unsigned char num)
{
 7ce:	1f 93       	push	r17
 7d0:	cf 93       	push	r28
 7d2:	df 93       	push	r29
 7d4:	ec 01       	movw	r28, r24
 7d6:	16 2f       	mov	r17, r22
	verafyNum(num/16);
 7d8:	62 95       	swap	r22
 7da:	6f 70       	andi	r22, 0x0F	; 15
 7dc:	0e 94 9c 03 	call	0x738	; 0x738 <_ZN4Uart9verafyNumEh>
	verafyNum(num%16);
 7e0:	61 2f       	mov	r22, r17
 7e2:	6f 70       	andi	r22, 0x0F	; 15
 7e4:	ce 01       	movw	r24, r28
 7e6:	0e 94 9c 03 	call	0x738	; 0x738 <_ZN4Uart9verafyNumEh>
	UARTsend(',');
 7ea:	6c e2       	ldi	r22, 0x2C	; 44
 7ec:	ce 01       	movw	r24, r28
 7ee:	0e 94 6d 03 	call	0x6da	; 0x6da <_ZN4Uart8UARTsendEh>
	UARTsend(' ');
 7f2:	60 e2       	ldi	r22, 0x20	; 32
 7f4:	ce 01       	movw	r24, r28
 7f6:	0e 94 6d 03 	call	0x6da	; 0x6da <_ZN4Uart8UARTsendEh>
}
 7fa:	df 91       	pop	r29
 7fc:	cf 91       	pop	r28
 7fe:	1f 91       	pop	r17
 800:	08 95       	ret

00000802 <__udivmodsi4>:
 802:	a1 e2       	ldi	r26, 0x21	; 33
 804:	1a 2e       	mov	r1, r26
 806:	aa 1b       	sub	r26, r26
 808:	bb 1b       	sub	r27, r27
 80a:	fd 01       	movw	r30, r26
 80c:	0d c0       	rjmp	.+26     	; 0x828 <__udivmodsi4_ep>

0000080e <__udivmodsi4_loop>:
 80e:	aa 1f       	adc	r26, r26
 810:	bb 1f       	adc	r27, r27
 812:	ee 1f       	adc	r30, r30
 814:	ff 1f       	adc	r31, r31
 816:	a2 17       	cp	r26, r18
 818:	b3 07       	cpc	r27, r19
 81a:	e4 07       	cpc	r30, r20
 81c:	f5 07       	cpc	r31, r21
 81e:	20 f0       	brcs	.+8      	; 0x828 <__udivmodsi4_ep>
 820:	a2 1b       	sub	r26, r18
 822:	b3 0b       	sbc	r27, r19
 824:	e4 0b       	sbc	r30, r20
 826:	f5 0b       	sbc	r31, r21

00000828 <__udivmodsi4_ep>:
 828:	66 1f       	adc	r22, r22
 82a:	77 1f       	adc	r23, r23
 82c:	88 1f       	adc	r24, r24
 82e:	99 1f       	adc	r25, r25
 830:	1a 94       	dec	r1
 832:	69 f7       	brne	.-38     	; 0x80e <__udivmodsi4_loop>
 834:	60 95       	com	r22
 836:	70 95       	com	r23
 838:	80 95       	com	r24
 83a:	90 95       	com	r25
 83c:	9b 01       	movw	r18, r22
 83e:	ac 01       	movw	r20, r24
 840:	bd 01       	movw	r22, r26
 842:	cf 01       	movw	r24, r30
 844:	08 95       	ret

00000846 <__tablejump2__>:
 846:	ee 0f       	add	r30, r30
 848:	ff 1f       	adc	r31, r31
 84a:	05 90       	lpm	r0, Z+
 84c:	f4 91       	lpm	r31, Z
 84e:	e0 2d       	mov	r30, r0
 850:	09 94       	ijmp

00000852 <_exit>:
 852:	f8 94       	cli

00000854 <__stop_program>:
 854:	ff cf       	rjmp	.-2      	; 0x854 <__stop_program>
