
TEST1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000292  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000021e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000064  00800100  00800100  00000292  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000292  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000232c  00000000  00000000  0000043c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c60  00000000  00000000  00002768  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bbc  00000000  00000000  000033c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000035c  00000000  00000000  00003f84  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000089e  00000000  00000000  000042e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001eab  00000000  00000000  00004b7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  00006a29  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 35 00 	jmp	0x6a	; 0x6a <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

00000068 <__ctors_start>:
  68:	ab 00       	.word	0x00ab	; ????

0000006a <__ctors_end>:
  6a:	11 24       	eor	r1, r1
  6c:	1f be       	out	0x3f, r1	; 63
  6e:	cf ef       	ldi	r28, 0xFF	; 255
  70:	d8 e0       	ldi	r29, 0x08	; 8
  72:	de bf       	out	0x3e, r29	; 62
  74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_copy_data>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	a0 e0       	ldi	r26, 0x00	; 0
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	ee e1       	ldi	r30, 0x1E	; 30
  7e:	f2 e0       	ldi	r31, 0x02	; 2
  80:	02 c0       	rjmp	.+4      	; 0x86 <__do_copy_data+0x10>
  82:	05 90       	lpm	r0, Z+
  84:	0d 92       	st	X+, r0
  86:	a0 30       	cpi	r26, 0x00	; 0
  88:	b1 07       	cpc	r27, r17
  8a:	d9 f7       	brne	.-10     	; 0x82 <__do_copy_data+0xc>

0000008c <__do_clear_bss>:
  8c:	21 e0       	ldi	r18, 0x01	; 1
  8e:	a0 e0       	ldi	r26, 0x00	; 0
  90:	b1 e0       	ldi	r27, 0x01	; 1
  92:	01 c0       	rjmp	.+2      	; 0x96 <.do_clear_bss_start>

00000094 <.do_clear_bss_loop>:
  94:	1d 92       	st	X+, r1

00000096 <.do_clear_bss_start>:
  96:	a4 36       	cpi	r26, 0x64	; 100
  98:	b2 07       	cpc	r27, r18
  9a:	e1 f7       	brne	.-8      	; 0x94 <.do_clear_bss_loop>

0000009c <__do_global_ctors>:
  9c:	10 e0       	ldi	r17, 0x00	; 0
  9e:	c5 e3       	ldi	r28, 0x35	; 53
  a0:	d0 e0       	ldi	r29, 0x00	; 0
  a2:	04 c0       	rjmp	.+8      	; 0xac <__do_global_ctors+0x10>
  a4:	21 97       	sbiw	r28, 0x01	; 1
  a6:	fe 01       	movw	r30, r28
  a8:	0e 94 07 01 	call	0x20e	; 0x20e <__tablejump2__>
  ac:	c4 33       	cpi	r28, 0x34	; 52
  ae:	d1 07       	cpc	r29, r17
  b0:	c9 f7       	brne	.-14     	; 0xa4 <__do_global_ctors+0x8>
  b2:	0e 94 9e 00 	call	0x13c	; 0x13c <main>
  b6:	0c 94 0d 01 	jmp	0x21a	; 0x21a <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <_ZN8SoftUart19SoftUartReceiveDataEv>:
}
*/
char SoftUart::SoftUartReceiveData(void)
{
	char data = 0;
	while(bit_is_set(PINB,0));
  be:	18 99       	sbic	0x03, 0	; 3
  c0:	fe cf       	rjmp	.-4      	; 0xbe <_ZN8SoftUart19SoftUartReceiveDataEv>
	if (!bit_is_set(PINB,0))
  c2:	18 99       	sbic	0x03, 0	; 3
  c4:	37 c0       	rjmp	.+110    	; 0x134 <_ZN8SoftUart19SoftUartReceiveDataEv+0x76>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c6:	81 ea       	ldi	r24, 0xA1	; 161
  c8:	91 e0       	ldi	r25, 0x01	; 1
  ca:	01 97       	sbiw	r24, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <_ZN8SoftUart19SoftUartReceiveDataEv+0xc>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <_ZN8SoftUart19SoftUartReceiveDataEv+0x12>
  d0:	00 00       	nop
  d2:	20 e0       	ldi	r18, 0x00	; 0
  d4:	30 e0       	ldi	r19, 0x00	; 0
	
}
*/
char SoftUart::SoftUartReceiveData(void)
{
	char data = 0;
  d6:	80 e0       	ldi	r24, 0x00	; 0
	{
		_delay_us(104.5);
		for(char i = 0; i < 8; i++)
		{
			_delay_us(51);
			data |= bit_is_set(PINB,0) ? (1 << i) : (0 << i);
  d8:	e0 e0       	ldi	r30, 0x00	; 0
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	61 e0       	ldi	r22, 0x01	; 1
  de:	70 e0       	ldi	r23, 0x00	; 0
  e0:	ab ec       	ldi	r26, 0xCB	; 203
  e2:	b0 e0       	ldi	r27, 0x00	; 0
  e4:	11 97       	sbiw	r26, 0x01	; 1
  e6:	f1 f7       	brne	.-4      	; 0xe4 <_ZN8SoftUart19SoftUartReceiveDataEv+0x26>
  e8:	00 c0       	rjmp	.+0      	; 0xea <_ZN8SoftUart19SoftUartReceiveDataEv+0x2c>
  ea:	00 00       	nop
  ec:	18 9b       	sbis	0x03, 0	; 3
  ee:	08 c0       	rjmp	.+16     	; 0x100 <_ZN8SoftUart19SoftUartReceiveDataEv+0x42>
  f0:	ab 01       	movw	r20, r22
  f2:	02 2e       	mov	r0, r18
  f4:	02 c0       	rjmp	.+4      	; 0xfa <_ZN8SoftUart19SoftUartReceiveDataEv+0x3c>
  f6:	44 0f       	add	r20, r20
  f8:	55 1f       	adc	r21, r21
  fa:	0a 94       	dec	r0
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <_ZN8SoftUart19SoftUartReceiveDataEv+0x38>
  fe:	01 c0       	rjmp	.+2      	; 0x102 <_ZN8SoftUart19SoftUartReceiveDataEv+0x44>
 100:	4e 2f       	mov	r20, r30
 102:	84 2b       	or	r24, r20
 104:	ab ec       	ldi	r26, 0xCB	; 203
 106:	b0 e0       	ldi	r27, 0x00	; 0
 108:	11 97       	sbiw	r26, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <_ZN8SoftUart19SoftUartReceiveDataEv+0x4a>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <_ZN8SoftUart19SoftUartReceiveDataEv+0x50>
 10e:	00 00       	nop
 110:	2f 5f       	subi	r18, 0xFF	; 255
 112:	3f 4f       	sbci	r19, 0xFF	; 255
	char data = 0;
	while(bit_is_set(PINB,0));
	if (!bit_is_set(PINB,0))
	{
		_delay_us(104.5);
		for(char i = 0; i < 8; i++)
 114:	28 30       	cpi	r18, 0x08	; 8
 116:	31 05       	cpc	r19, r1
 118:	19 f7       	brne	.-58     	; 0xe0 <_ZN8SoftUart19SoftUartReceiveDataEv+0x22>
 11a:	b5 e3       	ldi	r27, 0x35	; 53
 11c:	ba 95       	dec	r27
 11e:	f1 f7       	brne	.-4      	; 0x11c <_ZN8SoftUart19SoftUartReceiveDataEv+0x5e>
 120:	00 00       	nop
			_delay_us(51);
			data |= bit_is_set(PINB,0) ? (1 << i) : (0 << i);
			_delay_us(51);
		}
		_delay_us(10);
		if (bit_is_set(PINB,0))
 122:	18 9b       	sbis	0x03, 0	; 3
 124:	09 c0       	rjmp	.+18     	; 0x138 <_ZN8SoftUart19SoftUartReceiveDataEv+0x7a>
 126:	e7 e7       	ldi	r30, 0x77	; 119
 128:	f1 e0       	ldi	r31, 0x01	; 1
 12a:	31 97       	sbiw	r30, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <_ZN8SoftUart19SoftUartReceiveDataEv+0x6c>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <_ZN8SoftUart19SoftUartReceiveDataEv+0x72>
 130:	00 00       	nop
		{
			_delay_us(94);
			return data;
 132:	08 95       	ret
		}
	}
	return 0;
 134:	80 e0       	ldi	r24, 0x00	; 0
 136:	08 95       	ret
 138:	80 e0       	ldi	r24, 0x00	; 0
}
 13a:	08 95       	ret

0000013c <main>:
	return 0;
}

int main(void)
{
	DDRC |= (1<<0)|(1<<1);
 13c:	87 b1       	in	r24, 0x07	; 7
 13e:	83 60       	ori	r24, 0x03	; 3
 140:	87 b9       	out	0x07, r24	; 7
	char data = 0;
    /* Replace with your application code */
    while (1) 
    {
		data = test1.SoftUartReceiveData();
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	91 e0       	ldi	r25, 0x01	; 1
 146:	0e 94 5f 00 	call	0xbe	; 0xbe <_ZN8SoftUart19SoftUartReceiveDataEv>
		test.UARTsend(data);
 14a:	68 2f       	mov	r22, r24
 14c:	82 e3       	ldi	r24, 0x32	; 50
 14e:	91 e0       	ldi	r25, 0x01	; 1
 150:	0e 94 dd 00 	call	0x1ba	; 0x1ba <_ZN4Uart8UARTsendEh>
 154:	f6 cf       	rjmp	.-20     	; 0x142 <main+0x6>

00000156 <_GLOBAL__sub_I_test>:
#include <avr/io.h>
#include <util/delay.h>
#include <avr/sfr_defs.h>
#include "UART.h"
#include "SoftUART.h"
Uart test;
 156:	60 e8       	ldi	r22, 0x80	; 128
 158:	75 e2       	ldi	r23, 0x25	; 37
 15a:	82 e3       	ldi	r24, 0x32	; 50
 15c:	91 e0       	ldi	r25, 0x01	; 1
 15e:	0e 94 da 00 	call	0x1b4	; 0x1b4 <_ZN4UartC1E8BaudRate>
 162:	08 95       	ret

00000164 <_ZN4Uart11setBaudRateE8BaudRate>:
		_str[i] = UARTreceive();
		i++;
	}
	_str[i] = 0;
	return *_str;
}
 164:	cb 01       	movw	r24, r22
 166:	a0 e0       	ldi	r26, 0x00	; 0
 168:	b0 e0       	ldi	r27, 0x00	; 0
 16a:	88 0f       	add	r24, r24
 16c:	99 1f       	adc	r25, r25
 16e:	aa 1f       	adc	r26, r26
 170:	bb 1f       	adc	r27, r27
 172:	88 0f       	add	r24, r24
 174:	99 1f       	adc	r25, r25
 176:	aa 1f       	adc	r26, r26
 178:	bb 1f       	adc	r27, r27
 17a:	9c 01       	movw	r18, r24
 17c:	ad 01       	movw	r20, r26
 17e:	22 0f       	add	r18, r18
 180:	33 1f       	adc	r19, r19
 182:	44 1f       	adc	r20, r20
 184:	55 1f       	adc	r21, r21
 186:	22 0f       	add	r18, r18
 188:	33 1f       	adc	r19, r19
 18a:	44 1f       	adc	r20, r20
 18c:	55 1f       	adc	r21, r21
 18e:	60 e0       	ldi	r22, 0x00	; 0
 190:	74 e2       	ldi	r23, 0x24	; 36
 192:	84 ef       	ldi	r24, 0xF4	; 244
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	0e 94 e5 00 	call	0x1ca	; 0x1ca <__udivmodsi4>
 19a:	21 50       	subi	r18, 0x01	; 1
 19c:	31 09       	sbc	r19, r1
 19e:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 1a2:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 1a6:	88 e1       	ldi	r24, 0x18	; 24
 1a8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 1ac:	86 e0       	ldi	r24, 0x06	; 6
 1ae:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 1b2:	08 95       	ret

000001b4 <_ZN4UartC1E8BaudRate>:
 1b4:	0e 94 b2 00 	call	0x164	; 0x164 <_ZN4Uart11setBaudRateE8BaudRate>
 1b8:	08 95       	ret

000001ba <_ZN4Uart8UARTsendEh>:
void Uart::UARTsend( unsigned char data)
{
	while(!(UCSR0A & (1<<UDRE0)));
 1ba:	e0 ec       	ldi	r30, 0xC0	; 192
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
 1be:	80 81       	ld	r24, Z
 1c0:	85 ff       	sbrs	r24, 5
 1c2:	fd cf       	rjmp	.-6      	; 0x1be <_ZN4Uart8UARTsendEh+0x4>
	UDR0 = data;
 1c4:	60 93 c6 00 	sts	0x00C6, r22	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 1c8:	08 95       	ret

000001ca <__udivmodsi4>:
 1ca:	a1 e2       	ldi	r26, 0x21	; 33
 1cc:	1a 2e       	mov	r1, r26
 1ce:	aa 1b       	sub	r26, r26
 1d0:	bb 1b       	sub	r27, r27
 1d2:	fd 01       	movw	r30, r26
 1d4:	0d c0       	rjmp	.+26     	; 0x1f0 <__udivmodsi4_ep>

000001d6 <__udivmodsi4_loop>:
 1d6:	aa 1f       	adc	r26, r26
 1d8:	bb 1f       	adc	r27, r27
 1da:	ee 1f       	adc	r30, r30
 1dc:	ff 1f       	adc	r31, r31
 1de:	a2 17       	cp	r26, r18
 1e0:	b3 07       	cpc	r27, r19
 1e2:	e4 07       	cpc	r30, r20
 1e4:	f5 07       	cpc	r31, r21
 1e6:	20 f0       	brcs	.+8      	; 0x1f0 <__udivmodsi4_ep>
 1e8:	a2 1b       	sub	r26, r18
 1ea:	b3 0b       	sbc	r27, r19
 1ec:	e4 0b       	sbc	r30, r20
 1ee:	f5 0b       	sbc	r31, r21

000001f0 <__udivmodsi4_ep>:
 1f0:	66 1f       	adc	r22, r22
 1f2:	77 1f       	adc	r23, r23
 1f4:	88 1f       	adc	r24, r24
 1f6:	99 1f       	adc	r25, r25
 1f8:	1a 94       	dec	r1
 1fa:	69 f7       	brne	.-38     	; 0x1d6 <__udivmodsi4_loop>
 1fc:	60 95       	com	r22
 1fe:	70 95       	com	r23
 200:	80 95       	com	r24
 202:	90 95       	com	r25
 204:	9b 01       	movw	r18, r22
 206:	ac 01       	movw	r20, r24
 208:	bd 01       	movw	r22, r26
 20a:	cf 01       	movw	r24, r30
 20c:	08 95       	ret

0000020e <__tablejump2__>:
 20e:	ee 0f       	add	r30, r30
 210:	ff 1f       	adc	r31, r31
 212:	05 90       	lpm	r0, Z+
 214:	f4 91       	lpm	r31, Z
 216:	e0 2d       	mov	r30, r0
 218:	09 94       	ijmp

0000021a <_exit>:
 21a:	f8 94       	cli

0000021c <__stop_program>:
 21c:	ff cf       	rjmp	.-2      	; 0x21c <__stop_program>
